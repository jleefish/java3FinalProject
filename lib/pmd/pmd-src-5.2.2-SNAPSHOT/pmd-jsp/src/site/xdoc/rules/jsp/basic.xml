<?xml version="1.0" encoding="UTF-8"?><document>
<properties>
<author email="tom@infoether.com">Tom Copeland</author>
<title>Ruleset: Basic JSP</title>
</properties>
<body>
<section name="Basic JSP">

	Rules concerning basic JSP guidelines.

	<subsection name="NoLongScripts">
<p>Since: PMD 3.6</p>
<p>
Scripts should be part of Tag Libraries, rather than part of JSP pages.
		</p>
<source>
					 
// HtmlScript [ (@EndLine - @BeginLine &gt; 10) ]
				
				</source>Example(s):
	        	<source>
			
&lt;HTML&gt;
&lt;BODY&gt;
&lt;!--Java Script--&gt;
&lt;SCRIPT language="JavaScript" type="text/javascript"&gt;
&lt;!--
function calcDays(){
  var date1 = document.getElementById('d1').lastChild.data;
  var date2 = document.getElementById('d2').lastChild.data;
  date1 = date1.split("-");
  date2 = date2.split("-");
  var sDate = new Date(date1[0]+"/"+date1[1]+"/"+date1[2]);
  var eDate = new Date(date2[0]+"/"+date2[1]+"/"+date2[2]);
  var daysApart = Math.abs(Math.round((sDate-eDate)/86400000));
  document.getElementById('diffDays').lastChild.data = daysApart;
}

onload=calcDays;
//--&gt;
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
			
		</source>
</subsection>

	<subsection name="NoScriptlets">
<p>Since: PMD 3.6</p>
<p>
Scriptlets should be factored into Tag Libraries or JSP	declarations, rather than being part of JSP pages.
		</p>
<source>
					
					//JspScriptlet
					|
					//Element[ upper-case(@Name)="JSP:SCRIPTLET" ]
					
				</source>Example(s):
	        	<source>
			 
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;%
response.setHeader("Pragma", "No-cache");
%&gt;
&lt;/HEAD&gt;
	&lt;BODY&gt;
		&lt;jsp:scriptlet&gt;String title = "Hello world!";&lt;/jsp:scriptlet&gt;
	&lt;/BODY&gt;
&lt;/HTML&gt;
					 
		</source>
</subsection>

	<subsection name="NoInlineStyleInformation">
<p>Since: PMD 3.6</p>
<p> 
Style information should be put in CSS files, not in JSPs. Therefore, don't use &lt;B&gt; or &lt;FONT&gt; tags, or attributes like "align='center'". 
		</p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/jsp/rule/basic/NoInlineStyleInformationRule.html">net.sourceforge.pmd.lang.jsp.rule.basic.NoInlineStyleInformationRule</a>
</p>Example(s):
	        	<source>
			
&lt;html&gt;&lt;body&gt;&lt;p align='center'&gt;&lt;b&gt;text&lt;/b&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
			
		</source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>


	<subsection name="NoClassAttribute">
<p>Since: PMD 3.6</p>
<p>
Do not use an attribute called 'class'. Use "styleclass" for CSS styles.
		</p>
<source>
					 //Attribute[ upper-case(@Name)="CLASS" ]  
				</source>Example(s):
	        	<source>
			
&lt;HTML&gt; &lt;BODY&gt;
&lt;P class="MajorHeading"&gt;Some text&lt;/P&gt;
&lt;/BODY&gt; &lt;/HTML&gt;
			
		</source>
</subsection>

	<subsection name="NoJspForward">
<p>Since: PMD 3.6</p>
<p>
Do not do a forward from within a JSP file.
		</p>
<source>
					 //Element[ @Name="jsp:forward" ]  
				</source>Example(s):
	        	<source>
			
&lt;jsp:forward page='UnderConstruction.jsp'/&gt;
			
		</source>
</subsection>

	<subsection name="IframeMissingSrcAttribute">
<p>Since: PMD 3.6</p>
<p>
IFrames which are missing a src element can cause security information popups in IE if you are accessing the page
through SSL. See http://support.microsoft.com/default.aspx?scid=kb;EN-US;Q261188
		</p>
<source>
					 
	//Element[upper-case(@Name)="IFRAME"][count(Attribute[upper-case(@Name)="SRC" ]) = 0]
					 
				</source>Example(s):
	        	<source>
			
&lt;HTML&gt;&lt;title&gt;bad example&gt;&lt;BODY&gt;
&lt;iframe&gt;&lt;/iframe&gt;
&lt;/BODY&gt; &lt;/HTML&gt;

&lt;HTML&gt;&lt;title&gt;good example&gt;&lt;BODY&gt;
&lt;iframe src="foo"&gt;&lt;/iframe&gt;
&lt;/BODY&gt; &lt;/HTML&gt;
			
		</source>
</subsection>

	<subsection name="NoHtmlComments">
<p>Since: PMD 3.6</p>
<p>
			In a production system, HTML comments increase the payload
			between the application server to the client, and serve
			little other purpose. Consider switching to JSP comments.
		</p>
<source>
					 
	//CommentTag
					 
				</source>Example(s):
	        	<source>
			
&lt;HTML&gt;&lt;title&gt;bad example&gt;&lt;BODY&gt;
&lt;!-- HTML comment --&gt;
&lt;/BODY&gt; &lt;/HTML&gt;

&lt;HTML&gt;&lt;title&gt;good example&gt;&lt;BODY&gt;
&lt;%-- JSP comment --%&gt;
&lt;/BODY&gt; &lt;/HTML&gt;
			
		</source>
</subsection>

	<subsection name="DuplicateJspImports">
<p>Since: PMD 3.7</p>
<p>Avoid duplicate import statements inside JSP's. 
		</p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/jsp/rule/basic/DuplicateJspImportsRule.html">net.sourceforge.pmd.lang.jsp.rule.basic.DuplicateJspImportsRule</a>
</p>Example(s):
	        	<source>
			 
&lt;%@ page import=\"com.foo.MyClass,com.foo.MyClass\"%&gt;&lt;html&gt;&lt;body&gt;&lt;b&gt;&lt;img src=\"&lt;%=Some.get()%&gt;/foo\"&gt;xx&lt;/img&gt;text&lt;/b&gt;&lt;/body&gt;&lt;/html&gt;
			 
		</source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

	<subsection name="JspEncoding">
<p>Since: PMD 4.0</p>
<p>
			
A missing 'meta' tag or page directive will trigger this rule, as well as a non-UTF-8 charset.
            
		</p>
<source>
					
//Content[
not(Element[@Name="meta"][
   Attribute[@Name="content"]/AttributeValue[contains(lower-case(@Image),"charset=utf-8")]
]) 
and 
    not(JspDirective[@Name='page']/JspDirectiveAttribute[@Name='contentType'][contains(lower-case(@Value),"charset=utf-8")])
]
                    
				</source>Example(s):
	        	<source>
			
                Most browsers should be able to interpret the following headers:
                
                &lt;%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %&gt;
                    
                &lt;meta http-equiv="Content-Type"  content="text/html; charset=UTF-8" /&gt;
            
		</source>
</subsection>

    <subsection name="NoInlineScript">
<p>Since: PMD 4.0</p>
<p>
            
Avoid inlining HTML script content.  Consider externalizing the HTML script using the 'src' attribute on the &lt;script&gt; element.
Externalized script could be reused between pages.  Browsers can also cache the script, reducing overall download bandwidth.
            
        </p>
<source>
                    
//HtmlScript[@Image != '']
                    
                </source>Example(s):
	        	<source>
            
                Most browsers should be able to interpret the following headers:
                
                &lt;%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %&gt;
                    
                &lt;meta http-equiv="Content-Type"  content="text/html; charset=UTF-8" /&gt;
            
        </source>
</subsection>
    
    <subsection name="NoUnsanitizedJSPExpression">
<p>Since: PMD 5.1.4</p>
<p>
Avoid using expressions without escaping / sanitizing. This could lead to cross site scripting - as the expression
would be interpreted by the browser directly (e.g. "&lt;script&gt;alert('hello');&lt;/script&gt;").
        </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/jsp/rule/basic/NoUnsanitizedJSPExpressionRule.html">net.sourceforge.pmd.lang.jsp.rule.basic.NoUnsanitizedJSPExpressionRule</a>
</p>Example(s):
	        	<source>
            
&lt;%@ page contentType="text/html; charset=UTF-8" %&gt;
&lt;%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %&gt;
${expression}                    &lt;!-- don't use this --&gt;
${fn:escapeXml(expression)}      &lt;!-- instead, escape it --&gt;
&lt;c:out value="${expression}" /&gt;  &lt;!-- or use c:out --&gt;
            
        </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>
    
</section>
</body>
</document>
