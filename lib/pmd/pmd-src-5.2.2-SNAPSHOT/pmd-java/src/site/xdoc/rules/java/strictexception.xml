<?xml version="1.0" encoding="UTF-8"?><document>
<properties>
<author email="tom@infoether.com">Tom Copeland</author>
<title>Ruleset: Strict Exceptions</title>
</properties>
<body>
<section name="Strict Exceptions">
  
These rules provide some strict guidelines about throwing and catching exceptions.
  

   <subsection name="AvoidCatchingThrowable">
<p>Since: PMD 1.2</p>
<p>
Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as 
OutOfMemoryError that should be exposed and managed separately.
      </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strictexception/AvoidCatchingThrowableRule.html">net.sourceforge.pmd.lang.java.rule.strictexception.AvoidCatchingThrowableRule</a>
</p>Example(s):
	        	<source>
	
public void bar() {
	try {
     // do something
    } catch (Throwable th) {  // should not catch Throwable
		th.printStackTrace();
    }
  }
	
      </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

   <subsection name="SignatureDeclareThrowsException">
<p>Since: PMD 1.2</p>
<p>
Methods that declare the generic Exception as a possible throwable are not very helpful since their
failure modes are unclear. Use a class derived from RuntimeException or a more specific checked exception.
      </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strictexception/SignatureDeclareThrowsExceptionRule.html">net.sourceforge.pmd.lang.java.rule.strictexception.SignatureDeclareThrowsExceptionRule</a>
</p>Example(s):
	        	<source>
                
public void foo() throws Exception {
}
                
      </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

    <subsection name="ExceptionAsFlowControl">
<p>Since: PMD 1.8</p>
<p>
Using Exceptions as form of flow control is not recommended as they obscure true exceptions when debugging.
Either add the necessary validation or use an alternate control structure.
      </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strictexception/ExceptionAsFlowControlRule.html">net.sourceforge.pmd.lang.java.rule.strictexception.ExceptionAsFlowControlRule</a>
</p>Example(s):
	        	<source>
  
public void bar() {
    try {
      try {
      } catch (Exception e) {
        throw new WrapperException(e);
       // this is essentially a GOTO to the WrapperException catch block
       }
     } catch (WrapperException e) {
     // do some more stuff
    }
  }
  
      </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

<subsection name="AvoidCatchingNPE">
<p>Since: PMD 1.8</p>
<p>
Code should never throw NullPointerExceptions under normal circumstances.  A catch block may hide the 
original error, causing other, more subtle problems later on.
    </p>
<source>
            
//CatchStatement/FormalParameter/Type
 /ReferenceType/ClassOrInterfaceType[@Image='NullPointerException']
 
        </source>Example(s):
	        	<source>  
public class Foo {
  void bar() {
    try {
      // do something
      }  catch (NullPointerException npe) {
    }
  }
}

    </source>
</subsection>

  <subsection name="AvoidThrowingRawExceptionTypes">
<p>Since: PMD 1.8</p>
<p>
Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable,
Exception, or Error, use a subclassed exception or error instead.
    </p>
<source>
            
//AllocationExpression
 /ClassOrInterfaceType[
 (@Image='Throwable' and count(//ImportDeclaration/Name[ends-with(@Image,'Throwable')]) = 0)
or
 (@Image='Exception' and count(//ImportDeclaration/Name[ends-with(@Image,'Exception')]) = 0)
or
 (@Image='Error'  and count(//ImportDeclaration/Name[ends-with(@Image,'Error')]) = 0)
or
( @Image='RuntimeException'  and count(//ImportDeclaration/Name[ends-with(@Image,'RuntimeException')]) = 0)
]
 
        </source>Example(s):
	        	<source>
      
public class Foo {
  public void bar() throws Exception {
    throw new Exception();
   }
}

    </source>
</subsection>

    <subsection name="AvoidThrowingNullPointerException">
<p>Since: PMD 1.8</p>
<p>
Avoid throwing NullPointerExceptions. These are confusing because most people will assume that the
virtual machine threw it. Consider using an IllegalArgumentException instead; this will be
clearly seen as a programmer-initiated exception.
      </p>
<source>
              
//AllocationExpression/ClassOrInterfaceType[@Image='NullPointerException']
   
          </source>Example(s):
	        	<source>
        
public class Foo {
  void bar() {
    throw new NullPointerException();
  }
}
  
      </source>
</subsection>

  <subsection name="AvoidRethrowingException">
<p>Since: PMD 3.8</p>
<p>
Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.
    </p>
<source>
                
//CatchStatement[FormalParameter
 /VariableDeclaratorId/@Image = Block/BlockStatement/Statement
 /ThrowStatement/Expression/PrimaryExpression[count(PrimarySuffix)=0]/PrimaryPrefix/Name/@Image
 and count(Block/BlockStatement/Statement) =1]
 
            </source>Example(s):
	        	<source>  
public void bar() {
    try {
    // do something
    }  catch (SomeException se) {
       throw se;
    }
}
  
    </source>
</subsection>

  <subsection name="DoNotExtendJavaLangError">
<p>Since: PMD 4.0</p>
<p>
      
Errors are system exceptions. Do not extend them.
      
    </p>
<source>
          
//ClassOrInterfaceDeclaration/ExtendsList/ClassOrInterfaceType
  [@Image="Error" or @Image="java.lang.Error"]
          
        </source>Example(s):
	        	<source>
public class Foo extends Error { }
    </source>
</subsection>

	<subsection name="DoNotThrowExceptionInFinally">
<p>Since: PMD 4.2</p>
<p>
			
Throwing exceptions within a 'finally' block is confusing since they may mask other exceptions 
or code defects.
Note: This is a PMD implementation of the Lint4j rule "A throw in a finally block"
			
		</p>
<source>
			    
//FinallyStatement[descendant::ThrowStatement]
			          
			  </source>Example(s):
	        	<source>
    		
public class Foo {
	public void bar() {
		try {
			// Here do some stuff
		} catch( Exception e) {
			// Handling the issue
		} finally {
			// is this really a good idea ?
			throw new Exception();
		}
	}
}
	    	
    	</source>
</subsection>

  <subsection name="AvoidThrowingNewInstanceOfSameException">
<p>Since: PMD 4.2.5</p>
<p>
Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to
code size and runtime complexity.
    </p>
<source>
        
//CatchStatement[
  count(Block/BlockStatement/Statement) = 1
  and
  FormalParameter/Type/ReferenceType/ClassOrInterfaceType/@Image = Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/ClassOrInterfaceType/@Image
  and
  count(Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/Arguments/ArgumentList/Expression) = 1
  and
  FormalParameter/VariableDeclaratorId = Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name
  ]
 
      </source>Example(s):
	        	<source>  
public void bar() {
      try {
       // do something
      }  catch (SomeException se) {
         // harmless comment      
           throw new SomeException(se);
      }
}
  
    </source>
</subsection>

  <subsection name="AvoidCatchingGenericException">
<p>Since: PMD 4.2.6</p>
<p>
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
    </p>
<source>
      
        //CatchStatement/FormalParameter/Type/ReferenceType/ClassOrInterfaceType[
          @Image='NullPointerException' or
          @Image='Exception' or
          @Image='RuntimeException']
      
      </source>Example(s):
	        	<source>
    
package com.igate.primitive;
    
public class PrimitiveType {
    
  public void downCastPrimitiveType() {
    try {
      System.out.println(" i [" + i + "]");
    } catch(Exception e) {
      e.printStackTrace();
    } catch(RuntimeException e) {
      e.printStackTrace();
    } catch(NullPointerException e) {
      e.printStackTrace();
    }
  } 
}
    
    </source>
</subsection>

	<subsection name="AvoidLosingExceptionInformation">
<p>Since: PMD 4.2.6</p>
<p>
Statements in a catch block that invoke accessors on the exception without using the information
only add to code size.  Either remove the invocation, or use the return result.
		</p>
<source>

//CatchStatement/Block/BlockStatement/Statement/StatementExpression/PrimaryExpression/PrimaryPrefix/Name
[
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getMessage')
   or
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getLocalizedMessage')
   or
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getCause')
   or
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getStackTrace')
   or
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.toString')
]

				</source>Example(s):
	        	<source>

public void bar() {
	try {
		// do something
	} catch (SomeException se) {
		se.getMessage();
	}
}

		</source>
</subsection>

</section>
</body>
</document>
