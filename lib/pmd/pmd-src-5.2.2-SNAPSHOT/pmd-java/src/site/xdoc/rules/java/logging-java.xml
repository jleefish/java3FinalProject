<?xml version="1.0" encoding="UTF-8"?><document>
<properties>
<author email="tom@infoether.com">Tom Copeland</author>
<title>Ruleset: Java Logging</title>
</properties>
<body>
<section name="Java Logging">

  
The Java Logging ruleset contains a collection of rules that find questionable usages of the logger.
  

    <subsection name="MoreThanOneLogger">
<p>Since: PMD 2.0</p>
<p>
Normally only one logger is used in each class.
     </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/logging/MoreThanOneLoggerRule.html">net.sourceforge.pmd.lang.java.rule.logging.MoreThanOneLoggerRule</a>
</p>Example(s):
	        	<source>
 
public class Foo {
    Logger log = Logger.getLogger(Foo.class.getName());
    // It is very rare to see two loggers on a class, normally
    // log information is multiplexed by levels
    Logger log2= Logger.getLogger(Foo.class.getName());
}

     </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

     <subsection name="LoggerIsNotStaticFinal">
<p>Since: PMD 2.0</p>
<p>
In most cases, the Logger reference can be declared as static and final.
     </p>
<source>
                 
//VariableDeclarator
 [parent::FieldDeclaration]
 [../Type/ReferenceType
  /ClassOrInterfaceType[@Image='Logger']
   and
  (..[@Final='false'] or ..[@Static = 'false'] ) ]
                
             </source>Example(s):
	        	<source>
 
public class Foo{
    Logger log = Logger.getLogger(Foo.class.getName());					// not recommended

    static final Logger log = Logger.getLogger(Foo.class.getName());	// preferred approach
}

     </source>
</subsection>

    <subsection name="SystemPrintln">
<p>Since: PMD 2.1</p>
<p>
References to System.(out|err).print are usually intended for debugging purposes and can remain in
the codebase even in production code. By using a logger one can enable/disable this behaviour at
will (and by priority) and avoid clogging the Standard out log.
     </p>
<source>
                 
//Name[
    starts-with(@Image, 'System.out.print')
    or
    starts-with(@Image, 'System.err.print')
    ]
                
             </source>Example(s):
	        	<source>
 
class Foo{
    Logger log = Logger.getLogger(Foo.class.getName());
    public void testA () {
        System.out.println("Entering test");
        // Better use this
        log.fine("Entering test");
    }
}

     </source>
</subsection>

    <subsection name="AvoidPrintStackTrace">
<p>Since: PMD 3.2</p>
<p>
Avoid printStackTrace(); use a logger call instead.
           </p>
<source>

//PrimaryExpression
 [PrimaryPrefix/Name[contains(@Image,'printStackTrace')]]
 [PrimarySuffix[not(boolean(Arguments/ArgumentList/Expression))]]

             </source>Example(s):
	        	<source>

class Foo {
  void bar() {
    try {
     // do something
    } catch (Exception e) {
     e.printStackTrace();
     }
   }
}

           </source>
</subsection>

   <subsection name="GuardLogStatementJavaUtil">
<p>Since: PMD 5.1.0</p>
<p>
Whenever using a log level, one should check if the loglevel is actually enabled, or
otherwise skip the associate String creation and manipulation.
     </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/logging/GuardLogStatementJavaUtilRule.html">net.sourceforge.pmd.lang.java.rule.logging.GuardLogStatementJavaUtilRule</a>
</p>Example(s):
	        	<source>
 
 	// Add this for performance
	if (log.isLoggable(Level.FINE)) { ...
 	    log.fine("log something" + " and " + "concat strings");

     </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
<tr>
<td>guardsMethods</td>
<td>[]</td>
<td>method use to guard the log statement</td>
</tr>
<tr>
<td>logLevels</td>
<td>[]</td>
<td>LogLevels to guard</td>
</tr>
</table>
</subsection>
</section>
</body>
</document>
