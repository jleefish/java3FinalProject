<?xml version="1.0" encoding="UTF-8"?><document>
<properties>
<author email="tom@infoether.com">Tom Copeland</author>
<title>Ruleset: String and StringBuffer</title>
</properties>
<body>
<section name="String and StringBuffer">
  
These rules deal with different issues that can arise with manipulation of the String, StringBuffer, or StringBuilder instances.
  

    <subsection name="AvoidDuplicateLiterals">
<p>Since: PMD 1.0</p>
<p>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strings/AvoidDuplicateLiteralsRule.html">net.sourceforge.pmd.lang.java.rule.strings.AvoidDuplicateLiteralsRule</a>
</p>Example(s):
	        	<source>

private void bar() {
     buz("Howdy");
     buz("Howdy");
     buz("Howdy");
     buz("Howdy");
 }
 private void buz(String x) {}

    </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
<tr>
<td>exceptionfile</td>
<td/>
<td>File containing strings to skip (one string per line), only used if ignore list is not set</td>
</tr>
<tr>
<td>separator</td>
<td>,</td>
<td>Ignore list separator</td>
</tr>
<tr>
<td>exceptionList</td>
<td/>
<td>Strings to ignore</td>
</tr>
<tr>
<td>maxDuplicateLiterals</td>
<td>4</td>
<td>Max duplicate literals</td>
</tr>
<tr>
<td>minimumLength</td>
<td>3</td>
<td>Minimum string length to check</td>
</tr>
<tr>
<td>skipAnnotations</td>
<td>false</td>
<td>Skip literals within annotations</td>
</tr>
</table>
</subsection>

    <subsection name="StringInstantiation">
<p>Since: PMD 1.0</p>
<p>
Avoid instantiating String objects; this is usually unnecessary since they are immutable and can be safely shared.
    </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strings/StringInstantiationRule.html">net.sourceforge.pmd.lang.java.rule.strings.StringInstantiationRule</a>
</p>Example(s):
	        	<source>

private String bar = new String("bar"); // just do a String bar = "bar";

    </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

   <subsection name="StringToString">
<p>Since: PMD 1.0</p>
<p>
Avoid calling toString() on objects already known to be string instances; this is unnecessary.
    </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strings/StringToStringRule.html">net.sourceforge.pmd.lang.java.rule.strings.StringToStringRule</a>
</p>Example(s):
	        	<source>

private String baz() {
    String bar = "howdy";
    return bar.toString();
}

    </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

    <subsection name="InefficientStringBuffering">
<p>Since: PMD 3.4</p>
<p>
Avoid concatenating non-literals in a StringBuffer constructor or append() since intermediate buffers will
need to be be created and destroyed by the JVM.
    </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strings/InefficientStringBufferingRule.html">net.sourceforge.pmd.lang.java.rule.strings.InefficientStringBufferingRule</a>
</p>Example(s):
	        	<source>

    // Avoid this, two buffers are actually being created here
StringBuffer sb = new StringBuffer("tmp = "+System.getProperty("java.io.tmpdir"));
    
    // do this instead
StringBuffer sb = new StringBuffer("tmp = ");
sb.append(System.getProperty("java.io.tmpdir"));

    </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

    <subsection name="UnnecessaryCaseChange">
<p>Since: PMD 3.3</p>
<p>
Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()
       </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strings/UnnecessaryCaseChangeRule.html">net.sourceforge.pmd.lang.java.rule.strings.UnnecessaryCaseChangeRule</a>
</p>Example(s):
	        	<source>
       
boolean answer1 = buz.toUpperCase().equals("baz");	 		// should be buz.equalsIgnoreCase("baz")
    
boolean answer2 = buz.toUpperCase().equalsIgnoreCase("baz");	 // another unnecessary toUpperCase()
 
       </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

    <subsection name="UseStringBufferLength">
<p>Since: PMD 3.4</p>
<p>
Use StringBuffer.length() to determine StringBuffer length rather than using StringBuffer.toString().equals("")
or StringBuffer.toString().length() == ...
      </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strings/UseStringBufferLengthRule.html">net.sourceforge.pmd.lang.java.rule.strings.UseStringBufferLengthRule</a>
</p>Example(s):
	        	<source>
  
StringBuffer sb = new StringBuffer();
    
if (sb.toString().equals("")) {}	    // inefficient 
    
if (sb.length() == 0) {}	    		// preferred
  
      </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>


    <subsection name="AppendCharacterWithChar">
<p>Since: PMD 3.5</p>
<p>
Avoid concatenating characters as strings in StringBuffer/StringBuilder.append methods.
    </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strings/AppendCharacterWithCharRule.html">net.sourceforge.pmd.lang.java.rule.strings.AppendCharacterWithCharRule</a>
</p>Example(s):
	        	<source>

StringBuffer sb = new StringBuffer();
sb.append("a");		 // avoid this

StringBuffer sb = new StringBuffer();
sb.append('a');		// use this instead

    </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

<subsection name="ConsecutiveAppendsShouldReuse">
<p>Since: PMD 5.1</p>
<p>
Consecutively calls to StringBuffer/StringBuilder .append should reuse the target object. This can improve the performance.
    </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strings/ConsecutiveAppendsShouldReuseRule.html">net.sourceforge.pmd.lang.java.rule.strings.ConsecutiveAppendsShouldReuseRule</a>
</p>Example(s):
	        	<source>

String foo = " ";

StringBuffer buf = new StringBuffer();
buf.append("Hello"); // poor
buf.append(foo);
buf.append("World");

StringBuffer buf = new StringBuffer();
buf.append("Hello").append(foo).append("World"); // good

    </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

        <subsection name="ConsecutiveLiteralAppends">
<p>Since: PMD 3.5</p>
<p>
Consecutively calling StringBuffer/StringBuilder.append with String literals
    </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strings/ConsecutiveLiteralAppendsRule.html">net.sourceforge.pmd.lang.java.rule.strings.ConsecutiveLiteralAppendsRule</a>
</p>Example(s):
	        	<source>

StringBuffer buf = new StringBuffer();
buf.append("Hello").append(" ").append("World"); // poor
buf.append("Hello World");        				 // good

    </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
<tr>
<td>threshold</td>
<td>1</td>
<td>Max consecutive appends</td>
</tr>
</table>
</subsection>


    <subsection name="UseIndexOfChar">
<p>Since: PMD 3.5</p>
<p>
Use String.indexOf(char) when checking for the index of a single character; it executes faster.
    </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strings/UseIndexOfCharRule.html">net.sourceforge.pmd.lang.java.rule.strings.UseIndexOfCharRule</a>
</p>Example(s):
	        	<source>

String s = "hello world";
  // avoid this
if (s.indexOf("d") {}
  // instead do this
if (s.indexOf('d') {}

    </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

    <subsection name="InefficientEmptyStringCheck">
<p>Since: PMD 3.6</p>
<p>
String.trim().length() is an inefficient way to check if a String is really empty, as it
creates a new String object just to check its size. Consider creating a static function that
loops through a string, checking Character.isWhitespace() on each character and returning
false if a non-whitespace character is found.
    </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strings/InefficientEmptyStringCheckRule.html">net.sourceforge.pmd.lang.java.rule.strings.InefficientEmptyStringCheckRule</a>
</p>Example(s):
	        	<source>

public void bar(String string) {
	if (string != null &amp;&amp; string.trim().size() &gt; 0) {
		doSomething();
	}
}

    </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

    <subsection name="InsufficientStringBufferDeclaration">
<p>Since: PMD 3.6</p>
<p>
Failing to pre-size a StringBuffer or StringBuilder properly could cause it to re-size many times
during runtime. This rule attempts to determine the total number the characters that are actually 
passed into StringBuffer.append(), but represents a best guess "worst case" scenario. An empty
StringBuffer/StringBuilder constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strings/InsufficientStringBufferDeclarationRule.html">net.sourceforge.pmd.lang.java.rule.strings.InsufficientStringBufferDeclarationRule</a>
</p>Example(s):
	        	<source>

StringBuffer bad = new StringBuffer();
bad.append("This is a long string that will exceed the default 16 characters");
        
StringBuffer good = new StringBuffer(41);
good.append("This is a long string, which is pre-sized");

    </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

    <subsection name="UselessStringValueOf">
<p>Since: PMD 3.8</p>
<p>
No need to call String.valueOf to append to a string; just use the valueOf() argument directly.
      </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/strings/UselessStringValueOfRule.html">net.sourceforge.pmd.lang.java.rule.strings.UselessStringValueOfRule</a>
</p>Example(s):
	        	<source>

public String convert(int i) {
	String s;
	s = "a" + String.valueOf(i);	// not required
	s = "a" + i; 					// preferred approach
	return s;
}

          </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>


<subsection name="StringBufferInstantiationWithChar">
<p>Since: PMD 3.9</p>
<p>
Individual character values provided as initialization arguments will be converted into integers.
This can lead to internal buffer sizes that are larger than expected. Some examples:

new StringBuffer() 		//  16
new StringBuffer(6)		//  6
new StringBuffer("hello world")  // 11 + 16 = 27
new StringBuffer('A')	//  chr(A) = 65
new StringBuffer("A")   //  1 + 16 = 17 

new StringBuilder() 		//  16
new StringBuilder(6)		//  6
new StringBuilder("hello world")  // 11 + 16 = 27
new StringBuilder('C')	 //  chr(C) = 67
new StringBuilder("A")   //  1 + 16 = 17
    </p>
<source>

//AllocationExpression/ClassOrInterfaceType
[@Image='StringBuffer' or @Image='StringBuilder']
/../Arguments/ArgumentList/Expression/PrimaryExpression
/PrimaryPrefix/
Literal
  [starts-with(@Image, "'")]
  [ends-with(@Image, "'")]

            </source>Example(s):
	        	<source>

	// misleading instantiation, these buffers
	// are actually sized to 99 characters long
StringBuffer  sb1 = new StringBuffer('c');   
StringBuilder sb2 = new StringBuilder('c');
  
// in these forms, just single characters are allocated
StringBuffer  sb3 = new StringBuffer("c");
StringBuilder sb4 = new StringBuilder("c");

    </source>
</subsection>

<subsection name="UseEqualsToCompareStrings">
<p>Since: PMD 4.1</p>
<p>
Using '==' or '!=' to compare strings only works if intern version is used on both sides.
Use the equals() method instead.
    </p>
<source>

//EqualityExpression/PrimaryExpression
[(PrimaryPrefix/Literal
   [starts-with(@Image, '"')]
   [ends-with(@Image, '"')]
and count(PrimarySuffix) = 0)]

            </source>Example(s):
	        	<source>

public boolean test(String s) {
    if (s == "one") return true; 		// unreliable
    if ("two".equals(s)) return true; 	// better
    return false;
}

    </source>
</subsection>

	<subsection name="AvoidStringBufferField">
<p>Since: PMD 4.2</p>
<p>
		
StringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks
if held within objects with long lifetimes.
		
    </p>
<source>

//FieldDeclaration/Type/ReferenceType/ClassOrInterfaceType[@Image = 'StringBuffer' or @Image = 'StringBuilder']

			</source>Example(s):
	        	<source>

public class Foo {
	private StringBuffer buffer;	// potential memory leak as an instance variable;
}

		</source>
</subsection>

</section>
</body>
</document>
