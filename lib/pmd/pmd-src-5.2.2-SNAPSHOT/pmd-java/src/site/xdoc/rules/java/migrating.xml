<?xml version="1.0" encoding="UTF-8"?><document>
<properties>
<author email="tom@infoether.com">Tom Copeland</author>
<title>Ruleset: Migration</title>
</properties>
<body>
<section name="Migration">

  
Contains rules about migrating from one JDK version to another.  Don't use these rules directly,
rather, use a wrapper ruleset such as migrating_to_13.xml.
  

<subsection name="ReplaceVectorWithList">
<p>Since: PMD 3.4</p>
<p>
Consider replacing Vector usages with the newer java.util.ArrayList if expensive thread-safe operations are not required.
  </p>
<source>

//Type/ReferenceType/ClassOrInterfaceType[@Image='Vector']
 
    </source>Example(s):
	        	<source>

public class Foo {
 void bar() {
    Vector v = new Vector();
 }
}

  </source>
</subsection>

    <subsection name="ReplaceHashtableWithMap">
<p>Since: PMD 3.4</p>
<p>
Consider replacing Hashtable usage with the newer java.util.Map if thread safety is not required.
      </p>
<source>
    
//Type/ReferenceType/ClassOrInterfaceType[@Image='Hashtable']
     
        </source>Example(s):
	        	<source>
    
public class Foo {
	void bar() {
		Hashtable h = new Hashtable();
	}
}
    
      </source>
</subsection>

    <subsection name="ReplaceEnumerationWithIterator">
<p>Since: PMD 3.4</p>
<p>
Consider replacing Enumeration usages with the newer java.util.Iterator
      </p>
<source>
    
//ImplementsList/ClassOrInterfaceType[@Image='Enumeration']
     
        </source>Example(s):
	        	<source>
    
public class Foo implements Enumeration {
    private int x = 42;
    public boolean hasMoreElements() {
        return true;
    }
    public Object nextElement() {
        return String.valueOf(i++);
    }
}
    
      </source>
</subsection>

    <subsection name="AvoidEnumAsIdentifier">
<p>Since: PMD 3.4</p>
<p>
Use of the term 'enum' will conflict with newer versions of Java since it is a reserved word.
	</p>
<source>
                  
//VariableDeclaratorId[@Image='enum']
                  
              </source>Example(s):
	        	<source>
  
public class A {
	public  class foo {
		String enum = "foo";
	}
}
  
      </source>
</subsection>

    <subsection name="AvoidAssertAsIdentifier">
<p>Since: PMD 3.4</p>
<p>
Use of the term 'assert' will conflict with newer versions of Java since it is a reserved word.
	</p>
<source>
                  
//VariableDeclaratorId[@Image='assert']
                  
              </source>Example(s):
	        	<source>
  
public class A {
	public  class foo {
		String assert = "foo";
	}
}
  
      </source>
</subsection>

    <subsection name="IntegerInstantiation">
<p>Since: PMD 3.5</p>
<p>
Calling new Integer() causes memory allocation that can be avoided by the static Integer.valueOf().
It makes use of an internal cache that recycles earlier instances making it more memory efficient.
	</p>
<source>
                  
//PrimaryPrefix
 /AllocationExpression
  [not (ArrayDimsAndInits)
   and (ClassOrInterfaceType/@Image='Integer'
    or ClassOrInterfaceType/@Image='java.lang.Integer')]
                  
              </source>Example(s):
	        	<source>
  
public class Foo {
	private Integer i = new Integer(0); // change to Integer i = Integer.valueOf(0);
}
   
      </source>
</subsection>
	<subsection name="ByteInstantiation">
<p>Since: PMD 4.0</p>
<p>
Calling new Byte() causes memory allocation that can be avoided by the static Byte.valueOf().
It makes use of an internal cache that recycles earlier instances making it more memory efficient.
          </p>
<source>
          
//PrimaryPrefix/AllocationExpression
[not (ArrayDimsAndInits)
and (ClassOrInterfaceType/@Image='Byte'
or ClassOrInterfaceType/@Image='java.lang.Byte')]
          
          </source>Example(s):
	        	<source>

public class Foo {
	private Byte i = new Byte(0); // change to Byte i =	Byte.valueOf(0);
}

     </source>
</subsection>

    <subsection name="ShortInstantiation">
<p>Since: PMD 4.0</p>
<p>
Calling new Short() causes memory allocation that can be avoided by the static Short.valueOf().
It makes use of an internal cache that recycles earlier instances making it more memory efficient.
          </p>
<source>

//PrimaryPrefix
/AllocationExpression
[not (ArrayDimsAndInits)
and (ClassOrInterfaceType/@Image='Short'
or ClassOrInterfaceType/@Image='java.lang.Short')]

          </source>Example(s):
	        	<source>

public class Foo {
	private Short i = new Short(0); // change to Short i = Short.valueOf(0);
}

          </source>
</subsection>

<subsection name="LongInstantiation">
<p>Since: PMD 4.0</p>
<p>
Calling new Long() causes memory allocation that can be avoided by the static Long.valueOf().
It makes use of an internal cache that recycles earlier instances making it more memory efficient.
</p>
<source>

//PrimaryPrefix
/AllocationExpression
[not (ArrayDimsAndInits)
and (ClassOrInterfaceType/@Image='Long'
or ClassOrInterfaceType/@Image='java.lang.Long')]

    </source>Example(s):
	        	<source>

public class Foo {
	private Long i = new Long(0); // change to Long i = Long.valueOf(0);
}

    </source>
</subsection>


    <subsection name="JUnit4TestShouldUseBeforeAnnotation">
<p>Since: PMD 4.0</p>
<p>
In JUnit 3, the setUp method was used to set up all data entities required in running tests. 
JUnit 4 skips the setUp method and executes all methods annotated with @Before before all tests
      </p>
<source>

//ClassOrInterfaceBodyDeclaration[MethodDeclaration/MethodDeclarator[@Image='setUp']]
[count(Annotation/MarkerAnnotation/Name[@Image='Before'])=0]

              </source>Example(s):
	        	<source>

public class MyTest {
    public void setUp() {
        bad();
    }
}
public class MyTest2 {
    @Before public void setUp() {
        good();
    }
}

      </source>
</subsection>
    <subsection name="JUnit4TestShouldUseAfterAnnotation">
<p>Since: PMD 4.0</p>
<p>
In JUnit 3, the tearDown method was used to clean up all data entities required in running tests. 
JUnit 4 skips the tearDown method and executes all methods annotated with @After after running each test
      </p>
<source>

//ClassOrInterfaceBodyDeclaration[MethodDeclaration/MethodDeclarator[@Image='tearDown']]
[count(Annotation/MarkerAnnotation/Name[@Image='After'])=0]

              </source>Example(s):
	        	<source>

public class MyTest {
    public void tearDown() {
        bad();
    }
}
public class MyTest2 {
    @After public void tearDown() {
        good();
    }
}

      </source>
</subsection>
    <subsection name="JUnit4TestShouldUseTestAnnotation">
<p>Since: PMD 4.0</p>
<p>
In JUnit 3, the framework executed all methods which started with the word test as a unit test. 
In JUnit 4, only methods annotated with the @Test annotation are executed.
      </p>
<source>

//ClassOrInterfaceBodyDeclaration[MethodDeclaration/MethodDeclarator[starts-with(@Image,'test')]]
[count(Annotation//Name[@Image='Test'])=0]

              </source>Example(s):
	        	<source>

public class MyTest {
    public void testBad() {
        doSomething();
    }

	@Test
    public void testGood() {
        doSomething();
    }
}

      </source>
</subsection>
    <subsection name="JUnit4SuitesShouldUseSuiteAnnotation">
<p>Since: PMD 4.0</p>
<p>
In JUnit 3, test suites are indicated by the suite() method. In JUnit 4, suites are indicated
through the @RunWith(Suite.class) annotation.
      </p>
<source>

//ClassOrInterfaceBodyDeclaration[MethodDeclaration/MethodDeclarator[@Image='suite']]
[MethodDeclaration/ResultType/Type/ReferenceType/ClassOrInterfaceType[@Image='Test' or @Image = 'junit.framework.Test']]
[not(MethodDeclaration/Block//ClassOrInterfaceType[@Image='JUnit4TestAdapter'])]

              </source>Example(s):
	        	<source>

public class BadExample extends TestCase{

    public static Test suite(){
    	return new Suite();
    }
}

@RunWith(Suite.class)
@SuiteClasses( { TestOne.class, TestTwo.class })
public class GoodTest {
}
      </source>
</subsection>
    
    <subsection name="JUnitUseExpected">
<p>Since: PMD 4.0</p>
<p>
In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions.
      </p>
<p>This rule is defined by the following Java class: <a href="../../xref/net/sourceforge/pmd/lang/java/rule/migrating/JUnitUseExpectedRule.html">net.sourceforge.pmd.lang.java.rule.migrating.JUnitUseExpectedRule</a>
</p>Example(s):
	        	<source>

public class MyTest {
	@Test
    public void testBad() {
        try {
            doSomething();
            fail("should have thrown an exception");
        } catch (Exception e) {
        }
    }

	@Test(expected=Exception.class)
    public void testGood() {
        doSomething();
    }
}

      </source>
<p>This rule has the following properties:</p>
<table>
<th>Name</th>
<th>Default Value</th>
<th>Description</th>
<tr>
<td>violationSuppressRegex</td>
<td/>
<td>Suppress violations with messages matching a regular expression</td>
</tr>
<tr>
<td>violationSuppressXPath</td>
<td/>
<td>Suppress violations on nodes which match a given relative XPath expression.</td>
</tr>
</table>
</subsection>

</section>
</body>
</document>
