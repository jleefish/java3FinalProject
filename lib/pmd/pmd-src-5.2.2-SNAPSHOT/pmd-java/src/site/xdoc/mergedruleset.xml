<?xml version="1.0" encoding="UTF-8"?><!--        THIS FILE HAS BEEN AUTOMATICLY GENERATED.        --><rulesets><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Android" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>These rules deal with the Android SDK, mostly related to best practices.To get better results, make sure that the auxclasspath is defined for type resolution to work.  </description>  <rule name="CallSuperFirst" since="4.2.5" language="java" message="super should be called at the start of the method" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/android.html#CallSuperFirst">    <description>Super should be called at the start of the method</description>    <priority>3</priority>    <properties>      <property name="xpath">        <value>//MethodDeclaration[MethodDeclarator[  @Image='onCreate' or  @Image='onConfigurationChanged' or  @Image='onPostCreate' or  @Image='onPostResume' or  @Image='onRestart' or  @Image='onRestoreInstanceState' or  @Image='onResume' or  @Image='onStart'  ]]    /Block[not(      (BlockStatement[1]/Statement/StatementExpression/PrimaryExpression[./PrimaryPrefix[@SuperModifier='true']]/PrimarySuffix[@Image= ancestor::MethodDeclaration/MethodDeclarator/@Image]))][ancestor::ClassOrInterfaceDeclaration[ExtendsList/ClassOrInterfaceType[  typeof(@Image, 'android.app.Activity', 'Activity') or  typeof(@Image, 'android.app.Application', 'Application') or  typeof(@Image, 'android.app.Service', 'Service')]]]        </value>      </property>    </properties>    <example>public class DummyActivity extends Activity {	public void onCreate(Bundle bundle) {     // missing call to super.onCreate(bundle)		foo();	}}    </example>  </rule>  <rule name="CallSuperLast" since="4.2.5" language="java" message="super should be called at the end of the method" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/android.html#CallSuperLast">    <description>Super should be called at the end of the method</description>    <priority>3</priority>    <properties>      <property name="xpath">        <value>          //MethodDeclaration[MethodDeclarator[  @Image='finish' or  @Image='onDestroy' or  @Image='onPause' or  @Image='onSaveInstanceState' or  @Image='onStop' or  @Image='onTerminate'  ]]   /Block/BlockStatement[last()]    [not(Statement/StatementExpression/PrimaryExpression[./PrimaryPrefix[@SuperModifier='true']]/PrimarySuffix[@Image= ancestor::MethodDeclaration/MethodDeclarator/@Image])][ancestor::ClassOrInterfaceDeclaration[ExtendsList/ClassOrInterfaceType[  typeof(@Image, 'android.app.Activity', 'Activity') or  typeof(@Image, 'android.app.Application', 'Application') or  typeof(@Image, 'android.app.Service', 'Service')]]]        </value>      </property>    </properties>    <example>      public class DummyActivity extends Activity {	public void onPause() {		foo();		// missing call to super.onPause()	}}    </example>  </rule>  <rule name="DoNotHardCodeSDCard" since="4.2.6" language="java" message="Do not hardcode /sdcard." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/android.html#DoNotHardCodeSDCard">    <description>Use Environment.getExternalStorageDirectory() instead of "/sdcard"</description>    <priority>3</priority>    <properties>      <property name="xpath">        <value>//Literal[starts-with(@Image,'"/sdcard')]</value>      </property>    </properties>    <example>      public class MyActivity extends Activity {	protected void foo() {		String storageLocation = "/sdcard/mypackage";	// hard-coded, poor approach		storageLocation = Environment.getExternalStorageDirectory() + "/mypackage"; // preferred approach	}}    </example>  </rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Basic" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The Basic ruleset contains a collection of good practices which should be followed.  </description>	<rule name="JumbledIncrementer" language="java" since="1.0" message="Avoid modifying an outer loop incrementer in an inner loop for update expression" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#JumbledIncrementer">     <description>Avoid jumbled loop incrementers - its usually a mistake, and is confusing even if intentional.     </description>     <priority>3</priority>     <properties>         <property name="xpath">             <value> //ForStatement [  ForUpdate/StatementExpressionList/StatementExpression/PostfixExpression/PrimaryExpression/PrimaryPrefix/Name/@Image  =  ancestor::ForStatement/ForInit//VariableDeclaratorId/@Image ]              </value>         </property>     </properties>     <example> public class JumbledIncrementerRule1 {	public void foo() {		for (int i = 0; i &lt; 10; i++) {			// only references 'i'			for (int k = 0; k &lt; 20; i++) {		// references both 'i' and 'k'				System.out.println("Hello");			}		}	}}      </example>     </rule>    <rule name="ForLoopShouldBeWhileLoop" language="java" since="1.02" message="This for loop could be simplified to a while loop" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#ForLoopShouldBeWhileLoop">      <description>Some for loops can be simplified to while loops, this makes them more concise.      </description>      <priority>3</priority>    <properties>        <property name="xpath">            <value>                //ForStatement [count(*) &gt; 1] [not(LocalVariableDeclaration)] [not(ForInit)] [not(ForUpdate)] [not(Type and Expression and Statement)]             </value>        </property>    </properties>      <example>  public class Foo {	void bar() {		for (;true;) true; // No Init or Update part, may as well be: while (true)	}}       </example>    </rule>    <rule name="OverrideBothEqualsAndHashcode" language="java" since="0.4" message="Ensure you override both equals() and hashCode()" class="net.sourceforge.pmd.lang.java.rule.basic.OverrideBothEqualsAndHashcodeRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#OverrideBothEqualsAndHashcode">      <description>Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.      </description>      <priority>3</priority>      <example>  public class Bar {		// poor, missing a hashcode() method	public boolean equals(Object o) {      // do some comparison	}}public class Baz {		// poor, missing an equals() method	public int hashCode() {      // return some hash value	}}public class Foo {		// perfect, both methods provided	public boolean equals(Object other) {      // do some comparison	}	public int hashCode() {      // return some hash value	}}       </example>    </rule>    <rule name="DoubleCheckedLocking" language="java" since="1.04" message="Double checked locking is not thread safe in Java." class="net.sourceforge.pmd.lang.java.rule.basic.DoubleCheckedLockingRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#DoubleCheckedLocking">      <description>Partially created objects can be returned by the Double Checked Locking pattern when used in Java.An optimizing JRE may assign a reference to the baz variable before it creates the object thereference is intended to point to.For more details refer to: http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.htmlor http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html      </description>        <priority>1</priority>      <example>  public class Foo {	Object baz;	Object bar() {		if (baz == null) { // baz may be non-null yet not fully created			synchronized(this) {				if (baz == null) {					baz = new Object();        		}      		}    	}		return baz;	}}       </example>    </rule>    <rule name="ReturnFromFinallyBlock" language="java" since="1.05" message="Avoid returning from a finally block" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#ReturnFromFinallyBlock">      <description>Avoid returning from a finally block, this can discard exceptions.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>//FinallyStatement//ReturnStatement              </value>          </property>      </properties>      <example>  public class Bar {	public String foo() {		try {			throw new Exception( "My Exception" );		} catch (Exception e) {			throw e;		} finally {			return "A. O. K."; // return not recommended here		}	}}      </example>    </rule>    <rule name="UnconditionalIfStatement" language="java" since="1.5" message="Do not use 'if' statements that are always true or always false" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#UnconditionalIfStatement">      <description>Do not use "if" statements whose conditionals are always true or always false.      </description>      <priority>3</priority>        <properties>            <property name="xpath">                <value> //IfStatement/Expression [count(PrimaryExpression)=1] /PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral                </value>            </property>        </properties>      <example>  public class Foo {	public void close() {		if (true) {		// fixed conditional, not recommended			// ...		}	}}      </example>    </rule>    <rule name="BooleanInstantiation" since="1.2" message="Avoid instantiating Boolean objects; reference Boolean.TRUE or Boolean.FALSE or call Boolean.valueOf() instead." class="net.sourceforge.pmd.lang.java.rule.basic.BooleanInstantiationRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#BooleanInstantiation">   <description>Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead.   </description>      <priority>2</priority>   <example>   Boolean bar = new Boolean("true");		// unnecessary creation, just reference Boolean.TRUE;Boolean buz = Boolean.valueOf(false);	// ...., just reference Boolean.FALSE;      </example>   </rule>    <rule name="CollapsibleIfStatements" language="java" since="3.1" message="These nested if statements could be combined" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#CollapsibleIfStatements">      <description>Sometimes two consecutive 'if' statements can be consolidated by separating their conditions with a boolean short-circuit operator.      </description>      <priority>3</priority>      <properties>        <property name="xpath">            <value>                //IfStatement[@Else='false']/Statement /IfStatement[@Else='false'] |//IfStatement[@Else='false']/Statement /Block[count(BlockStatement)=1]/BlockStatement  /Statement/IfStatement[@Else='false']            </value>        </property>      </properties>      <example>  void bar() {	if (x) {			// original implementation		if (y) {			// do stuff		}	}}void bar() {	if (x &amp;&amp; y) {		// optimized implementation		// do stuff	}}       </example>    </rule>	<rule name="ClassCastExceptionWithToArray" language="java" since="3.4" message="This usage of the Collection.toArray() method will throw a ClassCastException." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#ClassCastExceptionWithToArray">  <description>When deriving an array of a specific class from your Collection, one should provide an array ofthe same class as the parameter of the toArray() method. Doing otherwise you will will resultin a ClassCastException.  </description>  <priority>3</priority>  <properties>    <property name="xpath">    <value>//CastExpression[Type/ReferenceType/ClassOrInterfaceType[@Image !="Object"]]/PrimaryExpression[ PrimaryPrefix/Name[ends-with(@Image, '.toArray')] and PrimarySuffix/Arguments[count(*) = 0]andcount(PrimarySuffix) = 1]    </value>    </property>  </properties>  <example>Collection c = new ArrayList();Integer obj = new Integer(1);c.add(obj);    // this would trigger the rule (and throw a ClassCastException if executed)Integer[] a = (Integer [])c.toArray();   // this is fine and will not trigger the ruleInteger[] b = (Integer [])c.toArray(new Integer[c.size()]);  </example></rule><rule name="AvoidDecimalLiteralsInBigDecimalConstructor" language="java" since="3.4" message="Avoid creating BigDecimal with a decimal (float/double) literal. Use a String literal" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#AvoidDecimalLiteralsInBigDecimalConstructor">  <description>One might assume that the result of "new BigDecimal(0.1)" is exactly equal to 0.1, but it is actuallyequal to .1000000000000000055511151231257827021181583404541015625.This is because 0.1 cannot be represented exactly as a double (or as a binary fraction of any finitelength). Thus, the long value that is being passed in to the constructor is not exactly equal to 0.1,appearances notwithstanding.The (String) constructor, on the other hand, is perfectly predictable: 'new BigDecimal("0.1")' isexactly equal to 0.1, as one would expect.  Therefore, it is generally recommended that the(String) constructor be used in preference to this one.  </description>  <priority>3</priority>  <properties>    <property name="xpath">    <value>//AllocationExpression[ClassOrInterfaceType[@Image="BigDecimal"]][Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix    [        Literal[(not(ends-with(@Image,'"'))) and contains(@Image,".")]        or        Name[ancestor::Block/BlockStatement/LocalVariableDeclaration                [Type[PrimitiveType[@Image='double' or @Image='float']                      or ReferenceType/ClassOrInterfaceType[@Image='Double' or @Image='Float']]]                /VariableDeclarator/VariableDeclaratorId/@Image = @Image            ]        or        Name[ancestor::MethodDeclaration/MethodDeclarator/FormalParameters/FormalParameter                [Type[PrimitiveType[@Image='double' or @Image='float']                      or ReferenceType/ClassOrInterfaceType[@Image='Double' or @Image='Float']]]                /VariableDeclaratorId/@Image = @Image            ]    ]]     </value>    </property>  </properties>  <example>BigDecimal bd = new BigDecimal(1.123);		// loss of precision, this would trigger the ruleBigDecimal bd = new BigDecimal("1.123");   	// preferred approachBigDecimal bd = new BigDecimal(12);     	// preferred approach, ok for integer values  </example></rule>    <rule name="MisplacedNullCheck" language="java" since="3.5" message="The null check here is misplaced; if the variable is null there will be a NullPointerException" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#MisplacedNullCheck">      <description>The null check here is misplaced. If the variable is null a NullPointerException will be thrown.Either the check is useless (the variable will never be "null") or it is incorrect.      </description>      <priority>3</priority>      <properties>        <property name="xpath">        <value>    //Expression    /*[self::ConditionalOrExpression or self::ConditionalAndExpression]    /descendant::PrimaryExpression/PrimaryPrefix    /Name[starts-with(@Image,        concat(ancestor::PrimaryExpression/following-sibling::EqualityExpression            [./PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]            /PrimaryExpression/PrimaryPrefix            /Name[count(../../PrimarySuffix)=0]/@Image,".")        )     ]     [count(ancestor::ConditionalAndExpression/EqualityExpression            [@Image='!=']            [./PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]            [starts-with(following-sibling::*/PrimaryExpression/PrimaryPrefix/Name/@Image,                concat(./PrimaryExpression/PrimaryPrefix/Name/@Image, '.'))]      ) = 0     ]            </value>        </property>      </properties>      <example>    public class Foo {	void bar() {		if (a.equals(baz) &amp;&amp; a != null) {}		}}          </example>      <example>public class Foo {	void bar() {		if (a.equals(baz) || a == null) {}	}}   </example>    </rule>    <rule name="AvoidThreadGroup" language="java" since="3.6" message="Avoid using java.lang.ThreadGroup; it is not thread safe" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#AvoidThreadGroup" typeResolution="true">      <description>Avoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environmentit contains methods that are not thread-safe.      </description>      <priority>3</priority>      <properties>        <property name="xpath">        <value>//AllocationExpression/ClassOrInterfaceType[pmd-java:typeof(@Image, 'java.lang.ThreadGroup')]|//PrimarySuffix[contains(@Image, 'getThreadGroup')]        </value>        </property>      </properties>      <example>    public class Bar {	void buz() {		ThreadGroup tg = new ThreadGroup("My threadgroup") ;		tg = new ThreadGroup(tg, "my thread group");		tg = Thread.currentThread().getThreadGroup();		tg = System.getSecurityManager().getThreadGroup();	}}          </example>    </rule>    <rule name="BrokenNullCheck" since="3.8" message="Method call on object which may be null" class="net.sourceforge.pmd.lang.java.rule.basic.BrokenNullCheckRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#BrokenNullCheck">        <description>The null check is broken since it will throw a NullPointerException itself.It is likely that you used || instead of &amp;&amp; or vice versa.     </description>        <priority>2</priority>        <example>public String bar(String string) {  // should be &amp;&amp;	if (string!=null || !string.equals(""))		return string;  // should be ||	if (string==null &amp;&amp; string.equals(""))		return string;}                </example>    </rule>    <rule name="BigIntegerInstantiation" since="3.9" message="Don't create instances of already existing BigInteger and BigDecimal (ZERO, ONE, TEN)" class="net.sourceforge.pmd.lang.java.rule.basic.BigIntegerInstantiationRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#BigIntegerInstantiation">  <description>Don't create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) andfor Java 1.5 onwards, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)  </description>  <priority>3</priority>  <example>BigInteger bi = new BigInteger(1);		// reference BigInteger.ONE insteadBigInteger bi2 = new BigInteger("0");	// reference BigInteger.ZERO insteadBigInteger bi3 = new BigInteger(0.0);	// reference BigInteger.ZERO insteadBigInteger bi4;bi4 = new BigInteger(0);				// reference BigInteger.ZERO instead  </example></rule>    <rule name="AvoidUsingOctalValues" since="3.9" message="Do not start a literal by 0 unless it's an octal value" class="net.sourceforge.pmd.lang.java.rule.basic.AvoidUsingOctalValuesRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#AvoidUsingOctalValues">    <description>    	Integer literals should not start with zero since this denotes that the rest of literal will beinterpreted as an octal value.    	    </description>    <priority>3</priority>    <example>		    int i = 012;	// set i with 10 not 12int j = 010;	// set j with 8 not 10k = i * j;		// set k with 80 not 120		        </example>    </rule>    <rule name="AvoidUsingHardCodedIP" since="4.1" message="Do not hard code the IP address ${variableName}" class="net.sourceforge.pmd.lang.java.rule.basic.AvoidUsingHardCodedIPRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#AvoidUsingHardCodedIP">	    <description>	    	Application with hard-coded IP addresses can become impossible to deploy in some cases.Externalizing IP adresses is preferable.	    		    </description>	    <priority>3</priority>	     <properties>            <property name="pattern" type="String" description="Regular Expression" value="^&quot;[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}&quot;$"/>        </properties>	    <example>	    public class Foo {	private String ip = "127.0.0.1"; 	// not recommended}	    	    </example>    </rule>  <rule name="CheckResultSet" language="java" since="4.1" class="net.sourceforge.pmd.lang.java.rule.basic.CheckResultSetRule" message="Always check the return of one of the navigation method (next,previous,first,last) of a ResultSet." externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#CheckResultSet">        <description>            Always check the return values of navigation methods (next, previous, first, last) of a ResultSet.If the value return is 'false', it should be handled properly.                    </description>        <priority>3</priority>        <example>            Statement stat = conn.createStatement();ResultSet rst = stat.executeQuery("SELECT name FROM person");rst.next(); 	// what if it returns false? bad formString firstName = rst.getString(1);Statement stat = conn.createStatement();ResultSet rst = stat.executeQuery("SELECT name FROM person");if (rst.next()) {	// result is properly examined and used    String firstName = rst.getString(1);	} else  {		// handle missing data}                    </example>    </rule>	<rule name="AvoidMultipleUnaryOperators" since="4.2" class="net.sourceforge.pmd.lang.java.rule.basic.AvoidMultipleUnaryOperatorsRule" message="Using multiple unary operators may be a bug, and/or is confusing." externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#AvoidMultipleUnaryOperators">        <description>            The use of multiple unary operators may be problematic, and/or confusing.Ensure that the intended usage is not a bug, or consider simplifying the expression.                    </description>        <priority>2</priority>        <example>            // These are typo bugs, or at best needlessly complex and confusing:int i = - -1;int j = + - +1;int z = ~~2;boolean b = !!true;boolean c = !!!true;// These are better:int i = 1;int j = -1;int z = 2;boolean b = true;boolean c = false;// And these just make your brain hurt:int i = ~-2;int j = -~7;                    </example>    </rule>  <rule name="ExtendsObject" language="java" since="5.0" message="No need to explicitly extend Object." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#ExtendsObject">    <description>No need to explicitly extend Object.</description>    <priority>4</priority>    <properties>       <property name="xpath">          <value>          //ExtendsList/ClassOrInterfaceType[@Image='Object' or @Image='java.lang.Object']                    </value>       </property>    </properties>    <example>    public class Foo extends Object { 	// not required}        </example>  </rule>	<rule name="CheckSkipResult" language="java" since="5.0" message="Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped." class="net.sourceforge.pmd.lang.java.rule.basic.CheckSkipResultRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#CheckSkipResult">        <description>The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.</description>        <priority>3</priority>        <example>        public class Foo {   private FileInputStream _s = new FileInputStream("file");   public void skip(int n) throws IOException {      _s.skip(n); // You are not sure that exactly n bytes are skipped   }   public void skipExactly(int n) throws IOException {      while (n != 0) {         long skipped = _s.skip(n);         if (skipped == 0)            throw new EOFException();         n -= skipped;      }   }                </example>    </rule>	<rule name="AvoidBranchingStatementAsLastInLoop" since="5.0" class="net.sourceforge.pmd.lang.java.rule.basic.AvoidBranchingStatementAsLastInLoopRule" message="Avoid using a branching statement as the last in a loop." externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#AvoidBranchingStatementAsLastInLoop">        <description>            Using a branching statement as the last part of a loop may be a bug, and/or is confusing.Ensure that the usage is not a bug, or consider using another approach.                    </description>        <priority>2</priority>        <example>              // unusual use of branching statement in a loopfor (int i = 0; i &lt; 10; i++) {	if (i*i &lt;= 25) {		continue;	}	break;}  // this makes more sense...for (int i = 0; i &lt; 10; i++) {	if (i*i &gt; 25) {		break;	}}                    </example>    </rule>    <rule name="DontCallThreadRun" language="java" since="4.3" message="Don't call Thread.run() explicitly, use Thread.start()" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#DontCallThreadRun">      <description>Explicitly calling Thread.run() method will execute in the caller's thread of control.  Instead, call Thread.start() for the intended behavior.      </description>      <priority>4</priority>      <properties>        <property name="xpath">          <value>//StatementExpression/PrimaryExpression[    PrimaryPrefix    [        ./Name[ends-with(@Image, '.run') or @Image = 'run']        and substring-before(Name/@Image, '.') =//VariableDeclarator/VariableDeclaratorId/@Image        [../../../Type/ReferenceType[ClassOrInterfaceType/@Image = 'Thread']]        or (        ./AllocationExpression/ClassOrInterfaceType[@Image = 'Thread']        and ../PrimarySuffix[@Image = 'run'])    ]]         </value>        </property>      </properties>      <example>Thread t = new Thread();t.run();            // use t.start() insteadnew Thread().run(); // same violation      </example>    </rule>  <rule name="DontUseFloatTypeForLoopIndices" language="java" since="4.3" message="Don't use floating point for loop indices. If you must use floating point, use double." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/basic.html#DontUseFloatTypeForLoopIndices">    <description>Don't use floating point for loop indices. If you must use floating point, use doubleunless you're certain that float provides enough precision and you have a compellingperformance need (space or time).    </description>    <priority>3</priority>    <properties>      <property name="xpath">        <value>//ForStatement/ForInit/LocalVariableDeclaration/Type/PrimitiveType[@Image="float"]       </value>      </property>    </properties>    <example>public class Count {  public static void main(String[] args) {    final int START = 2000000000;    int count = 0;    for (float f = START; f &lt; START + 50; f++)      count++;      //Prints 0 because (float) START == (float) (START + 50).      System.out.println(count);      //The termination test misbehaves due to floating point granularity.    }}    </example>  </rule>    <rule deprecated="true" ref="rulesets/java/empty.xml/EmptyCatchBlock"/>    <rule deprecated="true" ref="rulesets/java/empty.xml/EmptyIfStmt"/>    <rule deprecated="true" ref="rulesets/java/empty.xml/EmptyWhileStmt"/>    <rule deprecated="true" ref="rulesets/java/empty.xml/EmptyTryBlock"/>    <rule deprecated="true" ref="rulesets/java/empty.xml/EmptyFinallyBlock"/>    <rule deprecated="true" ref="rulesets/java/empty.xml/EmptySwitchStatements"/>    <rule deprecated="true" ref="rulesets/java/empty.xml/EmptySynchronizedBlock"/>    <rule deprecated="true" ref="rulesets/java/empty.xml/EmptyStatementNotInLoop"/>    <rule deprecated="true" ref="rulesets/java/empty.xml/EmptyInitializer"/>    <rule deprecated="true" ref="rulesets/java/empty.xml/EmptyStatementBlock"/>    <rule deprecated="true" ref="rulesets/java/empty.xml/EmptyStaticInitializer"/>    <rule deprecated="true" ref="rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary"/>    <rule deprecated="true" ref="rulesets/java/unnecessary.xml/UnnecessaryReturn"/>    <rule deprecated="true" ref="rulesets/java/unnecessary.xml/UnnecessaryFinalModifier"/>    <rule deprecated="true" ref="rulesets/java/unnecessary.xml/UselessOverridingMethod"/>    <rule deprecated="true" ref="rulesets/java/unnecessary.xml/UselessOperationOnImmutable"/>    <rule deprecated="true" ref="rulesets/java/unnecessary.xml/UnusedNullCheckInEquals"/>    <rule deprecated="true" ref="rulesets/java/unnecessary.xml/UselessParentheses"/></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Braces" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The Braces ruleset contains rules regarding the use and placement of braces.  </description>   <rule name="IfStmtsMustUseBraces" language="java" since="1.0" message="Avoid using if statements without curly braces" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/braces.html#IfStmtsMustUseBraces">     <description>Avoid using if statements without using braces to surround the code block. If the code formatting or indentation is lost then it becomes difficult to separate the code beingcontrolled from the rest.     </description>     <priority>3</priority>       <properties>           <property name="xpath">               <value>                   //IfStatement[count(*) &lt; 3][not(Statement/Block)]                                  </value>           </property>       </properties>     <example> if (foo)	// not recommended	x++;if (foo) {	// preferred approach	x++;}      </example>     </rule>    <rule name="WhileLoopsMustUseBraces" language="java" since="0.7" message="Avoid using 'while' statements without curly braces" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/braces.html#WhileLoopsMustUseBraces">      <description>Avoid using 'while' statements without using braces to surround the code block. If the code formatting or indentation is lost then it becomes difficult to separate the code beingcontrolled from the rest.      </description>      <priority>3</priority>        <properties>            <property name="xpath">                <value>//WhileStatement[not(Statement/Block)]                </value>            </property>        </properties>      <example>while (true)	// not recommended      x++;      while (true) {	// preferred approach      x++;}      </example>    </rule>      <rule name="IfElseStmtsMustUseBraces" language="java" since="0.2" message="Avoid using 'if...else' statements without curly braces" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/braces.html#IfElseStmtsMustUseBraces">       <description>Avoid using if..else statements without using surrounding braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.       </description>       <priority>3</priority>         <properties>             <property name="xpath">                 <value>//Statement [parent::IfStatement[@Else='true']] [not(child::Block)] [not(child::IfStatement)]                  </value>             </property>         </properties>       <example>   // this is OKif (foo) x++;      // but this is notif (foo)       x = x+1;   else       x = x-1;       </example>     </rule>     <rule name="ForLoopsMustUseBraces" language="java" since="0.7" message="Avoid using 'for' statements without curly braces" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/braces.html#ForLoopsMustUseBraces">       <description>Avoid using 'for' statements without using curly braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.       </description>       <priority>3</priority>         <properties>             <property name="xpath">                 <value> //ForStatement[not(Statement/Block)]                  </value>             </property>         </properties>       <example>for (int i = 0; i &lt; 42; i++)   foo();       </example>     </rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Clone Implementation" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The Clone Implementation ruleset contains a collection of rules that find questionable usages of the clone() method.  </description>    <rule name="ProperCloneImplementation" language="java" since="1.4" message="Object clone() should be implemented with super.clone()" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/clone.html#ProperCloneImplementation">     <description>Object clone() should be implemented with super.clone().     </description>     <priority>2</priority>     <properties>         <property name="xpath">             <value>                 //MethodDeclarator[@Image = 'clone'][count(FormalParameters/*) = 0][count(../Block//*[    (self::AllocationExpression) and    (./ClassOrInterfaceType/@Image = ancestor::ClassOrInterfaceDeclaration[1]/@Image)  ])&gt; 0]                             </value>         </property>     </properties>     <example> class Foo{    public Object clone(){        return new Foo(); // This is bad    }}     </example>     </rule>    <rule name="CloneThrowsCloneNotSupportedException" language="java" since="1.9" message="clone() method should throw CloneNotSupportedException" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/clone.html#CloneThrowsCloneNotSupportedException">         <description>The method clone() should throw a CloneNotSupportedException.         </description>         <priority>3</priority>         <properties>             <property name="xpath">                 <value>                     //MethodDeclaration[MethodDeclarator/@Image = 'clone'and count(MethodDeclarator/FormalParameters/*) = 0and count(NameList/Name[contains(@Image,'CloneNotSupportedException')]) = 0][../../../../ClassOrInterfaceDeclaration[@Final = 'false']]                                      </value>             </property>         </properties>         <example>              public class MyClass implements Cloneable{     public Object clone() { // will cause an error          MyClass clone = (MyClass)super.clone();          return clone;     } }             </example>     </rule>    <rule name="CloneMethodMustImplementCloneable" language="java" since="1.9" message="clone() method should be implemented only if implementing Cloneable interface" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/clone.html#CloneMethodMustImplementCloneable">        <description>The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException.        </description>        <priority>3</priority>        <properties>            <property name="xpath">                <value>                    //ClassOrInterfaceDeclaration[not(./ImplementsList/ClassOrInterfaceType[@Image='Cloneable'])]/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration[MethodDeclaration[MethodDeclarator[@Image= 'clone' and count(FormalParameters/*) = 0]][not((../MethodDeclaration[@Final = 'true'] or ancestor::ClassOrInterfaceDeclaration[1][@Final = 'true'])and Block[count(BlockStatement)=1]/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/ClassOrInterfaceType[@Image = 'CloneNotSupportedException'])]]                                    </value>            </property>        </properties>        <example>            public class MyClass { public Object clone() throws CloneNotSupportedException {  return foo; }}           </example>    </rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Code Size" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The Code Size ruleset contains rules that find problems related to code size or complexity.  </description><rule name="NPathComplexity" since="3.9" message="The method {0}() has an NPath complexity of {1}" class="net.sourceforge.pmd.lang.java.rule.codesize.NPathComplexityRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#NPathComplexity">   <description>The NPath complexity of a method is the number of acyclic execution paths through that method.A threshold of 200 is generally considered the point where measures should be taken to reduce complexity and increase readability.   </description>     <priority>3</priority>    <example> void bar() {	// this is something more complex than it needs to be,	if (y) {	// it should be broken down into smaller methods or functions		for (j = 0; j &lt; m; j++) {			if (j &gt; r) {				doSomething();				while (f &lt; 5 ) {					anotherThing();					f -= 27;					}				} else {					tryThis();				}			}		}		if ( r - n &gt; 45) {		   while (doMagic()) {		      findRabbits();		   }		}		try {			doSomethingDangerous();		} catch (Exception ex) {			makeAmends();			} finally {				dontDoItAgain();				}	}}     </example></rule> <rule name="ExcessiveMethodLength" since="0.6" message="Avoid really long methods." class="net.sourceforge.pmd.lang.java.rule.codesize.ExcessiveMethodLengthRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#ExcessiveMethodLength">   <description>When methods are excessively long this usually indicates that the method is doing more than itsname/signature might suggest. They also become challenging for others to digest since excessive scrolling causes readers to lose focus.Try to reduce the method length by creating helper methods and removing any copy/pasted code.   </description>     <priority>3</priority>   <example>public void doSomething() {	System.out.println("Hello world!");	System.out.println("Hello world!");		// 98 copies omitted for brevity.}   </example> </rule> <rule name="ExcessiveParameterList" since="0.9" message="Avoid long parameter lists." class="net.sourceforge.pmd.lang.java.rule.codesize.ExcessiveParameterListRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#ExcessiveParameterList">   <description>Methods with numerous parameters are a challenge to maintain, especially if most of them share thesame datatype. These situations usually denote the need for new objects to wrap the numerous parameters.   </description>     <priority>3</priority>   <example>public void addPerson(		// too many arguments liable to be mixed up	int birthYear, int birthMonth, int birthDate, int height, int weight, int ssn) {	. . . .} public void addPerson(		// preferred approach	Date birthdate, BodyMeasurements measurements, int ssn) {	. . . .}   </example> </rule> <rule name="ExcessiveClassLength" since="0.6" message="Avoid really long classes." class="net.sourceforge.pmd.lang.java.rule.codesize.ExcessiveClassLengthRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#ExcessiveClassLength">   <description>Excessive class file lengths are usually indications that the class may be burdened with excessive responsibilities that could be provided by external classes or functions. In breaking these methodsapart the code becomes more managable and ripe for reuse.   </description>     <priority>3</priority>   <example>public class Foo {	public void bar1() {    // 1000 lines of code	}	public void bar2() {    // 1000 lines of code	}    public void bar3() {    // 1000 lines of code	}		    public void barN() {    // 1000 lines of code	}}   </example> </rule>    <rule name="CyclomaticComplexity" since="1.03" message="The {0} ''{1}'' has a Cyclomatic Complexity of {2}." class="net.sourceforge.pmd.lang.java.rule.codesize.CyclomaticComplexityRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#CyclomaticComplexity">   <description>   		Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry.  The decision points include 'if', 'while', 'for', and 'case labels' calls.  Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denotehigh complexity, and 11+ is very high complexity.		   </description>   <priority>3</priority>   <example>public class Foo {		// This has a Cyclomatic Complexity = 121   public void example()  {2       if (a == b)  {3           if (a1 == b1) {                fiddle();4           } else if a2 == b2) {                fiddle();            }  else {                fiddle();            }5       } else if (c == d) {6           while (c == d) {                fiddle();            }7        } else if (e == f) {8           for (int n = 0; n &lt; h; n++) {                fiddle();            }        } else{            switch (z) {9               case 1:                    fiddle();                    break;10              case 2:                    fiddle();                    break;11              case 3:                    fiddle();                    break;12              default:                    fiddle();                    break;            }        }    }}   </example></rule>    <rule name="StdCyclomaticComplexity" since="5.1.2" message="The {0} ''{1}'' has a Standard Cyclomatic Complexity of {2}." class="net.sourceforge.pmd.lang.java.rule.codesize.StdCyclomaticComplexityRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#StdCyclomaticComplexity">   <description>      Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry.  The decision points include 'if', 'while', 'for', and 'case labels' calls.  Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denotehigh complexity, and 11+ is very high complexity.       </description>   <priority>3</priority>   <example>public class Foo {    // This has a Cyclomatic Complexity = 121   public void example()  {2       if (a == b || (c == d &amp;&amp; e == f))  { // Only one3           if (a1 == b1) {                fiddle();4           } else if a2 == b2) {                fiddle();            }  else {                fiddle();            }5       } else if (c == d) {6           while (c == d) {                fiddle();            }7        } else if (e == f) {8           for (int n = 0; n &lt; h; n++) {                fiddle();            }        } else{            switch (z) {9               case 1:                    fiddle();                    break;10              case 2:                    fiddle();                    break;11              case 3:                    fiddle();                    break;12              default:                    fiddle();                    break;            }        }    }}   </example></rule>    <rule name="ModifiedCyclomaticComplexity" since="5.1.2" message="The {0} ''{1}'' has a Modified Cyclomatic Complexity of {2}." class="net.sourceforge.pmd.lang.java.rule.codesize.ModifiedCyclomaticComplexityRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#ModifiedCyclomaticComplexity">   <description>      Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry.  The decision points include 'if', 'while', 'for', and 'case labels' calls.  Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denotehigh complexity, and 11+ is very high complexity. Modified complexity treats switch statements as a singledecision point.       </description>   <priority>3</priority>   <example>public class Foo {    // This has a Cyclomatic Complexity = 91   public void example()  {2       if (a == b)  {3           if (a1 == b1) {                fiddle();4           } else if a2 == b2) {                fiddle();            }  else {                fiddle();            }5       } else if (c == d) {6           while (c == d) {                fiddle();            }7        } else if (e == f) {8           for (int n = 0; n &lt; h; n++) {                fiddle();            }        } else{9           switch (z) {                case 1:                    fiddle();                    break;                case 2:                    fiddle();                    break;                case 3:                    fiddle();                    break;                default:                    fiddle();                    break;            }        }    }}   </example></rule>    <rule name="ExcessivePublicCount" since="1.04" message="This class has a bunch of public methods and attributes" class="net.sourceforge.pmd.lang.java.rule.codesize.ExcessivePublicCountRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#ExcessivePublicCount">    <description>Classes with large numbers of public methods and attributes require disproportionate testing effortssince combinational side effects grow rapidly and increase risk. Refactoring these classes intosmaller ones not only increases testability and reliability but also allows new variations to bedeveloped easily.    </description>    <priority>3</priority>    <example>    public class Foo {	public String value;	public Bar something;	public Variable var; // [... more more public attributes ...] 	public void doWork() {}	public void doMoreWork() {}	public void doWorkAgain() {} // [... more more public methods ...]}        </example>    </rule>    <rule name="TooManyFields" since="3.0" message="Too many fields" class="net.sourceforge.pmd.lang.java.rule.codesize.TooManyFieldsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#TooManyFields">      <description>Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields,possibly through grouping related fields in new objects.  For example, a class with individual city/state/zip fields could park them within a single Address field.      </description>        <priority>3</priority>      <example>   public class Person {	// too many separate fields   int birthYear;   int birthMonth;   int birthDate;   float height;   float weight;}public class Person {	// this is more manageable   Date birthDate;   BodyMeasurements measurements;}         </example>    </rule><rule name="NcssMethodCount" message="The method {0}() has an NCSS line count of {1}" since="3.9" class="net.sourceforge.pmd.lang.java.rule.codesize.NcssMethodCountRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#NcssMethodCount">    <description>This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of linesof code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm,lines of code that are split are counted as one.    </description>    <priority>3</priority>   <example>public class Foo extends Bar { public int methd() {     super.methd(); //this method only has 1 NCSS lines      return 1; }}   </example>   </rule><rule name="NcssTypeCount" message="The type has an NCSS line count of {0}" since="3.9" class="net.sourceforge.pmd.lang.java.rule.codesize.NcssTypeCountRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#NcssTypeCount">    <description>This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of linesof code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm,lines of code that are split are counted as one.    </description>    <priority>3</priority>   <example>public class Foo extends Bar { public Foo() { //this class only has 6 NCSS lines     super();      super.foo(); }}   </example></rule><rule name="NcssConstructorCount" message="The constructor with {0} parameters has an NCSS line count of {1}" since="3.9" class="net.sourceforge.pmd.lang.java.rule.codesize.NcssConstructorCountRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#NcssConstructorCount">    <description>This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of linesof code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm,lines of code that are split are counted as one.    </description>    <priority>3</priority>   <example>public class Foo extends Bar { public Foo() {     super(); //this constructor only has 1 NCSS lines      super.foo(); }}   </example></rule>    <rule name="TooManyMethods" language="java" since="4.2" class="net.sourceforge.pmd.lang.rule.XPathRule" message="This class has too many methods, consider refactoring it." externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#TooManyMethods">        <description>            A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way tohave more fine grained objects.                    </description>        <priority>3</priority>        <properties>                <property name="maxmethods" type="Integer" description="The method count reporting threshold" min="1" max="1000" value="10"/>                <property name="xpath">                <value>                    <!--  FIXME: Refine XPath to discard 'get' and 'set' methods with Block no more than 3 lines,                                something like this:                                    not (                                            (                                                starts-with(@Image,'get')                                                or                                                starts-with(@Image,'set')                                                or                                                starts-with(@Image,'is')                                            )                                            and (                                                    (                                                        (../Block/attribute::endLine)                                                         -                                                        (../Block/attribute::beginLine)                                                    ) <= 3                                            )                                        )                                This will avoid discarding 'real' method...                     -->                     //ClassOrInterfaceDeclaration/ClassOrInterfaceBody     [      count(descendant::MethodDeclarator[         not (                starts-with(@Image,'get')                or                starts-with(@Image,'set')                or                starts-with(@Image,'is')            )      ]) &gt; $maxmethods   ]                                    </value>            </property>        </properties>    </rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Comments" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>Rules intended to catch errors related to code comments  </description>   <rule name="CommentRequired" since="5.1" message="Comment is required" class="net.sourceforge.pmd.lang.java.rule.comments.CommentRequiredRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/comments.html#CommentRequired">    <description>Denotes whether comments are required (or unwanted) for specific language elements.    </description>    <priority>3</priority>    <example>/*** ** @author George Bush*/    </example>  </rule>      <rule name="CommentSize" since="5.0" message="Comment is too large" class="net.sourceforge.pmd.lang.java.rule.comments.CommentSizeRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/comments.html#CommentSize">    <description>Determines whether the dimensions of non-header comments found are within the specified limits.    </description>    <priority>3</priority>    <example>/****	too many lines!*************/    </example>  </rule>  <rule name="CommentContent" since="5.0" message="Invalid words or phrases found" class="net.sourceforge.pmd.lang.java.rule.comments.CommentContentRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/comments.html#CommentContent">     <description>A rule for the politically correct... we don't want to offend anyone.  </description>  <priority>3</priority>  <example>      //	OMG, this is horrible, Bob is an idiot !!!        </example>   </rule> </ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Controversial" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The Controversial ruleset contains rules that, for whatever reason, are considered controversial.They are held here to allow people to include them as they see fit within their custom rulesets.  </description>    <rule name="UnnecessaryConstructor" language="java" since="1.0" message="Avoid unnecessary constructors - the compiler will generate these for you" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#UnnecessaryConstructor">      <description>This rule detects when a constructor is not necessary; i.e., when there is only one constructor,its public, has an empty body, and takes no arguments.      </description>      <priority>3</priority>        <properties>            <property name="xpath">                <value>                    //ClassOrInterfaceBody[count(ClassOrInterfaceBodyDeclaration/ConstructorDeclaration)=1]/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration[@Public='true'][not(FormalParameters/*)][not(BlockStatement)][not(NameList)][count(ExplicitConstructorInvocation/Arguments/ArgumentList/Expression)=0]                                    </value>            </property>        </properties>      <example>  public class Foo {  public Foo() {}}        </example>    </rule>    <rule name="NullAssignment" since="1.02" message="Assigning an Object to null is a code smell.  Consider refactoring." class="net.sourceforge.pmd.lang.java.rule.controversial.NullAssignmentRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#NullAssignment">      <description>Assigning a "null" to a variable (outside of its declaration) is usually bad form.  Sometimes, this typeof assignment is an indication that the programmer doesn't completely understand what is going on in the code.NOTE: This sort of assignment may used in some cases to dereference objects and encourage garbage collection.      </description>        <priority>3</priority>      <example> public void bar() {  Object x = null; // this is OK  x = new Object();     // big, complex piece of code here  x = null; // this is not required     // big, complex piece of code here}       </example>    </rule>    <rule name="OnlyOneReturn" since="1.0" message="A method should have only one exit point, and that should be the last statement in the method" class="net.sourceforge.pmd.lang.java.rule.controversial.OnlyOneReturnRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#OnlyOneReturn">     <description>A method should have only one exit point, and that should be the last statement in the method.     </description>        <priority>3</priority>     <example> public class OneReturnOnly1 {  public void foo(int x) {    if (x &gt; 0) {      return "hey";   // first exit    }    return "hi";	// second exit  }}      </example>     </rule>    <rule name="AssignmentInOperand" since="1.03" message="Avoid assignments in operands" class="net.sourceforge.pmd.lang.java.rule.controversial.AssignmentInOperandRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#AssignmentInOperand">  <description>Avoid assignments in operands; this can make code more complicated and harder to read.  </description>    <priority>3</priority>  <example>  public void bar() {    int x = 2;    if ((x = getX()) == 3) {      System.out.println("3!");    }}    </example></rule>    <rule name="AtLeastOneConstructor" language="java" since="1.04" message="Each class should declare at least one constructor" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#AtLeastOneConstructor">  <description>Each class should declare at least one constructor.  </description>  <priority>3</priority>  <properties>      <property name="xpath">          <value>              //ClassOrInterfaceDeclaration[  not(ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration)  and  (@Static = 'false')  and  (count(./descendant::MethodDeclaration[@Static = 'true']) &lt; 1)]  [@Interface='false']          </value>      </property>  </properties>  <example>  public class Foo {   // missing constructor  public void doSomething() { ... }  public void doOtherThing { ... }}    </example></rule>    <rule name="DontImportSun" since="1.5" message="Avoid importing anything from the 'sun.*' packages" class="net.sourceforge.pmd.lang.java.rule.controversial.DontImportSunRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#DontImportSun">       <description>Avoid importing anything from the 'sun.*' packages.  These packages are not portable and are likely to change.       </description>       <priority>4</priority>       <example>import sun.misc.foo;public class Foo {}       </example>    </rule>    <rule name="SuspiciousOctalEscape" since="1.5" message="Suspicious decimal characters following octal escape in string literal" class="net.sourceforge.pmd.lang.java.rule.controversial.SuspiciousOctalEscapeRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#SuspiciousOctalEscape">      <description>A suspicious octal escape sequence was found inside a String literal.The Java language specification (section 3.10.6) says an octalescape sequence inside a literal String shall consist of a backslashfollowed by:   OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigitAny octal escape sequence followed by non-octal digits can be confusing,e.g. "\038" is interpreted as the octal escape sequence "\03" followed bythe literal character "8".      </description>      <priority>3</priority>      <example>public void foo() {  // interpreted as octal 12, followed by character '8'  System.out.println("suspicious: \128");}      </example>    </rule>    <rule name="CallSuperInConstructor" language="java" since="3.0" message="It is a good practice to call super() in a constructor" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#CallSuperInConstructor">      <description>It is a good practice to call super() in a constructor. If super() is not called butanother constructor (such as an overloaded constructor) is called, this rule will not report it.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //ClassOrInterfaceDeclaration[ count (ExtendsList/*) &gt; 0 ]/ClassOrInterfaceBody /ClassOrInterfaceBodyDeclaration /ConstructorDeclaration[ count (.//ExplicitConstructorInvocation)=0 ]                  </value>          </property>      </properties>      <example>public class Foo extends Bar{  public Foo() {   // call the constructor of Bar   super();  } public Foo(int code) {  // do something with code   this();   // no problem with this  }}      </example>    </rule>    <rule name="UnnecessaryParentheses" language="java" since="3.1" message="This statement may have some unnecessary parentheses" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#UnnecessaryParentheses">      <description>Sometimes expressions are wrapped in unnecessary parentheses, making them look like function calls.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>                            //Expression           /PrimaryExpression            /PrimaryPrefix             /Expression[count(*)=1]              /PrimaryExpression              /PrimaryPrefix              </value>          </property>      </properties>      <example>  public class Foo {   boolean bar() {      return (true);      }}        </example>    </rule>    <rule name="DefaultPackage" language="java" since="3.4" message="Use explicit scoping instead of the default package private level" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#DefaultPackage">        <description>Use explicit scoping instead of the default package private level.        </description>        <priority>3</priority>        <properties>            <property name="xpath">                <value>//ClassOrInterfaceDeclaration[@Interface='false']/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration[FieldDeclaration[@PackagePrivate='true']or MethodDeclaration[@PackagePrivate='true']]                </value>            </property>        </properties>    </rule>    <rule name="BooleanInversion" language="java" since="3.5" message="Use bitwise inversion to invert boolean values" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#BooleanInversion">      <description>Use bitwise inversion to invert boolean values - it's the fastest way to do this.See http://www.javaspecialists.co.za/archive/newsletter.do?issue=042&amp;locale=en_US for specific details      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //AssignmentOperator[@Image="="]/../Expression/UnaryExpressionNotPlusMinus[@Image="!"]             </value>          </property>      </properties>      <example>  boolean b = true;b = !b;		// slowb ^= true;	// fast      </example>    </rule>    <rule name="DataflowAnomalyAnalysis" since="3.9" message="Found ''{0}''-anomaly for variable ''{1}'' (lines ''{2}''-''{3}'')." class="net.sourceforge.pmd.lang.java.rule.controversial.DataflowAnomalyAnalysisRule" dfa="true" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#DataflowAnomalyAnalysis">          <description>The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.From those informations there can be found various problems.1. UR - Anomaly: There is a reference to a variable that was not defined before. This is a bug and leads to an error.2. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.3. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.          </description>          <priority>5</priority>          <example>public void foo() {  int buz = 5;  buz = 6; // redefinition of buz -&gt; dd-anomaly  foo(buz);  buz = 2;} // buz is undefined when leaving scope -&gt; du-anomaly          </example>        </rule>  <rule name="AvoidFinalLocalVariable" language="java" since="4.1" class="net.sourceforge.pmd.lang.rule.XPathRule" message="Avoid using final local variables, turn them into fields" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#AvoidFinalLocalVariable">          <description>Avoid using final local variables, turn them into fields.         </description>            <priority>3</priority>          <properties>              <property name="xpath">                  <value>//LocalVariableDeclaration[  @Final = 'true'  and not(../../ForStatement)  and  (    (count(VariableDeclarator/VariableInitializer) = 0)    or    (VariableDeclarator/VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/Literal)  )]      </value>              </property>          </properties>          <example>public class MyClass {    public void foo() {        final String finalLocalVariable;    }}       </example>    </rule>  <rule name="AvoidUsingShortType" language="java" since="4.1" message="Do not use the short type" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#AvoidUsingShortType">        <description>            Java uses the 'short' type to reduce memory usage, not to optimize calculation. In fact, the JVM does not have anyarithmetic capabilities for the short type: the JVM must convert the short into an int, do the proper calculationand convert the int back to a short. Thus any storage gains found through use of the 'short' type may be offset byadverse impacts on performance.                    </description>        <priority>1</priority>        <properties>            <property name="xpath">                <value>                                //PrimitiveType[@Image = 'short']                                    </value>            </property>        </properties>        <example>            public class UsingShort {   private short doNotUseShort = 0;   public UsingShort() {    short shouldNotBeUsed = 1;    doNotUseShort += shouldNotBeUsed;  }}            </example>   </rule>  <rule name="AvoidUsingVolatile" language="java" since="4.1" class="net.sourceforge.pmd.lang.rule.XPathRule" message="Use of modifier volatile is not recommended." externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#AvoidUsingVolatile">        <description>            Use of the keyword 'volatile' is generally used to fine tune a Java application, and therefore, requiresa good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore,the volatile keyword should not be used for maintenance purpose and portability.                    </description>        <priority>2</priority>        <properties>            <property name="xpath">                <value>                                            //FieldDeclaration[                                contains(@Volatile,'true')                        ]                                    </value>            </property>        </properties>    <example>      public class ThrDeux {  private volatile String var1;	// not suggested  private          String var2;	// preferred}          </example>  </rule>  <rule name="AvoidUsingNativeCode" language="java" since="4.1" message="The use of native code is not recommended." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#AvoidUsingNativeCode">        <description>            Unnecessary reliance on Java Native Interface (JNI) calls directly reduces application portabilityand increases the maintenance burden.                    </description>        <priority>2</priority>        <properties>            <property name="xpath">                <value>                                            //Name[starts-with(@Image,'System.loadLibrary')]                                    </value>            </property>        </properties>        <example>            public class SomeJNIClass {     public SomeJNIClass() {         System.loadLibrary("nativelib");     }     static {         System.loadLibrary("nativelib");         }     public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {         System.loadLibrary("nativelib");     }}                    </example>    </rule>  <rule name="AvoidAccessibilityAlteration" language="java" since="4.1" message="You should modify visibility of class or methods using getDeclaredConstructors(), getDeclaredConstructor(Class[]), setAccessible() or PrivilegedAction." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#AvoidAccessibilityAlteration">        <description>            Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(),as the interface PrivilegedAction, allows for the runtime alteration of variable, class, ormethod visibility, even if they are private. This violates the principle of encapsulation.                    </description>        <priority>3</priority>        <properties>            <property name="xpath">                <value>                                           //PrimaryExpression[                        (                        (PrimarySuffix[                                ends-with(@Image,'getDeclaredConstructors')                                        or                                ends-with(@Image,'getDeclaredConstructor')                                        or                                ends-with(@Image,'setAccessible')                                ])                        or                        (PrimaryPrefix/Name[                                ends-with(@Image,'getDeclaredConstructor')                                or                                ends-with(@Image,'getDeclaredConstructors')                                or                                starts-with(@Image,'AccessibleObject.setAccessible')                                ])                        )                        and                        (//ImportDeclaration/Name[                                contains(@Image,'java.security.PrivilegedAction')])                ]                                </value>            </property>        </properties>        <example>            import java.lang.reflect.AccessibleObject;import java.lang.reflect.Method;import java.security.PrivilegedAction;public class Violation {  public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {    // Possible call to forbidden getDeclaredConstructors    Class[] arrayOfClass = new Class[1];    this.getClass().getDeclaredConstructors();    this.getClass().getDeclaredConstructor(arrayOfClass);    Class clazz = this.getClass();    clazz.getDeclaredConstructor(arrayOfClass);    clazz.getDeclaredConstructors();      // Possible call to forbidden setAccessible    clazz.getMethod("", arrayOfClass).setAccessible(false);    AccessibleObject.setAccessible(null, false);    Method.setAccessible(null, false);    Method[] methodsArray = clazz.getMethods();    int nbMethod;    for ( nbMethod = 0; nbMethod &lt; methodsArray.length; nbMethod++ ) {      methodsArray[nbMethod].setAccessible(false);    }      // Possible call to forbidden PrivilegedAction    PrivilegedAction priv = (PrivilegedAction) new Object(); priv.run();  }}                </example>    </rule>    <rule name="DoNotCallGarbageCollectionExplicitly" language="java" since="4.2" message="Do not explicitly trigger a garbage collection." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#DoNotCallGarbageCollectionExplicitly">        <description>          Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have thesame behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not.Moreover, "modern" jvms do a very good job handling garbage collections. If memory usage issues unrelated to memoryleaks develop within an application, it should be dealt with JVM options rather than within the code itself.              </description>        <priority>2</priority>        <properties>            <property name="xpath">                <value>                    //Name[(starts-with(@Image, 'System.') and(starts-with(@Image, 'System.gc') orstarts-with(@Image, 'System.runFinalization'))) or(starts-with(@Image,'Runtime.getRuntime') and../../PrimarySuffix[ends-with(@Image,'gc')])]                </value>            </property>        </properties>        <example>            public class GCCall {    public GCCall()	{        // Explicit gc call !        System.gc();    }    public void doSomething() {    // Explicit gc call !       Runtime.getRuntime().gc();    }    public explicitGCcall() { // Explicit gc call ! System.gc(); }    public void doSomething() { // Explicit gc call ! Runtime.getRuntime().gc(); }}          </example>  </rule>  <rule name="OneDeclarationPerLine" language="java" since="5.0" class="net.sourceforge.pmd.lang.rule.XPathRule" message="Use one line for each declaration, it enhances code readability." externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#OneDeclarationPerLine">        <description>            Java allows the use of several variables declaration of the same type on one line. However, itcan lead to quite messy code. This rule looks for several declarations on the same line.                    </description>       <priority>4</priority>       <properties>            <property name="xpath">                <value>                    //LocalVariableDeclaration   [count(VariableDeclarator) &gt; 1]   [$strictMode or count(distinct-values(VariableDeclarator/@BeginLine)) != count(VariableDeclarator)]                                    </value>            </property>            <property name="version" value="2.0"/>            <property name="strictMode" type="Boolean" value="false" description="If true, mark combined declaration even if the declarations are on separate lines."/>        </properties>        <example>          String name;            // separate declarationsString lastname;String name, lastname;  // combined declaration, a violationString name,       lastname;        // combined declaration on multiple lines, no violation by default.                        // Set property strictMode to true to mark this as violation.                  </example>  </rule>  <rule name="AvoidPrefixingMethodParameters" language="java" since="5.0" class="net.sourceforge.pmd.lang.rule.XPathRule" message="Avoid prefixing parameters by in, out or inOut. Uses Javadoc to document this behavior." externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#AvoidPrefixingMethodParameters">        <description>            Prefixing parameters by 'in' or 'out' pollutes the name of the parameters and reduces code readability.To indicate whether or not a parameter will be modify in a method, its better to document methodbehavior with Javadoc.                    </description>       <priority>4</priority>       <properties>            <property name="xpath">                <value>                    //MethodDeclaration/MethodDeclarator/FormalParameters/FormalParameter/VariableDeclaratorId[        pmd:matches(@Image,'^in[A-Z].*','^out[A-Z].*','^in$','^out$')]                                    </value>            </property>        </properties>        <example>// Not really clearpublic class Foo {  public void bar(      int inLeftOperand,      Result outRightOperand) {      outRightOperand.setValue(inLeftOperand * outRightOperand.getValue());  }}        </example>        <example>// Far more usefulpublic class Foo {  /**   *   * @param leftOperand, (purpose), not modified by method.   * @param rightOperand (purpose), will be modified by the method: contains the result.   */  public void bar(        int leftOperand,        Result rightOperand) {        rightOperand.setValue(leftOperand * rightOperand.getValue());  }}        </example>  </rule>  <rule name="AvoidLiteralsInIfCondition" language="java" since="4.2.6" message="Avoid using Literals in Conditional Statements" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#AvoidLiteralsInIfCondition">    <description>Avoid using hard-coded literals in conditional statements. By declaring them as static variablesor private members with descriptive names maintainability is enhanced. By default, the literals "-1" and "0" are ignored.More exceptions can be defined with the property "ignoreMagicNumbers".    </description>    <priority>3</priority>    <properties>      <property name="ignoreMagicNumbers" description="Comma-separated list of magic numbers, that should be ignored" type="String" value="-1,0"/>      <property name="xpath">        <value>//IfStatement/Expression/*/PrimaryExpression/PrimaryPrefix/Literal[not(NullLiteral)][not(BooleanLiteral)][empty(index-of(tokenize($ignoreMagicNumbers, ','), @Image))]        </value>      </property>      <property name="version" value="2.0"/>    </properties>    <example>private static final int MAX_NUMBER_OF_REQUESTS = 10;public void checkRequests() {    if (i == 10) {                        // magic number, buried in a method      doSomething();    }    if (i == MAX_NUMBER_OF_REQUESTS) {    // preferred approach      doSomething();    }    if (aString.indexOf('.') != -1) {}     // magic number -1, by default ignored    if (aString.indexOf('.') &gt;= 0) { }     // alternative approach    if (aDouble &gt; 0.0) {}                  // magic number 0.0    if (aDouble &gt;= Double.MIN_VALUE) {}    // preferred approach}    </example>  </rule>  <rule name="UseObjectForClearerAPI" language="java" since="4.2.6" message="Rather than using a lot of String arguments, consider using a container object for those values." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#UseObjectForClearerAPI">    <description>When you write a public method, you should be thinking in terms of an API. If your method is public, it means other classwill use it, therefore, you want (or need) to offer a comprehensive and evolutive API. If you pass a lot of informationas a simple series of Strings, you may think of using an Object to represent all those information. You'll get a simplierAPI (such as doWork(Workload workload), rather than a tedious series of Strings) and more importantly, if you need at somepoint to pass extra data, you'll be able to do so by simply modifying or extending Workload without any modification toyour API.    </description>    <priority>3</priority>    <properties>      <property name="xpath">        <value>//MethodDeclaration[@Public]/MethodDeclarator/FormalParameters[     count(FormalParameter/Type/ReferenceType/ClassOrInterfaceType[@Image = 'String']) &gt; 3]        </value>      </property>    </properties>    <example>public class MyClass {  public void connect(String username,    String pssd,    String databaseName,    String databaseAdress)    // Instead of those parameters object    // would ensure a cleaner API and permit    // to add extra data transparently (no code change):    // void connect(UserData data);    {  }}    </example>  </rule>  <rule name="UseConcurrentHashMap" language="java" since="4.2.6" message="If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/controversial.html#UseConcurrentHashMap">    <description>Since Java5 brought a new implementation of the Map designed for multi-threaded access, you canperform efficient map reads without blocking other threads.    </description>    <priority>3</priority>    <properties>      <property name="xpath">        <value>//Type[../VariableDeclarator/VariableInitializer//AllocationExpression]/ReferenceType/ClassOrInterfaceType[@Image = 'Map']        </value>      </property>    </properties>    <example>public class ConcurrentApp {  public void getMyInstance() {    Map map1 = new HashMap(); 	// fine for single-threaded access    Map map2 = new ConcurrentHashMap();  // preferred for use with multiple threads    // the following case will be ignored by this rule    Map map3 = someModule.methodThatReturnMap(); // might be OK, if the returned map is already thread-safe  }}    </example>  </rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Coupling" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>Rules which find instances of high or inappropriate coupling between objects and packages.  </description>    <rule name="CouplingBetweenObjects" since="1.04" message="High amount of different objects as members denotes a high coupling" class="net.sourceforge.pmd.lang.java.rule.coupling.CouplingBetweenObjectsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/coupling.html#CouplingBetweenObjects">    <description>This rule counts the number of unique attributes, local variables, and return types within an object. A number higher than the specified threshold can indicate a high degree of coupling.    </description>    <priority>3</priority>    <example>import com.Blah;import org.Bar;import org.Bardo;public class Foo {   private Blah var1;   private Bar var2;  	//followed by many imports of unique objects   void ObjectC doWork() {     Bardo var55;     ObjectA var44;     ObjectZ var93;     return something;   }}    </example>  </rule>  <rule name="ExcessiveImports" since="1.04" message="A high number of imports can indicate a high degree of coupling within an object." class="net.sourceforge.pmd.lang.java.rule.coupling.ExcessiveImportsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/coupling.html#ExcessiveImports">     <description>A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of unique imports and reports a violation if the count is above the user-specified threshold.  </description>  <priority>3</priority>  <example>      import blah.blah.Baz;import blah.blah.Bif;// 18 others from the same package elidedpublic class Foo { public void doWork() {}}        </example>   </rule>    <rule name="LooseCoupling" since="0.7" message="Avoid using implementation types like ''{0}''; use the interface instead" class="net.sourceforge.pmd.lang.java.rule.coupling.LooseCouplingRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/coupling.html#LooseCoupling">      <description>The use of implementation types as object references limits your ability to use alternateimplementations in the future as requirements change. Whenever available, referencing objects by their interface types provides much more flexibility.      </description>        <priority>3</priority>      <example>	// sub-optimal approachprivate ArrayList list = new ArrayList();public HashSet getFoo() {	return new HashSet();}	// preferred approachprivate List list = new ArrayList();public Set getFoo() {	return new HashSet();}      </example>    </rule>    <rule name="LoosePackageCoupling" since="5.0" message="Use of ''{0}'' outside of package hierarchy ''{1}'' is not recommended; use recommended classes instead" class="net.sourceforge.pmd.lang.java.rule.coupling.LoosePackageCouplingRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/coupling.html#LoosePackageCoupling">      <description>Avoid using classes from the configured package hierarchy outside of the package hierarchy, except when using one of the configured allowed classes.      </description>        <priority>3</priority>      <example>package some.package;import some.other.package.subpackage.subsubpackage.DontUseThisClass;public class Bar {   DontUseThisClass boo = new DontUseThisClass();}        </example>    </rule>   <rule name="LawOfDemeter" language="java" since="5.0" message="Potential violation of Law of Demeter" class="net.sourceforge.pmd.lang.java.rule.coupling.LawOfDemeterRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/coupling.html#LawOfDemeter">                <description>The Law of Demeter is a simple rule, that says "only talk to friends". It helps to reduce coupling between classes or objects. See also the references:Andrew Hunt, David Thomas, and Ward Cunningham. The Pragmatic Programmer. From Journeyman to Master. Addison-Wesley Longman, Amsterdam, October 1999.;K.J. Lieberherr and I.M. Holland. Assuring good style for object-oriented programs. Software, IEEE, 6(5):38???48, 1989.;http://www.ccs.neu.edu/home/lieber/LoD.html;http://en.wikipedia.org/wiki/Law_of_Demeter        </description>        <priority>3</priority>        <example>public class Foo {    /**     * This example will result in two violations.     */    public void example(Bar b) {        // this method call is ok, as b is a parameter of "example"        C c = b.getC();                // this method call is a violation, as we are using c, which we got from B.        // We should ask b directly instead, e.g. "b.doItOnC();"        c.doIt();                // this is also a violation, just expressed differently as a method chain without temporary variables.        b.getC().doIt();                // a constructor call, not a method call.        D d = new D();        // this method call is ok, because we have create the new instance of D locally.        d.doSomethingElse();     }}        </example>    </rule>     </ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Design" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The Design ruleset contains rules that flag suboptimal code implementations. Alternate approachesare suggested.  </description>  <rule name="UseUtilityClass" since="0.3" message="All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning." class="net.sourceforge.pmd.lang.java.rule.design.UseUtilityClassRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#UseUtilityClass">    <description>    	For classes that only have static methods, consider making them utility classes.Note that this doesn't apply to abstract classes, since their subclasses maywell include non-static methods.  Also, if you want this class to be a utility class,remember to add a private constructor to prevent instantiation.(Note, that this use was known before PMD 5.1.0 as UseSingleton).		    </description>      <priority>3</priority>    <example>public class MaybeAUtility {  public static void foo() {}  public static void bar() {}}    </example>  </rule>  <rule name="SimplifyBooleanReturns" since="0.9" message="Avoid unnecessary if..then..else statements when returning booleans" class="net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#SimplifyBooleanReturns">    <description>Avoid unnecessary if-then-else statements when returning a boolean. The result ofthe conditional test can be returned instead.    </description>      <priority>3</priority>    <example>public boolean isBarEqualTo(int x) {   	if (bar == x) {		 // this bit of code...		return true;	} else {		return false;    }}public boolean isBarEqualTo(int x) {   	return bar == x;	// can be replaced with this}    </example>  </rule>    <rule name="SimplifyBooleanExpressions" language="java" since="1.05" message="Avoid unnecessary comparisons in boolean expressions" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#SimplifyBooleanExpressions">      <description>Avoid unnecessary comparisons in boolean expressions, they serve no purpose and impacts readability.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>//EqualityExpression/PrimaryExpression /PrimaryPrefix/Literal/BooleanLiteral              </value>          </property>      </properties>      <example>  public class Bar {  // can be simplified to  // bar = isFoo();  private boolean bar = (isFoo() == true);  public isFoo() { return false;}}        </example>    </rule>  <rule name="SwitchStmtsShouldHaveDefault" language="java" since="1.0" message="Switch statements should have a default label" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#SwitchStmtsShouldHaveDefault">    <description>All switch statements should include a default option to catch any unspecified values.    </description>    <priority>3</priority>      <properties>          <property name="xpath">              <value>                  //SwitchStatement[not(SwitchLabel[@Default='true'])]                                </value>          </property>      </properties>    <example>public void bar() {    int x = 2;    switch (x) {      case 1: int j = 6;      case 2: int j = 8;      				// missing default: here    }}    </example>    </rule>  <rule name="AvoidDeeplyNestedIfStmts" since="1.0" message="Deeply nested if..then statements are hard to read" class="net.sourceforge.pmd.lang.java.rule.design.AvoidDeeplyNestedIfStmtsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#AvoidDeeplyNestedIfStmts">    <description>Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.    </description>      <priority>3</priority>    <example>public class Foo {  public void bar(int x, int y, int z) {    if (x&gt;y) {      if (y&gt;z) {        if (z==x) {         // !! too deep        }      }    }  }}    </example>    </rule>    <rule name="AvoidReassigningParameters" since="1.0" message="Avoid reassigning parameters such as ''{0}''" class="net.sourceforge.pmd.lang.java.rule.design.AvoidReassigningParametersRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#AvoidReassigningParameters">    <description>Reassigning values to incoming parameters is not recommended.  Use temporary local variables instead.    </description>        <priority>2</priority>    <example>public class Foo {  private void foo(String bar) {    bar = "something else";  }}    </example>  </rule>    <rule name="SwitchDensity" since="1.02" message="A high ratio of statements to labels in a switch statement.  Consider refactoring." class="net.sourceforge.pmd.lang.java.rule.design.SwitchDensityRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#SwitchDensity">      <description>A high ratio of statements to labels in a switch statement implies that the switch statement is overloaded.  Consider moving the statements into new methods or creating subclasses based on the switch variable.      </description>        <priority>3</priority>      <example> public class Foo {  public void bar(int x) {    switch (x) {      case 1: {        // lots of statements        break;      } case 2: {        // lots of statements        break;      }    }  }}       </example>    </rule>    <rule name="ConstructorCallsOverridableMethod" since="1.04" message="Overridable {0} called during object construction" class="net.sourceforge.pmd.lang.java.rule.design.ConstructorCallsOverridableMethodRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#ConstructorCallsOverridableMethod">      <description>Calling overridable methods during construction poses a risk of invoking methods on an incompletely constructed object and can be difficult to debug.It may leave the sub-class unable to construct its superclass or forced to replicate the construction process completely within itself, losing the ability to call super().  If the default constructor contains a call to an overridable method, the subclass may be completely uninstantiable.   Note that this includes method calls throughout the control flow graph - i.e., if a constructor Foo() calls a private method bar() that calls a public method buz(), this denotes a problem.      </description>        <priority>1</priority>      <example>  public class SeniorClass {  public SeniorClass(){      toString(); //may throw NullPointerException if overridden  }  public String toString(){    return "IAmSeniorClass";  }}public class JuniorClass extends SeniorClass {  private String name;  public JuniorClass(){    super(); //Automatic call leads to NullPointerException    name = "JuniorClass";  }  public String toString(){    return name.toUpperCase();  }}        </example>    </rule>    <rule name="AccessorClassGeneration" since="1.04" message="Avoid instantiation through private constructors from outside of the constructor's class." class="net.sourceforge.pmd.lang.java.rule.design.AccessorClassGenerationRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#AccessorClassGeneration">      <description>Instantiation by way of private constructors from outside of the constructor's class often causes the generation of an accessor. A factory method, or non-privatization of the constructor can eliminate this situation. The generated class file is actually an interface.  It gives the accessing class the ability to invoke a new hidden package scope constructor that takes the interface as a supplementary parameter. This turns a private constructor effectively into one with package scope, and is challenging to discern.      </description>      <priority>3</priority>      <example>  public class Outer { void method(){  Inner ic = new Inner();//Causes generation of accessor class } public class Inner {  private Inner(){} }}        </example>    </rule>    <rule name="FinalFieldCouldBeStatic" language="java" since="1.1" message="This final field could be made static" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#FinalFieldCouldBeStatic">      <description>If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead in each object at runtime.      </description>      <priority>3</priority>        <properties>            <property name="xpath">                <value>                    //FieldDeclaration [@Final='true' and @Static='false'] [not (../../../../ClassOrInterfaceDeclaration[@Interface='true'])]   /VariableDeclarator/VariableInitializer/Expression    /PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Literal                                    </value>            </property>        </properties>      <example>  public class Foo {  public final int BAR = 42; // this could be static and save some space}        </example>    </rule>  <rule name="CloseResource" since="1.2.2" message="Ensure that resources like this {0} object are closed after use" class="net.sourceforge.pmd.lang.java.rule.design.CloseResourceRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#CloseResource">    <description>Ensure that resources (like Connection, Statement, and ResultSet objects) are always closed after use.    </description>    <priority>3</priority>    <example>public class Bar {  public void foo() {    Connection c = pool.getConnection();    try {      // do stuff    } catch (SQLException ex) {     // handle exception    } finally {      // oops, should close the connection using 'close'!      // c.close();    }  }}    </example>  </rule>    <rule name="NonStaticInitializer" language="java" since="1.5" message="Non-static initializers are confusing" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#NonStaticInitializer">       <description>A non-static initializer block will be called any time a constructor is invoked (just prior to invoking the constructor).  While this is a valid language construct, it is rarely used and is confusing.       </description>       <priority>3</priority>         <properties>             <property name="xpath">                 <value>//Initializer[@Static='false']                 </value>             </property>         </properties>       <example>   public class MyClass { // this block gets run before any call to a constructor  {   System.out.println("I am about to construct myself");  }}          </example>     </rule>    <rule name="DefaultLabelNotLastInSwitchStmt" language="java" since="1.5" message="The default label should be the last label in a switch statement" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#DefaultLabelNotLastInSwitchStmt">       <description>By convention, the default label should be the last label in a switch statement.       </description>       <priority>3</priority>         <properties>             <property name="xpath">                 <value>//SwitchStatement [not(SwitchLabel[position() = last()][@Default='true'])] [SwitchLabel[@Default='true']]                 </value>             </property>         </properties>       <example>   public class Foo {  void bar(int a) {   switch (a) {    case 1:  // do something       break;    default:  // the default case should be last, by convention       break;    case 2:       break;   }  }}          </example>     </rule>    <rule name="NonCaseLabelInSwitchStatement" language="java" since="1.5" message="A non-case label was present in a switch statement" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#NonCaseLabelInSwitchStatement">       <description>A non-case label (e.g. a named break/continue label) was present in a switch statement.This legal, but confusing. It is easy to mix up the case labels and the non-case labels.       </description>       <priority>3</priority>         <properties>             <property name="xpath">                 <value> //SwitchStatement//BlockStatement/Statement/LabeledStatement                  </value>             </property>         </properties>       <example>   public class Foo {  void bar(int a) {   switch (a) {     case 1:       // do something       break;     mylabel: // this is legal, but confusing!       break;     default:       break;    }  }}          </example>     </rule>    <rule name="OptimizableToArrayCall" language="java" since="1.8" message="This call to Collection.toArray() may be optimizable" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#OptimizableToArrayCall">      <description>Calls to a collection's toArray() method should specify target arrays sized to match the size of thecollection. Initial arrays that are too small are discarded in favour of new ones that have to be createdthat are the proper size.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>                  //PrimaryExpression[PrimaryPrefix/Name[ends-with(@Image, 'toArray')]][PrimarySuffix/Arguments/ArgumentList/Expression /PrimaryExpression/PrimaryPrefix/AllocationExpression /ArrayDimsAndInits/Expression/PrimaryExpression/PrimaryPrefix/Literal[@Image='0']]                                </value>          </property>      </properties>      <example>  List foos = getFoos();      // inefficient, the array will be discardedFoo[] fooArray = foos.toArray(new Foo[0]);        // much better; this one sizes the destination array,     // avoiding of a new one via reflectionFoo[] fooArray = foos.toArray(new Foo[foos.size()]);        </example>    </rule>    <rule name="BadComparison" language="java" since="1.8" message="Avoid equality comparisons with Double.NaN" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#BadComparison">      <description>Avoid equality comparisons with Double.NaN. Due to the implicit lack of representationprecision when comparing floating point numbers these are likely to cause logic errors.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>                  //EqualityExpression[@Image='=='] /PrimaryExpression/PrimaryPrefix /Name[@Image='Double.NaN' or @Image='Float.NaN']                                </value>          </property>      </properties>      <example>  boolean x = (y == Double.NaN);        </example>    </rule>    <rule name="EqualsNull" language="java" since="1.9" message="Avoid using equals() to compare against null" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#EqualsNull">        <description>Tests for null should not use the equals() method. The '==' operator should be used instead.        </description>        <priority>1</priority>        <properties>            <property name="xpath">                <value>    //PrimaryExpression  [    PrimaryPrefix[Name[ends-with(@Image, 'equals')]]      [following-sibling::node()/Arguments/ArgumentList[count(Expression)=1]          /Expression/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]    or    PrimarySuffix[ends-with(@Image, 'equals')]      [following-sibling::node()/Arguments/ArgumentList[count(Expression)=1]          /Expression/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]  ]                    </value>            </property>         </properties>    <example>       String x = "foo";if (x.equals(null)) { // bad form   	doSomething();	}	if (x == null) { 	// preferred   	doSomething();	}            </example>        </rule>      <rule name="ConfusingTernary" since="1.9" message="Avoid if (x != y) ..; else ..;" class="net.sourceforge.pmd.lang.java.rule.design.ConfusingTernaryRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#ConfusingTernary">        <description>Avoid negation within an "if" expression with an "else" clause.  For example, rephrase:  if (x != y) diff(); else same();as:  if (x == y) same(); else diff();Most "if (x != y)" cases without an "else" are often return cases, so consistent use of this rule makes the code easier to read.  Also, this resolves trivial ordering problems, suchas "does the error case go first?" or "does the common case go first?".        </description>        <priority>3</priority>        <example>          boolean bar(int x, int y) {  return (x != y) ? diff : same; }                  </example>      </rule>    <rule name="InstantiationToGetClass" language="java" since="2.0" message="Avoid instantiating an object just to call getClass() on it; use the .class public member instead" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#InstantiationToGetClass">      <description>Avoid instantiating an object just to call getClass() on it; use the .class public member instead.      </description>      <priority>4</priority>        <properties>          <property name="xpath">            <value>                //PrimarySuffix [@Image='getClass'] [parent::PrimaryExpression  [PrimaryPrefix/AllocationExpression]  [count(PrimarySuffix) = 2] ]                 </value>          </property>        </properties>        <example>      // replace thisClass c = new String().getClass();  // with this:Class c = String.class;            </example>      </rule>    <rule name="IdempotentOperations" since="2.0" message="Avoid idempotent operations (like assigning a variable to itself)." class="net.sourceforge.pmd.lang.java.rule.design.IdempotentOperationsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#IdempotentOperations">      <description>Avoid idempotent operations - they have no effect.      </description>        <priority>3</priority>      <example>      public class Foo { public void bar() {  int x = 2;  x = x; }}            </example>    </rule>    <rule name="SimpleDateFormatNeedsLocale" language="java" since="2.0" message="When instantiating a SimpleDateFormat object, specify a Locale" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#SimpleDateFormatNeedsLocale">        <description>Be sure to specify a Locale when creating SimpleDateFormat instances to ensure that locale-appropriateformatting is used.        </description>        <priority>3</priority>        <properties>            <property name="xpath">                <value>//AllocationExpression [ClassOrInterfaceType[@Image='SimpleDateFormat']] [Arguments[@ArgumentCount=1]]                    </value>                 </property>              </properties>        <example>        public class Foo {  // Should specify Locale.US (or whatever)  private SimpleDateFormat sdf = new SimpleDateFormat("pattern");}                </example>    </rule>    <rule name="ImmutableField" since="2.0" message="Private field ''{0}'' could be made final; it is only initialized in the declaration or constructor." class="net.sourceforge.pmd.lang.java.rule.design.ImmutableFieldRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#ImmutableField">      <description>Identifies private fields whose values never change once they are initialized either in the declaration of the field or by a constructor.  This helps in converting existing classes to becoming immutable ones.      </description>        <priority>3</priority>      <example>  public class Foo {  private int x; // could be final  public Foo() {      x = 7;  }  public void foo() {     int a = x + 2;  }}        </example>    </rule>    <rule name="UseLocaleWithCaseConversions" language="java" since="2.0" message="When doing a String.toLowerCase()/toUpperCase() call, use a Locale" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#UseLocaleWithCaseConversions">      <description>When doing String.toLowerCase()/toUpperCase() conversions, use Locales to avoids problems with languages thathave unusual conventions, i.e. Turkish.      </description>      <priority>3</priority>        <properties>          <property name="xpath">            <value>                //PrimaryExpression[PrimaryPrefix/Name [ends-with(@Image, 'toLowerCase') or ends-with(@Image,'toUpperCase')] ][PrimarySuffix[position() = 1]/Arguments[@ArgumentCount=0]]                 </value>          </property>        </properties>        <example>    class Foo { // BAD if (x.toLowerCase().equals("list"))... /* This will not match "LIST" when in Turkish locale The above could be if (x.toLowerCase(Locale.US).equals("list")) ... or simply if (x.equalsIgnoreCase("list")) ... */ // GOOD String z = a.toLowerCase(Locale.EN);}            </example>    </rule>    <rule name="AvoidProtectedFieldInFinalClass" language="java" since="2.1" message="Avoid protected fields in a final class.  Change to private or package access." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#AvoidProtectedFieldInFinalClass">         <description>Do not use protected fields in final classes since they cannot be subclassed.Clarify your intent by using private or package access modifiers instead.         </description>         <priority>3</priority>         <properties>             <property name="xpath">                 <value>//ClassOrInterfaceDeclaration[@Final='true']/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/FieldDeclaration[@Protected='true']                  </value>             </property>         </properties>        <example>public final class Bar {  private int x;  protected int y;  // bar cannot be subclassed, so is y really private or package visible?  Bar() {}}          </example>       </rule>     <rule name="AssignmentToNonFinalStatic" since="2.2" message="Possible unsafe assignment to a non-final static field in a constructor." class="net.sourceforge.pmd.lang.java.rule.design.AssignmentToNonFinalStaticRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#AssignmentToNonFinalStatic">       <description>Identifies a possible unsafe usage of a static field.       </description>         <priority>3</priority>       <example>   public class StaticField {   static int x;   public FinalFields(int y) {    x = y; // unsafe   }}          </example>     </rule>    <rule name="MissingStaticMethodInNonInstantiatableClass" language="java" since="3.0" message="Class cannot be instantiated and does not provide any static methods or fields" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#MissingStaticMethodInNonInstantiatableClass">      <description>A class that has private constructors and does not have any static methods or fields cannot be used.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //ClassOrInterfaceDeclaration[@Nested='false'][  (    count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration)&gt;0    and    count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration) = count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration[@Private='true'])  )  and  count(.//MethodDeclaration[@Static='true'])=0  and  count(.//FieldDeclaration[@Private='false'][@Static='true'])=0  and  count(.//ClassOrInterfaceDeclaration[@Nested='true']           [@Public='true']           [@Static='true']           [count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration[@Public='true']) &gt; 0]           [count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/MethodDeclaration                    [@Public='true']                    [./ResultType/Type/ReferenceType/ClassOrInterfaceType                        [@Image = //ClassOrInterfaceDeclaration[@Nested='false']/@Image]                    ]            ) &gt; 0]        ) = 0]                  </value>          </property>      </properties>      <example>// This class is unusable, since it cannot be// instantiated (private constructor),// and no static method can be called.public class Foo {  private Foo() {}  void foo() {}}      </example>    </rule>    <rule name="AvoidSynchronizedAtMethodLevel" language="java" since="3.0" message="Use block level rather than method level synchronization" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#AvoidSynchronizedAtMethodLevel">      <description>Method-level synchronization can cause problems when new code is added to the method.  Block-level synchronization helps to ensure that only the code that needs synchronization gets it.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //MethodDeclaration[@Synchronized='true']                  </value>          </property>      </properties>      <example>public class Foo {  // Try to avoid this:  synchronized void foo() {  }  // Prefer this:  void bar() {    synchronized(this) {    }  }  // Try to avoid this for static methods:  static synchronized void fooStatic() {  }    // Prefer this:  static void barStatic() {    synchronized(Foo.class) {    }  }}      </example>    </rule>    <rule name="MissingBreakInSwitch" language="java" since="3.0" message="A switch statement does not contain a break" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#MissingBreakInSwitch">      <description>Switch statements without break or return statements for each case optionmay indicate problematic behaviour. Empty cases are ignored as these indicate an intentional fall-through.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //SwitchStatement[(count(.//BreakStatement) + count(BlockStatement//Statement/ReturnStatement) + count(BlockStatement//Statement/ThrowStatement) + count(BlockStatement//Statement/IfStatement[@Else='true' and Statement[2][ReturnStatement|ThrowStatement]]/Statement[1][ReturnStatement|ThrowStatement]) + count(SwitchLabel[name(following-sibling::node()) = 'SwitchLabel']) + count(SwitchLabel[count(following-sibling::node()) = 0])  &lt; count (SwitchLabel))]                  </value>          </property>      </properties>      <example>public void bar(int status) {    switch(status) {      case CANCELLED:        doCancelled();        // break; hm, should this be commented out?      case NEW:        doNew();        // is this really a fall-through?      case REMOVED:        doRemoved();        // what happens if you add another case after this one?      case OTHER: // empty case - this is interpreted as an intentional fall-through      case ERROR:        doErrorHandling();        break;    }}      </example>    </rule>    <rule name="UseNotifyAllInsteadOfNotify" language="java" since="3.0" message="Call Thread.notifyAll() rather than Thread.notify()" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#UseNotifyAllInsteadOfNotify">      <description>Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then onlyone is chosen.  The thread chosen is arbitrary; thus its usually safer to call notifyAll() instead.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //StatementExpression/PrimaryExpression[count(PrimarySuffix/Arguments/ArgumentList) = 0][PrimaryPrefix[./Name[@Image='notify' or ends-with(@Image,'.notify')]or ../PrimarySuffix/@Image='notify'or (./AllocationExpression and ../PrimarySuffix[@Image='notify'])]]                  </value>          </property>      </properties>      <example>  void bar() {    x.notify();    // If many threads are monitoring x, only one (and you won't know which) will be notified.    // use instead:    x.notifyAll();  }      </example>    </rule>    <rule name="AvoidInstanceofChecksInCatchClause" language="java" since="3.0" message="An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#AvoidInstanceofChecksInCatchClause">      <description>Each caught exception type should be handled in its own catch clause.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //CatchStatement/FormalParameter /following-sibling::Block//InstanceOfExpression/PrimaryExpression/PrimaryPrefix  /Name[   @Image = ./ancestor::Block/preceding-sibling::FormalParameter    /VariableDeclaratorId/@Image  ]                  </value>          </property>      </properties>      <example>try { // Avoid this // do something} catch (Exception ee) { if (ee instanceof IOException) {  cleanup(); }}try {  // Prefer this: // do something} catch (IOException ee) { cleanup();}      </example>    </rule>    <rule name="AbstractClassWithoutAbstractMethod" language="java" since="3.0" message="This abstract class does not have any abstract methods" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#AbstractClassWithoutAbstractMethod">      <description>The abstract class does not contain any abstract methods. An abstract class suggestsan incomplete implementation, which is to be completed by subclasses implementing theabstract methods. If the class is intended to be used as a base class only (not to be instantiateddirectly) a protected constructor can be provided prevent direct instantiation.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>//ClassOrInterfaceDeclaration [@Abstract='true'  and count( .//MethodDeclaration[@Abstract='true'] )=0 ]  [count(ImplementsList)=0]  [count(.//ExtendsList)=0]                            </value>          </property>      </properties>      <example>public abstract class Foo {  void int method1() { ... }  void int method2() { ... }  // consider using abstract methods or removing  // the abstract modifier and adding protected constructors}      </example>    </rule>    <rule name="SimplifyConditional" language="java" since="3.1" message="No need to check for null before an instanceof" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#SimplifyConditional">          <description>No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.          </description>          <priority>3</priority>          <properties>              <property name="xpath">                  <value>                      //Expression [ConditionalOrExpression [EqualityExpression[@Image='==']  //NullLiteral  and  UnaryExpressionNotPlusMinus   [@Image='!']//InstanceOfExpression[PrimaryExpression     //Name/@Image = ancestor::ConditionalOrExpression/EqualityExpression      /PrimaryExpression/PrimaryPrefix/Name/@Image]  and  (count(UnaryExpressionNotPlusMinus) + 1 = count(*)) ]orConditionalAndExpression [EqualityExpression[@Image='!=']//NullLiteral andInstanceOfExpression [PrimaryExpression[count(PrimarySuffix[@ArrayDereference='true'])=0]  //Name[not(contains(@Image,'.'))]/@Image = ancestor::ConditionalAndExpression   /EqualityExpression/PrimaryExpression/PrimaryPrefix/Name/@Image] and(count(InstanceOfExpression) + 1 = count(*)) ]]                   </value>              </property>          </properties>           <example>      class Foo {  void bar(Object x) {    if (x != null &amp;&amp; x instanceof Bar) {      // just drop the "x != null" check    }  }}                 </example>        </rule><rule name="CompareObjectsWithEquals" since="3.2" message="Use equals() to compare object references." class="net.sourceforge.pmd.lang.java.rule.design.CompareObjectsWithEqualsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#CompareObjectsWithEquals">  <description>Use equals() to compare object references; avoid comparing them with ==.  </description>  <priority>3</priority>  <example>class Foo {  boolean bar(String a, String b) {    return a == b;  }}  </example></rule><rule name="PositionLiteralsFirstInComparisons" language="java" since="3.3" message="Position literals first in String comparisons" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#PositionLiteralsFirstInComparisons">  <description>Position literals first in comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false.  </description>  <priority>3</priority>  <properties>      <property name="xpath">          <value>              //PrimaryExpression[        PrimaryPrefix[Name                [	(ends-with(@Image, '.equals'))                ]        ]        [                   (../PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal[@StringLiteral='true'])	and	( count(../PrimarySuffix/Arguments/ArgumentList/Expression) = 1 )        ]][not(ancestor::Expression/ConditionalAndExpression//EqualityExpression[@Image='!=']//NullLiteral)][not(ancestor::Expression/ConditionalOrExpression//EqualityExpression[@Image='==']//NullLiteral)]                    </value>      </property>  </properties>  <example>class Foo {  boolean bar(String x) {    return x.equals("2"); // should be "2".equals(x)  }}  </example></rule><rule name="PositionLiteralsFirstInCaseInsensitiveComparisons" language="java" since="5.1" message="Position literals first in String comparisons for EqualsIgnoreCase" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#PositionLiteralsFirstInCaseInsensitiveComparisons">  <description>Position literals first in comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false.  </description>  <priority>3</priority>  <properties>      <property name="xpath">          <value>              //PrimaryExpression[        PrimaryPrefix[Name                [    (ends-with(@Image, '.equalsIgnoreCase'))                ]        ]        [                   (../PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal)    and    ( count(../PrimarySuffix/Arguments/ArgumentList/Expression) = 1 )        ]][not(ancestor::Expression/ConditionalAndExpression//EqualityExpression[@Image='!=']//NullLiteral)][not(ancestor::Expression/ConditionalOrExpression//EqualityExpression[@Image='==']//NullLiteral)]                    </value>      </property>  </properties>  <example>class Foo {  boolean bar(String x) {    return x.equalsIgnoreCase("2"); // should be "2".equalsIgnoreCase(x)  }}  </example></rule>    <rule name="UnnecessaryLocalBeforeReturn" since="3.3" message="Consider simply returning the value vs storing it in local variable ''{0}''" class="net.sourceforge.pmd.lang.java.rule.design.UnnecessaryLocalBeforeReturnRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#UnnecessaryLocalBeforeReturn">      <description>Avoid the creation of unnecessary local variables      </description>        <priority>3</priority>      <example>  public class Foo {   public int foo() {     int x = doSomething();     return x;  // instead, just 'return doSomething();'   }}        </example>    </rule>    <rule name="NonThreadSafeSingleton" since="3.4" message="Singleton is not thread safe" class="net.sourceforge.pmd.lang.java.rule.design.NonThreadSafeSingletonRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#NonThreadSafeSingleton">        <description>Non-thread safe singletons can result in bad state changes. Eliminatestatic singletons if possible by instantiating the object directly. Staticsingletons are usually not needed as only a single instance exists anyway.Other possible fixes are to synchronize the entire method or to use aninitialize-on-demand holder class (do not use the double-check idiom).See Effective Java, item 48.        </description>        <priority>3</priority>        <example>private static Foo foo = null;//multiple simultaneous callers may see partially initialized objectspublic static Foo getFoo() {    if (foo==null)        foo = new Foo();    return foo;}        </example>    </rule>    <rule name="UncommentedEmptyMethod" language="java" since="3.4" message="Document empty method" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#UncommentedEmptyMethod">      <description>Uncommented Empty Method finds instances where a method does not containstatements, but there is no comment. By explicitly commenting empty methodsit is easier to distinguish between intentional (commented) and unintentionalempty methods.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //MethodDeclaration/Block[count(BlockStatement) = 0 and @containsComment = 'false']              </value>          </property>      </properties>      <example>  public void doSomething() {}       </example>    </rule>    <rule name="UncommentedEmptyConstructor" language="java" since="3.4" message="Document empty constructor" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#UncommentedEmptyConstructor">      <description>Uncommented Empty Constructor finds instances where a constructor does notcontain statements, but there is no comment. By explicitly commenting emptyconstructors it is easier to distinguish between intentional (commented)and unintentional empty constructors.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //ConstructorDeclaration[@Private='false'][count(BlockStatement) = 0 and ($ignoreExplicitConstructorInvocation = 'true' or not(ExplicitConstructorInvocation)) and @containsComment = 'false']              </value>          </property>          <property name="ignoreExplicitConstructorInvocation" type="Boolean" description="Ignore explicit constructor invocation when deciding whether constructor is empty or not" value="false"/>      </properties>      <example>  public Foo() {  // This constructor is intentionally empty. Nothing special is needed here.}       </example>    </rule><rule name="AvoidConstantsInterface" language="java" since="3.5" message="An Interface should be used only to model a behaviour; consider converting this to a class." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#AvoidConstantsInterface">      <description>An interface should be used only to characterize the external behaviour of animplementing class: using an interface as a container of constants is a poor usage pattern and not recommended.      </description>      <priority>3</priority>      <properties>        <property name="xpath">        <value>    //ClassOrInterfaceDeclaration[@Interface="true"]    [     count(.//MethodDeclaration)=0     and     count(.//FieldDeclaration)&gt;0    ]            </value>        </property>      </properties>      <example>    public interface ConstantsInterface {   public static final int CONSTANT1=0;   public static final String CONSTANT2="1";}          </example>    </rule>  <rule name="UnsynchronizedStaticDateFormatter" since="3.6" message="Static DateFormatter objects should be accessed in a synchronized manner" class="net.sourceforge.pmd.lang.java.rule.design.UnsynchronizedStaticDateFormatterRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#UnsynchronizedStaticDateFormatter">      <description>SimpleDateFormat instances are not synchronized. Sun recommends using separate format instancesfor each thread. If multiple threads must access a static formatter, the formatter must be synchronized either on method or block level.      </description>      <priority>3</priority>      <example>    public class Foo {    private static final SimpleDateFormat sdf = new SimpleDateFormat();    void bar() {        sdf.format(); // poor, no thread-safety    }    synchronized void foo() {        sdf.format(); // preferred    }}          </example>    </rule>  <rule name="PreserveStackTrace" since="3.7" message="New exception is thrown in catch block, original stack trace may be lost" class="net.sourceforge.pmd.lang.java.rule.design.PreserveStackTraceRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#PreserveStackTrace">      <description>Throwing a new exception from a catch block without passing the original exception into thenew exception will cause the original stack trace to be lost making it difficult to debug effectively.      </description>      <priority>3</priority>      <example>    public class Foo {    void good() {        try{            Integer.parseInt("a");        } catch (Exception e) {            throw new Exception(e); // first possibility to create exception chain        }        try {            Integer.parseInt("a");        } catch (Exception e) {            throw (IllegalStateException)new IllegalStateException().initCause(e); // second possibility to create exception chain.        }    }    void bad() {        try{            Integer.parseInt("a");        } catch (Exception e) {            throw new Exception(e.getMessage());        }    }}          </example>    </rule>    <rule name="UseCollectionIsEmpty" since="3.9" message="Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()" class="net.sourceforge.pmd.lang.java.rule.design.UseCollectionIsEmptyRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#UseCollectionIsEmpty">         <description>The isEmpty() method on java.util.Collection is provided to determine if a collection has any elements.Comparing the value of size() to 0 does not convey intent as well as the isEmpty() method.      </description>      <priority>3</priority>      <example>    public class Foo {	void good() {       	List foo = getList();		if (foo.isEmpty()) {			// blah		}   	}    void bad() {   	    List foo = getList();			if (foo.size() == 0) {				// blah			}    	}}          </example>    </rule>    <rule name="ClassWithOnlyPrivateConstructorsShouldBeFinal" language="java" since="4.1" class="net.sourceforge.pmd.lang.rule.XPathRule" message="A class which only has private constructors should be final" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#ClassWithOnlyPrivateConstructorsShouldBeFinal">        <description>A class with only private constructors should be final, unless the private constructor is invoked by a inner class.        </description>        <priority>1</priority>        <properties>            <property name="xpath">                <value>TypeDeclaration[count(../TypeDeclaration) = 1]/ClassOrInterfaceDeclaration[@Final = 'false'][count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration[@Private = 'true']) &gt;= 1 ][count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration[(@Public = 'true') or (@Protected = 'true') or (@PackagePrivate = 'true')]) = 0 ][not(.//ClassOrInterfaceDeclaration)]             </value>            </property>        </properties>        <example>public class Foo {  //Should be final    private Foo() { }}     </example>    </rule>    <rule name="EmptyMethodInAbstractClassShouldBeAbstract" language="java" since="4.1" class="net.sourceforge.pmd.lang.rule.XPathRule" message="An empty method in an abstract class should be abstract instead" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#EmptyMethodInAbstractClassShouldBeAbstract">        <description>Empty methods in an abstract class should be tagged as abstract. This helps to remove their inapproprate usage by developers who should be implementing their own versions in the concrete subclasses.         </description>        <priority>1</priority>        <properties>            <property name="xpath">                <value>                                    //ClassOrInterfaceDeclaration[@Abstract = 'true']                        /ClassOrInterfaceBody                        /ClassOrInterfaceBodyDeclaration                        /MethodDeclaration[@Abstract = 'false' and @Native = 'false']                        [                            ( boolean(./Block[count(./BlockStatement) =  1]/BlockStatement/Statement/ReturnStatement/Expression/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral) = 'true' )                            or                            ( boolean(./Block[count(./BlockStatement) =  1]/BlockStatement/Statement/ReturnStatement/Expression/PrimaryExpression/PrimaryPrefix/Literal[@Image = '0']) = 'true' )                            or                            ( boolean(./Block[count(./BlockStatement) =  1]/BlockStatement/Statement/ReturnStatement/Expression/PrimaryExpression/PrimaryPrefix/Literal[string-length(@Image) = 2]) = 'true' )                            or                            (./Block[count(./BlockStatement) =  1]/BlockStatement/Statement/EmptyStatement)                            or                            ( count (./Block/*) = 0 )                        ]                             </value>            </property>        </properties>        <example>        	public abstract class ShouldBeAbstract {    public Object couldBeAbstract() {        // Should be abstract method ?        return null;    }    public void couldBeAbstract() {    }}	     	    	</example>    </rule>    <rule name="SingularField" since="3.1" message="Perhaps ''{0}'' could be replaced by a local variable." class="net.sourceforge.pmd.lang.java.rule.design.SingularFieldRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#SingularField">		<description>      		Fields whose scopes are limited to just single methods do not rely on the containingobject to provide them to other methods. They may be better implemented as local variableswithin those methods.			      </description>      <priority>3</priority>      <example>public class Foo {    private int x;  // no reason to exist at the Foo instance level    public void foo(int y) {     x = y + 5;     return x;    }}   </example>    </rule>    <rule name="ReturnEmptyArrayRatherThanNull" language="java" since="4.2" class="net.sourceforge.pmd.lang.rule.XPathRule" message="Return an empty array rather than 'null'." externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#ReturnEmptyArrayRatherThanNull">        <description>For any method that returns an array, it is a better to return an empty array rather than a null reference. This removes the need for null checking all results and avoids inadvertentNullPointerExceptions.        </description>        <priority>1</priority>        <properties>            <property name="xpath">                <value>                                            //MethodDeclaration                        [                        (./ResultType/Type[@Array='true'])                        and                        (./Block/BlockStatement/Statement/ReturnStatement/Expression/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral)                        ]                                    </value>            </property>        </properties>        <example>public class Example {    // Not a good idea...    public int[] badBehavior() {                   // ...        return null;    }    // Good behavior    public String[] bonnePratique() {      //...     return new String[0];    }}            </example>    </rule>    <rule name="AbstractClassWithoutAnyMethod" language="java" since="4.2" class="net.sourceforge.pmd.lang.rule.XPathRule" message="No abstract method which means that the keyword is most likely used to prevent instantiation. Use a private or protected constructor instead." externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#AbstractClassWithoutAnyMethod">        <description>If an abstract class does not provides any methods, it may be acting as a simple data container that is not meant to be instantiated. In this case, it is probably better to use a private or protected constructor in order to prevent instantiation than make the class misleadingly abstract.	   </description>        <priority>1</priority>        <properties>            <property name="xpath">                <value>                    //ClassOrInterfaceDeclaration[	(@Abstract = 'true')	and	(count(//MethodDeclaration) + count(//ConstructorDeclaration) = 0)]                                    </value>            </property>        </properties>        <example>            public class abstract Example {	String field;	int otherField;}                    </example>    </rule>        <rule name="TooFewBranchesForASwitchStatement" language="java" since="4.2" class="net.sourceforge.pmd.lang.rule.XPathRule" message="A switch with less than three branches is inefficient, use a 'if statement' instead." externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#TooFewBranchesForASwitchStatement">        <description>Switch statements are indended to be used to support complex branching behaviour. Using a switch for only a few cases is ill-advised, since switches are not as easy to understand as if-then statements. In these cases use theif-then statement to increase code readability.        </description>        <priority>3</priority>        <properties>            <property name="minimumNumberCaseForASwitch" type="Integer" description="Minimum number of branches for a switch" min="1" max="100" value="3"/>            <property name="xpath">                <value>                    //SwitchStatement[    (count(.//SwitchLabel) &lt; $minimumNumberCaseForASwitch)]                                    </value>            </property>        </properties>        <example>            // With a minimumNumberCaseForASwitch of 3public class Foo {    public void bar() {        switch (condition) {            case ONE:                instruction;                break;            default:                break; // not enough for a 'switch' stmt, a simple 'if' stmt would have been more appropriate        }    }}                    </example>    </rule>    	<rule name="LogicInversion" language="java" since="5.0" class="net.sourceforge.pmd.lang.rule.XPathRule" message="Use opposite operator instead of the logic complement operator." externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#LogicInversion">    <description>Use opposite operator instead of negating the whole expression with a logic complement operator.	</description>    <priority>3</priority>    <properties>       <property name="xpath">          <value>          //UnaryExpressionNotPlusMinus[@Image='!']/PrimaryExpression/PrimaryPrefix/Expression[EqualityExpression or RelationalExpression]                    </value>       </property>    </properties>    <example>    public boolean bar(int a, int b) {	if (!(a == b)) // use !=         return false;	if (!(a &lt; b)) // use &gt;=         return false;	return true;}        </example>  </rule>    <rule name="UseVarargs" language="java" minimumLanguageVersion="1.5" since="5.0" message="Consider using varargs for methods or constructors which take an array the last parameter." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#UseVarargs">        <description>Java 5 introduced the varargs parameter declaration for methods and constructors.  This syntactic sugar provides flexibility for users of these methods and constructors, allowing them to avoid having to deal with the creation of an array.</description>        <priority>4</priority>        <properties>            <property name="xpath">            	<value>//FormalParameters/FormalParameter[position()=last() and @Array='true' and @Varargs='false']					</value>            </property>        </properties>        <example>public class Foo {   public void foo(String s, Object[] args) {      // Do something here...   }   public void bar(String s, Object... args) {      // Ahh, varargs tastes much better...   }}        </example>    </rule>     <rule name="FieldDeclarationsShouldBeAtStartOfClass" language="java" since="5.0" message="Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#FieldDeclarationsShouldBeAtStartOfClass">    <description>Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.    </description>    <priority>3</priority>    <properties>      <property name="xpath">        <value>          //ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/FieldDeclaration [not(.//ClassOrInterfaceBodyDeclaration) or $ignoreAnonymousClassDeclarations = 'false'] [count(../preceding-sibling::ClassOrInterfaceBodyDeclaration/child::*[1]   [name() != 'FieldDeclaration' and name() != 'Annotation' and       (name() != 'EnumDeclaration' or $ignoreEnumDeclarations = 'false')]) &gt; 0]                  </value>      </property>      <property name="ignoreEnumDeclarations" description="Ignore Enum Declarations that precede fields." type="Boolean" value="true"/>      <property name="ignoreAnonymousClassDeclarations" description="Ignore Field Declarations, that are initialized with anonymous class declarations" type="Boolean" value="true"/>    </properties>    <example>      public class HelloWorldBean {  // Field declared before methods / inner classes - OK  private String _thing;  public String getMessage() {    return "Hello World!";  }  // Field declared after methods / inner classes - avoid this  private String _fieldInWrongLocation;}          </example>  </rule> 	     <rule name="GodClass" language="java" since="5.0" message="Possible God class" class="net.sourceforge.pmd.lang.java.rule.design.GodClassRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#GodClass">        <description>The God Class rule detects the God Class design flaw using metrics. God classes do too many things,are very big and overly complex. They should be split apart to be more object-oriented.The rule uses the detection strategy described in "Object-Oriented Metrics in Practice".The violations are reported against the entire class. See also the references:Michele Lanza and Radu Marinescu. Object-Oriented Metrics in Practice:Using Software Metrics to Characterize, Evaluate, and Improve the Designof Object-Oriented Systems. Springer, Berlin, 1 edition, October 2006. Page 80.        </description>        <priority>3</priority>    </rule>        <rule name="AvoidProtectedMethodInFinalClassNotExtending" language="java" since="5.1" message="Avoid protected methods in a final class that doesn't extend anything other than Object.  Change to private or package access." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/design.html#AvoidProtectedMethodInFinalClassNotExtending">         <description>Do not use protected methods in most final classes since they cannot be subclassed. This should only be allowed in final classes that extend other classes with protected methods (whosevisibility cannot be reduced). Clarify your intent by using private or package access modifiers instead.         </description>         <priority>3</priority>         <properties>             <property name="xpath">                 <value>//ClassOrInterfaceDeclaration[@Final='true' and not(ExtendsList)]/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/MethodDeclaration[@Protected='true'][MethodDeclarator/@Image != 'finalize']                  </value>             </property>         </properties>        <example>public final class Foo {  private int bar() {}  protected int baz() {} // Foo cannot be subclassed, and doesn't extend anything, so is baz() really private or package visible? }          </example>       </rule>    </ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Empty Code" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The Empty Code ruleset contains rules that find empty statements of any kind (empty method,empty block statement, empty try or catch block,...).  </description> <rule name="EmptyCatchBlock" language="java" since="0.1" message="Avoid empty catch blocks" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/empty.html#EmptyCatchBlock">      <description>Empty Catch Block finds instances where an exception is caught, but nothing is done.  In most circumstances, this swallows an exception which should either be acted on or reported.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //CatchStatement [count(Block/BlockStatement) = 0 and ($allowCommentedBlocks != 'true' or Block/@containsComment = 'false')] [FormalParameter/Type/ReferenceType   /ClassOrInterfaceType[@Image != 'InterruptedException' and @Image != 'CloneNotSupportedException'] ]              </value>          </property>          <property name="allowCommentedBlocks" type="Boolean" description="Empty blocks containing comments will be skipped" value="false"/>      </properties>      <example>  public void doSomething() {  try {    FileInputStream fis = new FileInputStream("/tmp/bugger");  } catch (IOException ioe) {      // not good  }}       </example>    </rule>    <rule name="EmptyIfStmt" language="java" since="0.1" message="Avoid empty 'if' statements" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/empty.html#EmptyIfStmt">      <description>Empty If Statement finds instances where a condition is checked but nothing is done about it.    </description>        <priority>3</priority>      <properties>          <property name="xpath">              <value>//IfStatement/Statement [EmptyStatement or Block[count(*) = 0]]               </value>          </property>      </properties>      <example>    public class Foo { void bar(int x) {  if (x == 0) {   // empty!  } }}        </example>    </rule>    <rule name="EmptyWhileStmt" language="java" since="0.2" message="Avoid empty 'while' statements" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/empty.html#EmptyWhileStmt">       <description>Empty While Statement finds all instances where a while statement does nothing.  If it is a timing loop, then you should use Thread.sleep() for it; if it isa while loop that does a lot in the exit expression, rewrite it to make it clearer.       </description>       <priority>3</priority>      <properties>          <property name="xpath">              <value>//WhileStatement/Statement[./Block[count(*) = 0]  or ./EmptyStatement]              </value>          </property>      </properties>       <example>  void bar(int a, int b) {	while (a == b) {	// empty!	}}        </example>    </rule>    <rule name="EmptyTryBlock" language="java" since="0.4" message="Avoid empty try blocks" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/empty.html#EmptyTryBlock">      <description>Avoid empty try blocks - what's the point?      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>//TryStatement/Block[1][count(*) = 0]              </value>          </property>      </properties>      <example>  public class Foo { public void bar() {  try {  } catch (Exception e) {    e.printStackTrace();  } }}      </example>    </rule>    <rule name="EmptyFinallyBlock" language="java" since="0.4" message="Avoid empty finally blocks" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/empty.html#EmptyFinallyBlock">      <description>Empty finally blocks serve no purpose and should be removed.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>//FinallyStatement[count(Block/BlockStatement) = 0]               </value>          </property>      </properties>      <example>  public class Foo { public void bar() {  try {    int x=2;   } finally {    // empty!   } }}       </example>    </rule>    <rule name="EmptySwitchStatements" language="java" since="1.0" message="Avoid empty switch statements" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/empty.html#EmptySwitchStatements">      <description>Empty switch statements serve no purpose and should be removed.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>//SwitchStatement[count(*) = 1]               </value>          </property>      </properties>      <example>  public void bar() {	int x = 2;	switch (x) {	// once there was code here	// but it's been commented out or something	}}      </example>      </rule>    <rule name="EmptySynchronizedBlock" language="java" since="1.3" message="Avoid empty synchronized blocks" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/empty.html#EmptySynchronizedBlock">      <description>Empty synchronized blocks serve no purpose and should be removed.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>//SynchronizedStatement/Block[1][count(*) = 0]              </value>          </property>      </properties>      <example>public class Foo { public void bar() {  synchronized (this) {   // empty!  } }}      </example>    </rule>    <rule name="EmptyStatementNotInLoop" language="java" since="1.5" message="An empty statement (semicolon) not part of a loop" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/empty.html#EmptyStatementNotInLoop">       <description>An empty statement (or a semicolon by itself) that is not used as the sole body of a 'for' or 'while' loop is probably a bug.  It could also be a double semicolon, which has no purposeand should be removed.       </description>       <priority>3</priority>        <properties>            <property name="xpath">                <value>//EmptyStatement [not(       ../../../ForStatement       or ../../../WhileStatement       or ../../../BlockStatement/ClassOrInterfaceDeclaration       or ../../../../../../ForStatement/Statement[1]        /Block[1]/BlockStatement[1]/Statement/EmptyStatement       or ../../../../../../WhileStatement/Statement[1]        /Block[1]/BlockStatement[1]/Statement/EmptyStatement) ]                </value>            </property>        </properties>       <example>public void doit() {      // this is probably not what you meant to do      ;      // the extra semicolon here this is not necessary      System.out.println("look at the extra semicolon");;}       </example>     </rule><rule name="EmptyInitializer" language="java" since="5.0" message="Empty initializer was found" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/empty.html#EmptyInitializer">       <description>Empty initializers serve no purpose and should be removed.       </description>       <priority>3</priority>         <properties>             <property name="xpath">                 <value>//Initializer/Block[count(*)=0]                 </value>             </property>         </properties>       <example>   public class Foo {   static {} // Why ?   {} // Again, why ?}        </example>  </rule>  <rule name="EmptyStatementBlock" language="java" since="5.0" message="Avoid empty block statements." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/empty.html#EmptyStatementBlock">    <description>Empty block statements serve no purpose and should be removed.	</description>    <priority>3</priority>    <properties>       <property name="xpath">          <value>          //BlockStatement/Statement/Block[count(*) = 0]                    </value>       </property>    </properties>    <example>    public class Foo {   private int _bar;   public void setBar(int bar) {      { _bar = bar; } // Why not?      {} // But remove this.   }}        </example>  </rule>    <rule name="EmptyStaticInitializer" language="java" since="1.5" message="Empty static initializer was found" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/empty.html#EmptyStaticInitializer">       <description>An empty static initializer serve no purpose and should be removed.       </description>       <priority>3</priority>         <properties>             <property name="xpath">                 <value>//Initializer[@Static='true']/Block[count(*)=0]                 </value>             </property>         </properties>       <example>   public class Foo {	static {	// empty	}}       </example>     </rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Finalizer" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>These rules deal with different problems that can occur with finalizers.  </description>    <rule name="EmptyFinalizer" language="java" since="1.5" message="Avoid empty finalize methods" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/finalizers.html#EmptyFinalizer">       <description>Empty finalize methods serve no purpose and should be removed.       </description>       <priority>3</priority>        <properties>            <property name="xpath">                <value>//MethodDeclaration[MethodDeclarator[@Image='finalize'][not(FormalParameters/*)]]  /Block[count(*)=0]                </value>            </property>        </properties>       <example>public class Foo {   protected void finalize() {}}       </example>     </rule>    <rule name="FinalizeOnlyCallsSuperFinalize" language="java" since="1.5" message="Finalize should do something besides just calling super.finalize()" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/finalizers.html#FinalizeOnlyCallsSuperFinalize">       <description>If the finalize() is implemented, it should do something besides just calling super.finalize().       </description>       <priority>3</priority>        <properties>            <property name="xpath">                <value>//MethodDeclaration[MethodDeclarator[@Image="finalize"][not(FormalParameters/*)]]   /Block[count(BlockStatement)=1]     /BlockStatement[       Statement/StatementExpression/PrimaryExpression       [./PrimaryPrefix[@SuperModifier='true']]       [./PrimarySuffix[@Image='finalize']]     ]                </value>            </property>        </properties>       <example>           protected void finalize() {	super.finalize();}                  </example>     </rule><rule name="FinalizeOverloaded" language="java" since="1.5" message="Finalize methods should not be overloaded" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/finalizers.html#FinalizeOverloaded">   <description>Methods named finalize() should not have parameters.  It is confusing and most likely an attempt tooverload Object.finalize(). It will not be called by the VM.   </description>   <priority>3</priority>    <properties>        <property name="xpath">            <value>//MethodDeclaration /MethodDeclarator[@Image='finalize'][FormalParameters[count(*)&gt;0]]            </value>        </property>    </properties>   <example>public class Foo {   // this is confusing and probably a bug   protected void finalize(int a) {   }}   </example> </rule>    <rule name="FinalizeDoesNotCallSuperFinalize" language="java" since="1.5" message="Last statement in finalize method should be a call to super.finalize()" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/finalizers.html#FinalizeDoesNotCallSuperFinalize">       <description>If the finalize() is implemented, its last action should be to call super.finalize.       </description>       <priority>3</priority>        <properties>            <property name="xpath">                <value><!-- in english: a method declaration of finalize(), with no arguments, containinga block whose last statement is NOT a call to super.finalize -->//MethodDeclaration[MethodDeclarator[@Image='finalize'][not(FormalParameters/*)]]   /Block      /BlockStatement[last()]      [not(Statement/StatementExpression/PrimaryExpression            [./PrimaryPrefix[@SuperModifier='true']]            [./PrimarySuffix[@Image='finalize']]          )      ]      [not(Statement/TryStatement/FinallyStatement       /Block/BlockStatement/Statement/StatementExpression/PrimaryExpression            [./PrimaryPrefix[@SuperModifier='true']]            [./PrimarySuffix[@Image='finalize']]          )      ]                </value>            </property>        </properties>       <example>protected void finalize() {	something();	// neglected to call super.finalize()}       </example>     </rule>    <rule name="FinalizeShouldBeProtected" language="java" since="1.1" message="If you override finalize(), make it protected" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/finalizers.html#FinalizeShouldBeProtected">      <description>When overriding the finalize(), the new method should be set as protected.  If made public, other classes may invoke it at inappropriate times.      </description>      <priority>3</priority>        <properties>            <property name="xpath">                <value>                    //MethodDeclaration[@Protected="false"]  /MethodDeclarator[@Image="finalize"]  [not(FormalParameters/*)]                                    </value>            </property>        </properties>      <example>  public void finalize() {	// do something}        </example>    </rule>    <rule name="AvoidCallingFinalize" since="3.0" message="Avoid calling finalize() explicitly" class="net.sourceforge.pmd.lang.java.rule.finalizers.AvoidCallingFinalizeRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/finalizers.html#AvoidCallingFinalize">      <description>The method Object.finalize() is called by the garbage collector on an object when garbage collection determinesthat there are no more references to the object. It should not be invoked by application logic.      </description>        <priority>3</priority>      <example>void foo() {	Bar b = new Bar();	b.finalize();}      </example>    </rule> </ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Import Statements" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>These rules deal with different problems that can occur with import statements.  </description>  <rule name="DuplicateImports" since="0.5" message="Avoid duplicate imports such as ''{0}''" class="net.sourceforge.pmd.lang.java.rule.imports.DuplicateImportsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/imports.html#DuplicateImports">    <description>Duplicate or overlapping import statements should be avoided.    </description>      <priority>4</priority>    <example>import java.lang.String;import java.lang.*;public class Foo {}    </example>    </rule>  <rule name="DontImportJavaLang" since="0.5" message="Avoid importing anything from the package 'java.lang'" class="net.sourceforge.pmd.lang.java.rule.imports.DontImportJavaLangRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/imports.html#DontImportJavaLang">    <description>Avoid importing anything from the package 'java.lang'.  These classes are automatically imported (JLS 7.5.3).    </description>      <priority>4</priority>    <example>import java.lang.String;	// this is unnecessarypublic class Foo {}// --- in another source code file...import java.lang.*;	// this is badpublic class Foo {}    </example>    </rule>  <rule name="UnusedImports" since="1.0" message="Avoid unused imports such as ''{0}''" class="net.sourceforge.pmd.lang.java.rule.imports.UnusedImportsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/imports.html#UnusedImports">    <description>Avoid the use of unused import statements to prevent unwanted dependencies.    </description>      <priority>4</priority>    <example>// this is badimport java.io.File;public class Foo {}    </example>    </rule>    <rule name="ImportFromSamePackage" since="1.02" message="No need to import a type that lives in the same package" class="net.sourceforge.pmd.lang.java.rule.imports.ImportFromSamePackageRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/imports.html#ImportFromSamePackage">     <description>There is no need to import a type that lives in the same package.     </description>        <priority>3</priority>     <example>  package foo;  import foo.Buz; // no need for this import foo.*; // or this  public class Bar{}      </example>     </rule>	<rule name="TooManyStaticImports" language="java" since="4.1" class="net.sourceforge.pmd.lang.rule.XPathRule" message="Too many static imports may lead to messy code" externalInfoUrl="${pmd.website.baseurl}/rules/java/imports.html#TooManyStaticImports">       		<description>If you overuse the static import feature, it can make your program unreadable and unmaintainable, polluting its namespace with all the static members you import. Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from (Sun 1.5 Language Guide).		 </description>			<priority>3</priority>       		<properties>	            <property name="maximumStaticImports" type="Integer" description="All static imports can be disallowed by setting this to 0" min="0" max="100" value="4"/>	            <property name="xpath">	                <value>.[count(ImportDeclaration[@Static = 'true']) &gt; $maximumStaticImports]	             </value>	            </property>	        </properties>    	 	<example>import static Lennon;import static Ringo;import static George;import static Paul;import static Yoko; // Too much !		  </example>    </rule>    	<rule name="UnnecessaryFullyQualifiedName" language="java" since="5.0" class="net.sourceforge.pmd.lang.java.rule.imports.UnnecessaryFullyQualifiedNameRule" message="Unnecessary use of fully qualified name ''{0}'' due to existing import ''{1}''" externalInfoUrl="${pmd.website.baseurl}/rules/java/imports.html#UnnecessaryFullyQualifiedName">       		<description>Import statements allow the use of non-fully qualified names.  The use of a fully qualified namewhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.		 </description>			<priority>4</priority>    	 	<example>import java.util.List;public class Foo {   private java.util.List list1; // Unnecessary FQN   private List list2; // More appropriate given import of 'java.util.List'}		  </example>    </rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="J2EE" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>Rules specific to the use of J2EE implementations.  </description>  <rule name="UseProperClassLoader" language="java" since="3.7" message="In J2EE, getClassLoader() might not work as expected.  Use Thread.currentThread().getContextClassLoader() instead." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/j2ee.html#UseProperClassLoader">   <description>In J2EE, the getClassLoader() method might not work as expected. Use Thread.currentThread().getContextClassLoader() instead.   </description>   <priority>3</priority>      <properties>          <property name="xpath">              <value>//PrimarySuffix[@Image='getClassLoader']               </value>          </property>      </properties>   <example>public class Foo { ClassLoader cl = Bar.class.getClassLoader();}  </example> </rule>    <rule name="MDBAndSessionBeanNamingConvention" language="java" since="4.0" class="net.sourceforge.pmd.lang.rule.XPathRule" message="SessionBean or MessageBean should be suffixed by Bean" externalInfoUrl="${pmd.website.baseurl}/rules/java/j2ee.html#MDBAndSessionBeanNamingConvention">        <description>The EJB Specification states that any MessageDrivenBean or SessionBean should be suffixed by 'Bean'.        </description>        <priority>4</priority>        <properties>            <property name="xpath">                <value>//TypeDeclaration/ClassOrInterfaceDeclaration[    (        (./ImplementsList/ClassOrInterfaceType[ends-with(@Image,'SessionBean')])        or        (./ImplementsList/ClassOrInterfaceType[ends-with(@Image,'MessageDrivenBean')])    )    and    not    (        ends-with(@Image,'Bean')    )]             </value>            </property>        </properties>        <example>            public class SomeBean implements SessionBean{}					// proper namepublic class MissingTheProperSuffix implements SessionBean {}  	// non-standard name                    </example>    </rule>    <rule name="RemoteSessionInterfaceNamingConvention" language="java" since="4.0" class="net.sourceforge.pmd.lang.rule.XPathRule" message="Remote Home interface of a Session EJB should be suffixed by 'Home'" externalInfoUrl="${pmd.website.baseurl}/rules/java/j2ee.html#RemoteSessionInterfaceNamingConvention">        <description>A Remote Home interface type of a Session EJB should be suffixed by 'Home'.        </description>        <priority>4</priority>        <properties>            <property name="xpath">                <value>                    //ClassOrInterfaceDeclaration[    (        (./ExtendsList/ClassOrInterfaceType[ends-with(@Image,'EJBHome')])    )    and    not    (        ends-with(@Image,'Home')    )]                                    </value>            </property>        </properties>        <example>            public interface MyBeautifulHome extends javax.ejb.EJBHome {}		// proper namepublic interface MissingProperSuffix extends javax.ejb.EJBHome {}	// non-standard name                    </example>    </rule>    <rule name="LocalInterfaceSessionNamingConvention" language="java" since="4.0" class="net.sourceforge.pmd.lang.rule.XPathRule" message="The Local Interface of a Session EJB should be suffixed by 'Local'" externalInfoUrl="${pmd.website.baseurl}/rules/java/j2ee.html#LocalInterfaceSessionNamingConvention">        <description>The Local Interface of a Session EJB should be suffixed by 'Local'.        </description>        <priority>4</priority>        <properties>            <property name="xpath">                <value>                    //ClassOrInterfaceDeclaration[    (        (./ExtendsList/ClassOrInterfaceType[ends-with(@Image,'EJBLocalObject')])    )    and    not    (        ends-with(@Image,'Local')    )]                                    </value>            </property>        </properties>        <example>             public interface MyLocal extends javax.ejb.EJBLocalObject {}				// proper name public interface MissingProperSuffix extends javax.ejb.EJBLocalObject {}	// non-standard name                    </example>    </rule>    <rule name="LocalHomeNamingConvention" language="java" since="4.0" class="net.sourceforge.pmd.lang.rule.XPathRule" message="The Local Home interface of a Session EJB should be suffixed by 'LocalHome'" externalInfoUrl="${pmd.website.baseurl}/rules/java/j2ee.html#LocalHomeNamingConvention">        <description>The Local Home interface of a Session EJB should be suffixed by 'LocalHome'.        </description>        <priority>4</priority>        <properties>            <property name="xpath">                <value>                    //ClassOrInterfaceDeclaration[    (        (./ExtendsList/ClassOrInterfaceType[ends-with(@Image,'EJBLocalHome')])    )    and    not    (        ends-with(@Image,'LocalHome')    )]                                    </value>            </property>        </properties>        <example>             public interface MyBeautifulLocalHome extends javax.ejb.EJBLocalHome {}// proper name public interface MissingProperSuffix extends javax.ejb.EJBLocalHome {}	// non-standard name                    </example>    </rule>    <rule name="RemoteInterfaceNamingConvention" language="java" since="4.0" class="net.sourceforge.pmd.lang.rule.XPathRule" message="Remote Interface of a Session EJB should NOT be suffixed" externalInfoUrl="${pmd.website.baseurl}/rules/java/j2ee.html#RemoteInterfaceNamingConvention">        <description>Remote Interface of a Session EJB should not have a suffix.        </description>        <priority>4</priority>        <properties>            <property name="xpath">                <value>                    //ClassOrInterfaceDeclaration[    (        (./ExtendsList/ClassOrInterfaceType[ends-with(@Image,'EJBObject')])    )    and    (        ends-with(@Image,'Session')        or        ends-with(@Image,'EJB')        or        ends-with(@Image,'Bean')    )]                                    </value>            </property>        </properties>        <example>             /* Poor Session suffix */ public interface BadSuffixSession extends javax.ejb.EJBObject {} /* Poor EJB suffix */ public interface BadSuffixEJB extends javax.ejb.EJBObject {} /* Poor Bean suffix */ public interface BadSuffixBean extends javax.ejb.EJBObject {}                    </example>    </rule>    <rule name="DoNotCallSystemExit" language="java" since="4.1" message="System.exit() should not be used in J2EE/JEE apps" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/j2ee.html#DoNotCallSystemExit">    	<description>Web applications should not call System.exit(), since only the web container or theapplication server should stop the JVM. This rule also checks for the equivalent call Runtime.getRuntime().exit().	</description>    	<priority>3</priority>    	<properties>    		<property name="xpath">    			<value>//Name[    starts-with(@Image,'System.exit')    or    (starts-with(@Image,'Runtime.getRuntime') and ../../PrimarySuffix[ends-with(@Image,'exit')])]    		</value>    		</property>    	</properties>    	<example>    		public void bar() {    System.exit(0);                 // never call this when running in an application server!}public void foo() {    Runtime.getRuntime().exit(0);   // never stop the JVM manually, the container will do this.}     </example>    </rule>    <rule name="StaticEJBFieldShouldBeFinal" language="java" since="4.1" message="EJB's shouldn't have non-final static fields" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/j2ee.html#StaticEJBFieldShouldBeFinal">    	<description>According to the J2EE specification, an EJB should not have any static fieldswith write access. However, static read-only fields are allowed. This ensures properbehavior especially when instances are distributed by the container on several JREs.    	</description>    	<priority>3</priority>    	<properties>    		<property name="xpath">    			<value>//ClassOrInterfaceDeclaration[    (    (./ImplementsList/ClassOrInterfaceType[ends-with(@Image,'SessionBean')])    or    (./ImplementsList/ClassOrInterfaceType[ends-with(@Image,'EJBHome')])    or    (./ImplementsList/ClassOrInterfaceType[ends-with(@Image,'EJBLocalObject')])    or    (./ImplementsList/ClassOrInterfaceType[ends-with(@Image,'EJBLocalHome')])    or    (./ExtendsList/ClassOrInterfaceType[ends-with(@Image,'EJBObject')])    )    and    (./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration[         (./FieldDeclaration[@Static = 'true'])         and         (./FieldDeclaration[@Final = 'false'])    ])]    		 </value>    		</property>    	</properties>    	<example>public class SomeEJB extends EJBObject implements EJBLocalHome {	private static int CountA;			// poor, field can be edited	private static final int CountB;	// preferred, read-only access}     </example>    </rule>	<rule name="DoNotUseThreads" language="java" since="4.1" class="net.sourceforge.pmd.lang.rule.XPathRule" message="To be compliant to J2EE, a webapp should not use any thread." externalInfoUrl="${pmd.website.baseurl}/rules/java/j2ee.html#DoNotUseThreads">        <description>            The J2EE specification explicitly forbids the use of threads.                    </description>        <priority>3</priority>        <properties>            <property name="xpath">                <value>                                            //ClassOrInterfaceType[@Image = 'Thread' or @Image = 'Runnable']                                    </value>            </property>        </properties>        <example>            	            // This is not allowedpublic class UsingThread extends Thread { }	// Neither this,public class OtherThread implements Runnable {	// Nor this ...	public void methode() {			Runnable thread = new Thread(); thread.run();	}}						</example>	</rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="JavaBeans" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The JavaBeans Ruleset catches instances of bean rules not being followed.  </description>  <rule name="BeanMembersShouldSerialize" since="1.1" message="Found non-transient, non-static member. Please mark as transient or provide accessors." class="net.sourceforge.pmd.lang.java.rule.javabeans.BeanMembersShouldSerializeRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/javabeans.html#BeanMembersShouldSerialize">    <description>If a class is a bean, or is referenced by a bean directly or indirectly it needs to be serializable. Member variables need to be marked as transient, static, or have accessor methods in the class. Marking variables as transient is the safest and easiest modification. Accessor methods should follow the Java naming conventions, i.e. for a variable named foo, getFoo() and setFoo() accessor methods should be provided.    </description>      <priority>3</priority>    <example>private transient int someFoo;  // good, it's transientprivate static int otherFoo;    // also OKprivate int moreFoo;            // OK, has proper accessors, see belowprivate int badFoo;             // bad, should be marked transientprivate void setMoreFoo(int moreFoo){      this.moreFoo = moreFoo;}private int getMoreFoo(){      return this.moreFoo;}    </example>  </rule>    <rule name="MissingSerialVersionUID" language="java" since="3.0" message="Classes implementing Serializable should set a serialVersionUID" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/javabeans.html#MissingSerialVersionUID">      <description>Serializable classes should provide a serialVersionUID field.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //ClassOrInterfaceDeclaration [  count(ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration   /FieldDeclaration/VariableDeclarator/VariableDeclaratorId[@Image='serialVersionUID']) = 0and  count(ImplementsList   [ClassOrInterfaceType/@Image='Serializable'   or ClassOrInterfaceType/@Image='java.io.Serializable']) =1and   @Abstract = 'false']              </value>          </property>      </properties>      <example>public class Foo implements java.io.Serializable { String name; // Define serialization id to avoid serialization related bugs // i.e., public static final long serialVersionUID = 4328743;}          </example>    </rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="JUnit" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>These rules deal with different problems that can occur with JUnit tests.  </description>    <rule name="JUnitStaticSuite" language="java" since="1.0" message="You have a suite() method that is not both public and static, so JUnit won't call it to get your TestSuite.  Is that what you wanted to do?" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/junit.html#JUnitStaticSuite">      <description>The suite() method in a JUnit test needs to be both public and static.      </description>      <priority>3</priority>        <properties>        <property name="xpath">            <value>                //MethodDeclaration[not(@Static='true') or not(@Public='true')][MethodDeclarator/@Image='suite'][MethodDeclarator/FormalParameters/@ParameterCount=0][ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]                            </value>        </property>        </properties>      <example>  import junit.framework.*;public class Foo extends TestCase {   public void suite() {}         // oops, should be static   private static void suite() {} // oops, should be public}        </example>      </rule>  <rule name="JUnitSpelling" language="java" since="1.0" message="You may have misspelled a JUnit framework method (setUp or tearDown)" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/junit.html#JUnitSpelling">    <description>Some JUnit framework methods are easy to misspell.    </description>    <priority>3</priority>      <properties>      <property name="xpath">          <value>              //MethodDeclarator[(not(@Image = 'setUp') and translate(@Image, 'SETuP', 'setUp') = 'setUp') or (not(@Image = 'tearDown') and translate(@Image, 'TEARdOWN', 'tearDown') = 'tearDown')] [FormalParameters[count(*) = 0]][ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]                        </value>      </property>      </properties>    <example>import junit.framework.*;public class Foo extends TestCase {   public void setup() {}    // oops, should be setUp   public void TearDown() {} // oops, should be tearDown}    </example>    </rule>    <rule name="JUnitAssertionsShouldIncludeMessage" since="1.04" message="JUnit assertions should include a message" class="net.sourceforge.pmd.lang.java.rule.junit.JUnitAssertionsShouldIncludeMessageRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/junit.html#JUnitAssertionsShouldIncludeMessage">      <description>JUnit assertions should include an informative message - i.e., use the three-argument version of assertEquals(), not the two-argument version.      </description>        <priority>3</priority>      <example>  public class Foo extends TestCase { public void testSomething() {  assertEquals("foo", "bar");  // Use the form:  // assertEquals("Foo does not equals bar", "foo", "bar");  // instead }}        </example>    </rule>    <rule name="JUnitTestsShouldIncludeAssert" since="2.0" message="JUnit tests should include assert() or fail()" class="net.sourceforge.pmd.lang.java.rule.junit.JUnitTestsShouldIncludeAssertRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/junit.html#JUnitTestsShouldIncludeAssert">        <description>JUnit tests should include at least one assertion.  This makes the tests more robust, and using assert with messages provide the developer a clearer idea of what the test does.        </description>          <priority>3</priority>        <example>    public class Foo extends TestCase {   public void testSomething() {      Bar b = findBar();   // This is better than having a NullPointerException   // assertNotNull("bar not found", b);   b.work();   }}            </example>      </rule>    <rule name="TestClassWithoutTestCases" since="3.0" message="This class name ends with 'Test' but contains no test cases" class="net.sourceforge.pmd.lang.java.rule.junit.TestClassWithoutTestCasesRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/junit.html#TestClassWithoutTestCases">      <description>Test classes end with the suffix Test. Having a non-test class with that name is not a good practice, since most people will assume it is a test case. Test classes have test methods named testXXX.      </description>        <priority>3</priority>      <example>//Consider changing the name of the class if it is not a test//Consider adding test methods if it is a testpublic class CarTest {   public static void main(String[] args) {    // do something   }   // code}      </example>    </rule>    <rule name="UnnecessaryBooleanAssertion" language="java" since="3.0" message="assertTrue(true) or similar statements are unnecessary" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/junit.html#UnnecessaryBooleanAssertion">      <description>A JUnit test assertion with a boolean literal is unnecessary since it always will evaluate to the same thing.Consider using flow control (in case of assertTrue(false) or similar) or simply removingstatements like assertTrue(true) and assertFalse(false).  If you just want a test to halt after findingan error, use the fail() method and provide an indication message of why it did.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //StatementExpression[PrimaryExpression/PrimaryPrefix/Name[@Image='assertTrue' or  @Image='assertFalse']andPrimaryExpression/PrimarySuffix/Arguments/ArgumentList/Expression[PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteralorUnaryExpressionNotPlusMinus[@Image='!']/PrimaryExpression/PrimaryPrefix[Literal/BooleanLiteral or Name[count(../../*)=1]]]][ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]              </value>          </property>      </properties>      <example>public class SimpleTest extends TestCase {	public void testX() {		assertTrue(true);		 // serves no real purpose	}}          </example>    </rule>    <rule name="UseAssertEqualsInsteadOfAssertTrue" language="java" since="3.1" message="Use assertEquals(x, y) instead of assertTrue(x.equals(y))" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/junit.html#UseAssertEqualsInsteadOfAssertTrue">      <description>This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like assertEquals.      </description>      <priority>3</priority>    <properties>        <property name="xpath">            <value>                //PrimaryExpression[    PrimaryPrefix/Name[@Image = 'assertTrue']][    PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name    [ends-with(@Image, '.equals')]][ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]             </value>        </property>    </properties>      <example>public class FooTest extends TestCase {	void testCode() {		Object a, b;		assertTrue(a.equals(b)); 					// bad usage		assertEquals(?a should equals b?, a, b);	// good usage	}}      </example>    </rule>   <rule name="UseAssertSameInsteadOfAssertTrue" language="java" since="3.1" message="Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y)" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/junit.html#UseAssertSameInsteadOfAssertTrue">      <description>This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertSame, assertNotSame.      </description>      <priority>3</priority>    <properties>        <property name="xpath">            <value>                //PrimaryExpression[    PrimaryPrefix/Name     [@Image = 'assertTrue' or @Image = 'assertFalse']][PrimarySuffix/Arguments /ArgumentList/Expression /EqualityExpression[count(.//NullLiteral) = 0]][ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]             </value>        </property>    </properties>      <example>public class FooTest extends TestCase { void testCode() {  Object a, b;  assertTrue(a == b); // bad usage  assertSame(a, b);  // good usage }}      </example>    </rule>    <rule name="UseAssertNullInsteadOfAssertTrue" language="java" since="3.5" message="Use assertNull(x) instead of assertTrue(x==null), or assertNotNull(x) vs assertFalse(x==null)" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/junit.html#UseAssertNullInsteadOfAssertTrue">       <description>This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertNull, assertNotNull.       </description>       <priority>3</priority>     <properties>         <property name="xpath">             <value>                 //PrimaryExpression[ PrimaryPrefix/Name[@Image = 'assertTrue' or @Image = 'assertFalse']][ PrimarySuffix/Arguments/ArgumentList[  Expression/EqualityExpression/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral ]][ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]               </value>         </property>     </properties>       <example>  public class FooTest extends TestCase {  void testCode() {   Object a = doSomething();   assertTrue(a==null); // bad usage   assertNull(a);  // good usage   assertTrue(a != null); // bad usage   assertNotNull(a);  // good usage  } }        </example>     </rule>    <rule name="SimplifyBooleanAssertion" language="java" since="3.6" message="assertTrue(!expr) can be replaced by assertFalse(expr)" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/junit.html#SimplifyBooleanAssertion">      <description>Avoid negation in an assertTrue or assertFalse test.For example, rephrase:   assertTrue(!expr);   as:   assertFalse(expr);      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //StatementExpression[.//Name[@Image='assertTrue' or  @Image='assertFalse']andPrimaryExpression/PrimarySuffix/Arguments/ArgumentList /Expression/UnaryExpressionNotPlusMinus[@Image='!']/PrimaryExpression/PrimaryPrefix][ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]              </value>          </property>      </properties>      <example>public class SimpleTest extends TestCase {   public void testX() {     assertTrue("not empty", !r.isEmpty()); // replace with assertFalse("not empty", r.isEmpty())     assertFalse(!r.isEmpty()); // replace with assertTrue(r.isEmpty())   }}          </example>    </rule>	<rule name="JUnitTestContainsTooManyAsserts" language="java" since="5.0" message="JUnit tests should not contain more than ${maximumAsserts} assert(s)." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/junit.html#JUnitTestContainsTooManyAsserts">		<description>JUnit tests should not contain too many asserts.  Many asserts are indicative of a complex test, for which it is harder to verify correctness.  Consider breaking the test scenario into multiple, shorter test scenarios.  Customize the maximum number of assertions used by this Rule to suit your needs.		</description>		<priority>3</priority>		<properties>            <property name="maximumAsserts" type="Integer" min="1" max="1000" description="Maximum number of Asserts in a test method" value="1"/>			<property name="xpath">				<value>//MethodDeclarator[(@Image[fn:matches(.,'^test')] or ../../Annotation/MarkerAnnotation/Name[@Image='Test']) and count(..//PrimaryPrefix/Name[@Image[fn:matches(.,'^assert')]]) &gt; $maximumAsserts]				</value>			</property>		</properties>		<example>public class MyTestCase extends TestCase {	// Ok	public void testMyCaseWithOneAssert() {		boolean myVar = false;				assertFalse("should be false", myVar);	}	// Bad, too many asserts (assuming max=1)	public void testMyCaseWithMoreAsserts() {		boolean myVar = false;				assertFalse("myVar should be false", myVar);		assertEquals("should equals false", false, myVar);	}}		</example>	</rule>	<rule name="UseAssertTrueInsteadOfAssertEquals" language="java" since="5.0" message="Use assertTrue(x)/assertFalse(x) instead of assertEquals(true, x)/assertEquals(false, x)." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/junit.html#UseAssertTrueInsteadOfAssertEquals">		<description>When asserting a value is the same as a boolean literal, use assertTrue/assertFalse, instead of assertEquals.		</description>		<priority>3</priority>		<properties>			<property name="xpath">				<value>//PrimaryExpression[PrimaryPrefix/Name[@Image = 'assertEquals']][PrimarySuffix/Arguments/ArgumentList//Expression/PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral]			</value>			</property>		</properties>		<example>public class MyTestCase extends TestCase {	public void testMyCase() {		boolean myVar = true;		// Ok		assertTrue("myVar is true", myVar);		// Bad		assertEquals("myVar is true", true, myVar);		// Bad		assertEquals("myVar is false", false, myVar);	}}		</example>	</rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Jakarta Commons Logging" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The Jakarta Commons Logging ruleset contains a collection of rules that find questionable usages of that framework.  </description>	<rule name="UseCorrectExceptionLogging" language="java" since="3.2" message="Use the correct logging statement for logging exceptions" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/logging-jakarta-commons.html#UseCorrectExceptionLogging">		<description>To make sure the full stacktrace is printed out, use the logging statement with two arguments: a String and a Throwable.        </description>        <priority>3</priority>	   	<properties>			<property name="xpath">				<value>//CatchStatement/Block/BlockStatement/Statement/StatementExpression/PrimaryExpression[PrimaryPrefix/Name[starts-with(@Image,concat(ancestor::ClassOrInterfaceDeclaration/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/FieldDeclaration[Type//ClassOrInterfaceType[@Image='Log']]/VariableDeclarator/VariableDeclaratorId/@Image, '.'))]][PrimarySuffix/Arguments[@ArgumentCount='1']][PrimarySuffix/Arguments//Name/@Image = ancestor::CatchStatement/FormalParameter/VariableDeclaratorId/@Image]         </value>			</property>		</properties>		<example>public class Main {   private static final Log _LOG = LogFactory.getLog( Main.class );   void bar() {     try {     } catch( Exception e ) {      _LOG.error( e ); //Wrong!     } catch( OtherException oe ) {      _LOG.error( oe.getMessage(), oe ); //Correct     }   }}</example>	</rule>    <rule name="ProperLogger" language="java" since="3.3" message="Logger should be defined private static final and have the correct class" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/logging-jakarta-commons.html#ProperLogger">             <description>A logger should normally be defined private static final and be associated with the correct class.Private final Log log; is also allowed for rare cases where loggers need to be passed around,with the restriction that the logger needs to be passed into the constructor.             </description>             <priority>3</priority>             <properties>             <property name="xpath">                     <value>     //ClassOrInterfaceBodyDeclaration[FieldDeclaration//ClassOrInterfaceType[@Image='Log'] and not(FieldDeclaration[@Final='true'][@Static='true'][@Private='true'][.//VariableDeclaratorId[@Image=$staticLoggerName]] //ArgumentList//ClassOrInterfaceType/@Image = ancestor::ClassOrInterfaceDeclaration/@Image) and not(FieldDeclaration[@Final='true'][@Private='true'][.//VariableDeclaratorId[@Image='log']] [count(.//VariableInitializer)=0] [ancestor::ClassOrInterfaceBody//StatementExpression[.//PrimaryExpression/descendant::*[@Image='log']][count(.//AllocationExpression)=0]] )]                          </value>             </property>                 <property name="staticLoggerName" type="String" description="Name of the static Logger variable" value="LOG"/>             </properties>             <example> public class Foo {   private static final Log LOG = LogFactory.getLog(Foo.class);	   // proper way   protected Log LOG = LogFactory.getLog(Testclass.class);			// wrong approach}             </example>     </rule>    <rule name="GuardDebugLogging" language="java" since="4.3" message="debug logging that involves string concatenation should be guarded with isDebugEnabled() checks" class="net.sourceforge.pmd.lang.java.rule.logging.GuardDebugLoggingRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/logging-jakarta-commons.html#GuardDebugLogging">        <description>            When log messages are composed by concatenating strings, the whole section should be guarded            by a isDebugEnabled() check to avoid performance and memory issues.        </description>        <priority>3</priority>        <example>            public class Test {    private static final Log __log = LogFactory.getLog(Test.class);    public void test() {        // okay:        __log.debug("log something");        // okay:        __log.debug("log something with exception", e);        // bad:        __log.debug("log something" + " and " + "concat strings");        // bad:        __log.debug("log something" + " and " + "concat strings", e);        // good:        if (__log.isDebugEnabled()) {        __log.debug("bla" + "",e );        }    }}                    </example>    </rule>   <rule name="GuardLogStatement" language="java" since="5.1.0" message="There is log block not surrounded by if" class="net.sourceforge.pmd.lang.java.rule.logging.GuardLogStatementRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/logging-jakarta-commons.html#GuardLogStatement">     <description>Whenever using a log level, one should check if the loglevel is actually enabled, orotherwise skip the associate String creation and manipulation.     </description>     <priority>2</priority>     <example>     // Add this for performance    if (log.isDebugEnabled() { ...        log.debug("log something" + " and " + "concat strings");     </example>   </rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Java Logging" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The Java Logging ruleset contains a collection of rules that find questionable usages of the logger.  </description>    <rule name="MoreThanOneLogger" since="2.0" message="Class contains more than one logger." class="net.sourceforge.pmd.lang.java.rule.logging.MoreThanOneLoggerRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/logging-java.html#MoreThanOneLogger">     <description>Normally only one logger is used in each class.     </description>        <priority>2</priority>     <example> public class Foo {    Logger log = Logger.getLogger(Foo.class.getName());    // It is very rare to see two loggers on a class, normally    // log information is multiplexed by levels    Logger log2= Logger.getLogger(Foo.class.getName());}     </example>     </rule>     <rule name="LoggerIsNotStaticFinal" language="java" since="2.0" message="The Logger variable declaration does not contain the static and final modifiers" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/logging-java.html#LoggerIsNotStaticFinal">     <description>In most cases, the Logger reference can be declared as static and final.     </description>     <priority>2</priority>     <properties>         <property name="xpath">             <value>                 //VariableDeclarator [parent::FieldDeclaration] [../Type/ReferenceType  /ClassOrInterfaceType[@Image='Logger']   and  (..[@Final='false'] or ..[@Static = 'false'] ) ]                             </value>         </property>     </properties>     <example> public class Foo{    Logger log = Logger.getLogger(Foo.class.getName());					// not recommended    static final Logger log = Logger.getLogger(Foo.class.getName());	// preferred approach}     </example>   </rule>    <rule name="SystemPrintln" language="java" since="2.1" message="{0} is used" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/logging-java.html#SystemPrintln">     <description>References to System.(out|err).print are usually intended for debugging purposes and can remain inthe codebase even in production code. By using a logger one can enable/disable this behaviour atwill (and by priority) and avoid clogging the Standard out log.     </description>     <priority>2</priority>     <properties>         <property name="xpath">             <value>                 //Name[    starts-with(@Image, 'System.out.print')    or    starts-with(@Image, 'System.err.print')    ]                             </value>         </property>     </properties>     <example> class Foo{    Logger log = Logger.getLogger(Foo.class.getName());    public void testA () {        System.out.println("Entering test");        // Better use this        log.fine("Entering test");    }}     </example>     </rule>    <rule name="AvoidPrintStackTrace" language="java" since="3.2" message="Avoid printStackTrace(); use a logger call instead." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/logging-java.html#AvoidPrintStackTrace">           <description>Avoid printStackTrace(); use a logger call instead.           </description>           <priority>3</priority>           <properties>             <property name="xpath">             <value>//PrimaryExpression [PrimaryPrefix/Name[contains(@Image,'printStackTrace')]] [PrimarySuffix[not(boolean(Arguments/ArgumentList/Expression))]]             </value>             </property>           </properties>           <example>class Foo {  void bar() {    try {     // do something    } catch (Exception e) {     e.printStackTrace();     }   }}           </example>    </rule>   <rule name="GuardLogStatementJavaUtil" language="java" since="5.1.0" message="There is log block not surrounded by if" class="net.sourceforge.pmd.lang.java.rule.logging.GuardLogStatementJavaUtilRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/logging-java.html#GuardLogStatementJavaUtil">     <description>Whenever using a log level, one should check if the loglevel is actually enabled, orotherwise skip the associate String creation and manipulation.     </description>     <priority>2</priority>     <example>  	// Add this for performance	if (log.isLoggable(Level.FINE)) { ... 	    log.fine("log something" + " and " + "concat strings");     </example>   </rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Migration" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>Contains rules about migrating from one JDK version to another.  Don't use these rules directly,rather, use a wrapper ruleset such as migrating_to_13.xml.  </description><rule name="ReplaceVectorWithList" language="java" since="3.4" message="Consider replacing this Vector with the newer java.util.List" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#ReplaceVectorWithList">  <description>Consider replacing Vector usages with the newer java.util.ArrayList if expensive thread-safe operations are not required.  </description>  <priority>3</priority>  <properties>    <property name="xpath">    <value>//Type/ReferenceType/ClassOrInterfaceType[@Image='Vector']     </value>    </property>  </properties>  <example>public class Foo { void bar() {    Vector v = new Vector(); }}  </example></rule>    <rule name="ReplaceHashtableWithMap" language="java" since="3.4" message="Consider replacing this Hashtable with the newer java.util.Map" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#ReplaceHashtableWithMap">      <description>Consider replacing Hashtable usage with the newer java.util.Map if thread safety is not required.      </description>      <priority>3</priority>      <properties>        <property name="xpath">        <value>    //Type/ReferenceType/ClassOrInterfaceType[@Image='Hashtable']             </value>        </property>      </properties>      <example>    public class Foo {	void bar() {		Hashtable h = new Hashtable();	}}          </example>    </rule>    <rule name="ReplaceEnumerationWithIterator" language="java" since="3.4" message="Consider replacing this Enumeration with the newer java.util.Iterator" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#ReplaceEnumerationWithIterator">      <description>Consider replacing Enumeration usages with the newer java.util.Iterator      </description>      <priority>3</priority>      <properties>        <property name="xpath">        <value>    //ImplementsList/ClassOrInterfaceType[@Image='Enumeration']             </value>        </property>      </properties>      <example>    public class Foo implements Enumeration {    private int x = 42;    public boolean hasMoreElements() {        return true;    }    public Object nextElement() {        return String.valueOf(i++);    }}          </example>    </rule>    <rule name="AvoidEnumAsIdentifier" language="java" since="3.4" message="Avoid using enum as an identifier; it's a reserved word in JDK 1.5" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#AvoidEnumAsIdentifier">      <description>Use of the term 'enum' will conflict with newer versions of Java since it is a reserved word.	</description>      <priority>2</priority>      <properties>          <property name="xpath">              <value>                  //VariableDeclaratorId[@Image='enum']                                </value>          </property>      </properties>      <example>  public class A {	public  class foo {		String enum = "foo";	}}        </example>    </rule>    <rule name="AvoidAssertAsIdentifier" language="java" since="3.4" message="Avoid using assert as an identifier; it became a reserved word in JDK 1.4" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#AvoidAssertAsIdentifier">      <description>Use of the term 'assert' will conflict with newer versions of Java since it is a reserved word.	</description>      <priority>2</priority>      <properties>          <property name="xpath">              <value>                  //VariableDeclaratorId[@Image='assert']                                </value>          </property>      </properties>      <example>  public class A {	public  class foo {		String assert = "foo";	}}        </example>    </rule>    <rule name="IntegerInstantiation" language="java" since="3.5" message="Avoid instantiating Integer objects. Call Integer.valueOf() instead." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#IntegerInstantiation">      <description>Calling new Integer() causes memory allocation that can be avoided by the static Integer.valueOf().It makes use of an internal cache that recycles earlier instances making it more memory efficient.	</description>      <priority>2</priority>      <properties>          <property name="xpath">              <value>                  //PrimaryPrefix /AllocationExpression  [not (ArrayDimsAndInits)   and (ClassOrInterfaceType/@Image='Integer'    or ClassOrInterfaceType/@Image='java.lang.Integer')]                                </value>          </property>      </properties>      <example>  public class Foo {	private Integer i = new Integer(0); // change to Integer i = Integer.valueOf(0);}         </example>    </rule>	<rule name="ByteInstantiation" language="java" since="4.0" message="Avoid instantiating Byte objects. Call Byte.valueOf() instead" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#ByteInstantiation">          <description>Calling new Byte() causes memory allocation that can be avoided by the static Byte.valueOf().It makes use of an internal cache that recycles earlier instances making it more memory efficient.          </description>          <priority>2</priority>      <properties>          <property name="xpath">          <value>          //PrimaryPrefix/AllocationExpression[not (ArrayDimsAndInits)and (ClassOrInterfaceType/@Image='Byte'or ClassOrInterfaceType/@Image='java.lang.Byte')]                    </value>        </property>     </properties>     <example>public class Foo {	private Byte i = new Byte(0); // change to Byte i =	Byte.valueOf(0);}     </example></rule>    <rule name="ShortInstantiation" language="java" since="4.0" message="Avoid instantiating Short objects. Call Short.valueOf() instead" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#ShortInstantiation">          <description>Calling new Short() causes memory allocation that can be avoided by the static Short.valueOf().It makes use of an internal cache that recycles earlier instances making it more memory efficient.          </description>          <priority>2</priority>          <properties>              <property name="xpath">          <value>//PrimaryPrefix/AllocationExpression[not (ArrayDimsAndInits)and (ClassOrInterfaceType/@Image='Short'or ClassOrInterfaceType/@Image='java.lang.Short')]          </value>              </property>          </properties>          <example>public class Foo {	private Short i = new Short(0); // change to Short i = Short.valueOf(0);}          </example></rule><rule name="LongInstantiation" language="java" since="4.0" message="Avoid instantiating Long objects.Call Long.valueOf() instead" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#LongInstantiation">    <description>Calling new Long() causes memory allocation that can be avoided by the static Long.valueOf().It makes use of an internal cache that recycles earlier instances making it more memory efficient.</description>    <priority>2</priority>    <properties>    <property name="xpath">    <value>//PrimaryPrefix/AllocationExpression[not (ArrayDimsAndInits)and (ClassOrInterfaceType/@Image='Long'or ClassOrInterfaceType/@Image='java.lang.Long')]    </value>    </property>    </properties>    <example>public class Foo {	private Long i = new Long(0); // change to Long i = Long.valueOf(0);}    </example>  </rule>    <rule name="JUnit4TestShouldUseBeforeAnnotation" language="java" since="4.0" message="JUnit 4 tests that set up tests should use the @Before annotation" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#JUnit4TestShouldUseBeforeAnnotation">      <description>In JUnit 3, the setUp method was used to set up all data entities required in running tests. JUnit 4 skips the setUp method and executes all methods annotated with @Before before all tests      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>//ClassOrInterfaceBodyDeclaration[MethodDeclaration/MethodDeclarator[@Image='setUp']][count(Annotation/MarkerAnnotation/Name[@Image='Before'])=0]              </value>          </property>      </properties>      <example>public class MyTest {    public void setUp() {        bad();    }}public class MyTest2 {    @Before public void setUp() {        good();    }}      </example>    </rule>    <rule name="JUnit4TestShouldUseAfterAnnotation" language="java" since="4.0" message="JUnit 4 tests that clean up tests should use the @After annotation" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#JUnit4TestShouldUseAfterAnnotation">      <description>In JUnit 3, the tearDown method was used to clean up all data entities required in running tests. JUnit 4 skips the tearDown method and executes all methods annotated with @After after running each test      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>//ClassOrInterfaceBodyDeclaration[MethodDeclaration/MethodDeclarator[@Image='tearDown']][count(Annotation/MarkerAnnotation/Name[@Image='After'])=0]              </value>          </property>      </properties>      <example>public class MyTest {    public void tearDown() {        bad();    }}public class MyTest2 {    @After public void tearDown() {        good();    }}      </example>    </rule>    <rule name="JUnit4TestShouldUseTestAnnotation" language="java" since="4.0" message="JUnit 4 tests that execute tests should use the @Test annotation" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#JUnit4TestShouldUseTestAnnotation">      <description>In JUnit 3, the framework executed all methods which started with the word test as a unit test. In JUnit 4, only methods annotated with the @Test annotation are executed.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>//ClassOrInterfaceBodyDeclaration[MethodDeclaration/MethodDeclarator[starts-with(@Image,'test')]][count(Annotation//Name[@Image='Test'])=0]              </value>          </property>      </properties>      <example>public class MyTest {    public void testBad() {        doSomething();    }	@Test    public void testGood() {        doSomething();    }}      </example>    </rule>    <rule name="JUnit4SuitesShouldUseSuiteAnnotation" language="java" since="4.0" message="JUnit 4 indicates test suites via annotations, not the suite method." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#JUnit4SuitesShouldUseSuiteAnnotation">      <description>In JUnit 3, test suites are indicated by the suite() method. In JUnit 4, suites are indicatedthrough the @RunWith(Suite.class) annotation.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>//ClassOrInterfaceBodyDeclaration[MethodDeclaration/MethodDeclarator[@Image='suite']][MethodDeclaration/ResultType/Type/ReferenceType/ClassOrInterfaceType[@Image='Test' or @Image = 'junit.framework.Test']][not(MethodDeclaration/Block//ClassOrInterfaceType[@Image='JUnit4TestAdapter'])]              </value>          </property>      </properties>      <example>public class BadExample extends TestCase{    public static Test suite(){    	return new Suite();    }}@RunWith(Suite.class)@SuiteClasses( { TestOne.class, TestTwo.class })public class GoodTest {}      </example>    </rule>        <rule name="JUnitUseExpected" since="4.0" message="In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions" class="net.sourceforge.pmd.lang.java.rule.migrating.JUnitUseExpectedRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/migrating.html#JUnitUseExpected">      <description>In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions.      </description>        <priority>3</priority>      <example>public class MyTest {	@Test    public void testBad() {        try {            doSomething();            fail("should have thrown an exception");        } catch (Exception e) {        }    }	@Test(expected=Exception.class)    public void testGood() {        doSomething();    }}      </example>    </rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Naming" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The Naming Ruleset contains rules regarding preferred usage of names and identifiers.  </description>  <rule name="ShortVariable" language="java" since="0.3" message="Avoid variables with short names like {0}" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#ShortVariable">    <description>Fields, local variables, or parameter names that are very short are not helpful to the reader.    </description>    <priority>3</priority>      <properties>          <property name="xpath">              <value>                  //VariableDeclaratorId[string-length(@Image) &lt; 3] [not(ancestor::ForInit)] [not(../../VariableDeclarator and ../../../LocalVariableDeclaration and ../../../../ForStatement)] [not((ancestor::FormalParameter) and (ancestor::TryStatement))]                                </value>          </property>      </properties>    <example>public class Something {    private int q = 15;                         // field - too short    public static void main( String as[] ) {    // formal arg - too short        int r = 20 + q;                         // local var - too short        for (int i = 0; i &lt; 10; i++) {          // not a violation (inside 'for' loop)            r += q;        }        for (Integer i : numbers) {             // not a violation (inside 'for-each' loop)            r += q;        }    }}    </example>  </rule>  <rule name="LongVariable" language="java" since="0.3" message="Avoid excessively long variable names like {0}" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#LongVariable">    <description>Fields, formal arguments, or local variable names that are too long can make the code difficult to follow.    </description>      <priority>3</priority>      <properties>          <property name="minimum" type="Integer" description="The variable length reporting threshold" min="1" max="100" value="17"/>          <property name="xpath">              <value>                  //VariableDeclaratorId[string-length(@Image) &gt; $minimum]                                </value>          </property>      </properties>    <example>public class Something {	int reallyLongIntName = -3;  			// VIOLATION - Field	public static void main( String argumentsList[] ) { // VIOLATION - Formal		int otherReallyLongName = -5; 		// VIOLATION - Local		for (int interestingIntIndex = 0;	// VIOLATION - For             interestingIntIndex &lt; 10;             interestingIntIndex ++ ) {    }}    </example>  </rule>  <rule name="ShortMethodName" language="java" since="0.3" message="Avoid using short method names" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#ShortMethodName">     <description>Method names that are very short are not helpful to the reader.     </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>                  //MethodDeclarator[string-length(@Image) &lt; 3]                                </value>          </property>      </properties>     <example>public class ShortMethod {	public void a( int i ) { // Violation	}}     </example>  </rule>    <rule name="VariableNamingConventions" since="1.2" message="{0} variable {1} should begin with {2}" class="net.sourceforge.pmd.lang.java.rule.naming.VariableNamingConventionsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#VariableNamingConventions">        <description>A variable naming conventions rule - customize this to your liking.  Currently, itchecks for final variables that should be fully capitalized and non-final variablesthat should not include underscores.        </description>        <priority>1</priority>        <example>public class Foo {   public static final int MY_NUM = 0;   public String myTest = "";   DataModule dmTest = new DataModule();}        </example>    </rule>    <rule name="MethodNamingConventions" since="1.2" message="Method name does not begin with a lower case character." class="net.sourceforge.pmd.lang.java.rule.naming.MethodNamingConventionsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#MethodNamingConventions">          <description>Method names should always begin with a lower case character, and should not contain underscores.          </description>          <priority>1</priority>          <example>public class Foo {	public void fooStuff() {	}}          </example>        </rule>    <rule name="ClassNamingConventions" since="1.2" message="Class names should begin with an uppercase character" class="net.sourceforge.pmd.lang.java.rule.naming.ClassNamingConventionsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#ClassNamingConventions">      <description>Class names should always begin with an upper case character.      </description>      <priority>1</priority>      <example>public class Foo {}      </example>    </rule>    <rule name="AbstractNaming" language="java" since="1.4" message="Abstract classes should be named 'AbstractXXX'" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#AbstractNaming">       <description>Abstract classes should be named 'AbstractXXX'.       </description>        <priority>3</priority>        <properties>            <property name="xpath">                <value>                    //ClassOrInterfaceDeclaration [@Abstract='true' and @Interface='false'] [not (starts-with(@Image,'Abstract'))]                                    </value>            </property>        </properties>       <example>public abstract class Foo { // should be AbstractFoo}       </example>    </rule>    <rule name="AvoidDollarSigns" since="1.5" message="Avoid using dollar signs in variable/method/class/interface names" class="net.sourceforge.pmd.lang.java.rule.naming.AvoidDollarSignsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#AvoidDollarSigns">       <description>Avoid using dollar signs in variable/method/class/interface names.       </description>         <priority>3</priority>       <example>   public class Fo$o {  // not a recommended name}          </example>     </rule>    <rule name="MethodWithSameNameAsEnclosingClass" since="1.5" message="Classes should not have non-constructor methods with the same name as the class" class="net.sourceforge.pmd.lang.java.rule.naming.MethodWithSameNameAsEnclosingClassRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#MethodWithSameNameAsEnclosingClass">       <description>Non-constructor methods should not have the same name as the enclosing class.       </description>        <priority>3</priority>       <example>    public class MyClass {	public MyClass() {}			// this is OK because it is a constructor		public void MyClass() {}	// this is bad because it is a method}           </example>     </rule>    <rule name="SuspiciousHashcodeMethodName" since="1.5" message="The method name and return type are suspiciously close to hashCode()" class="net.sourceforge.pmd.lang.java.rule.naming.SuspiciousHashcodeMethodNameRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#SuspiciousHashcodeMethodName">       <description>The method name and return type are suspiciously close to hashCode(), which may denote an intentionto override the hashCode() method.       </description>        <priority>3</priority>       <example>    public class Foo {	public int hashcode() {	// oops, this probably was supposed to be 'hashCode'		}}           </example>     </rule>    <rule name="SuspiciousConstantFieldName" language="java" since="2.0" message="The field name indicates a constant but its modifiers do not" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#SuspiciousConstantFieldName">       <description>Field names using all uppercase characters - Sun's Java naming conventions indicating constants - shouldbe declared as final.       </description>       <priority>3</priority>        <properties>            <property name="xpath">                <value>//ClassOrInterfaceDeclaration[@Interface='false'] /ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/FieldDeclaration  [@Final='false']  [VariableDeclarator/VariableDeclaratorId[upper-case(@Image)=@Image]]                 </value>            </property>        </properties>       <example>    public class Foo { // this is bad, since someone could accidentally // do PI = 2.71828; which is actually e // final double PI = 3.16; is ok  double PI = 3.16;}           </example>     </rule>    <rule name="SuspiciousEqualsMethodName" language="java" since="2.0" message="The method name and parameter number are suspiciously close to equals(Object)" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#SuspiciousEqualsMethodName">        <description>The method name and parameter number are suspiciously close to equals(Object), which can denote anintention to override the equals(Object) method.        </description>        <priority>2</priority>        <properties>            <property name="xpath">                <value>//MethodDeclarator[@Image = 'equals'][       (count(FormalParameters/*) = 1    and not (FormalParameters/FormalParameter/Type/ReferenceType/ClassOrInterfaceType        [@Image = 'Object' or @Image = 'java.lang.Object'])    or not (../ResultType/Type/PrimitiveType[@Image = 'boolean'])    )  or  (    count(FormalParameters/*) = 2    and ../ResultType/Type/PrimitiveType[@Image = 'boolean']    and FormalParameters//ClassOrInterfaceType[@Image = 'Object' or @Image = 'java.lang.Object']    )]| //MethodDeclarator[@Image = 'equal'][    count(FormalParameters/*) = 1    and FormalParameters/FormalParameter/Type/ReferenceType/ClassOrInterfaceType        [@Image = 'Object' or @Image = 'java.lang.Object']]                               </value>                 </property>              </properties>        <example>public class Foo {   public int equals(Object o) {     // oops, this probably was supposed to be boolean equals   }   public boolean equals(String s) {     // oops, this probably was supposed to be equals(Object)   }   public boolean equals(Object o1, Object o2) {     // oops, this probably was supposed to be equals(Object)   }}        </example>    </rule>    <rule name="AvoidFieldNameMatchingTypeName" since="3.0" message="It is somewhat confusing to have a field name matching the declaring class name" class="net.sourceforge.pmd.lang.java.rule.naming.AvoidFieldNameMatchingTypeNameRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#AvoidFieldNameMatchingTypeName">      <description>It is somewhat confusing to have a field name matching the declaring class name.This probably means that type and/or field names should be chosen more carefully.      </description>        <priority>3</priority>      <example>public class Foo extends Bar {	int foo;	// There is probably a better name that can be used}      </example>    </rule>    <rule name="AvoidFieldNameMatchingMethodName" since="3.0" message="Field {0} has the same name as a method" class="net.sourceforge.pmd.lang.java.rule.naming.AvoidFieldNameMatchingMethodNameRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#AvoidFieldNameMatchingMethodName">      <description>It can be confusing to have a field name with the same name as a method. While this is permitted, having information (field) and actions (method) is not clear naming. Developers versed in Smalltalk often prefer this approach as the methods denote accessor methods.      </description>        <priority>3</priority>      <example>public class Foo {	Object bar;	// bar is data or an action or both?	void bar() {	}}      </example>    </rule>    <rule name="NoPackage" language="java" since="3.3" message="All classes and interfaces must belong to a named package" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#NoPackage">    <description>Detects when a class or interface does not have a package definition.    </description>    <priority>3</priority>      <properties>          <property name="xpath">              <value>                  //ClassOrInterfaceDeclaration[count(preceding::PackageDeclaration) = 0]                                </value>          </property>      </properties>    <example>// no package declarationpublic class ClassInDefaultPackage {}    </example>  </rule>    <rule name="PackageCase" language="java" since="3.3" message="Package name contains upper case characters" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#PackageCase">        <description>Detects when a package definition contains uppercase characters.        </description>        <priority>3</priority>          <properties>              <property name="xpath">                  <value>                      //PackageDeclaration/Name[lower-case(@Image)!=@Image]                                        </value>              </property>          </properties>        <example>    package com.MyCompany;  // should be lowercase namepublic class SomeClass {}            </example>      </rule>    <rule name="MisleadingVariableName" language="java" since="3.4" message="Avoid naming non-fields with the prefix 'm_'" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#MisleadingVariableName">      <description>Detects when a non-field has a name starting with 'm_'.  This usually denotes a field and could be confusing.      </description>      <priority>3</priority>        <properties>            <property name="xpath">                <value>                    //VariableDeclaratorId[starts-with(@Image, 'm_')][not (../../../FieldDeclaration)]                                    </value>            </property>        </properties>      <example>  public class Foo {    private int m_foo; // OK    public void bar(String m_baz) {  // Bad      int m_boz = 42; // Bad    }}        </example>    </rule>    <rule name="BooleanGetMethodName" language="java" since="4.0" message="A 'getX()' method which returns a boolean should be named 'isX()'" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#BooleanGetMethodName">        <description>Methods that return boolean results should be named as predicate statements to denote this.I.e, 'isReady()', 'hasValues()', 'canCommit()', 'willFail()', etc.   Avoid the use of the 'get'prefix for these methods.        </description>        <priority>4</priority>        <properties>            <property name="xpath">                <value>                    //MethodDeclaration[MethodDeclarator[count(FormalParameters/FormalParameter) = 0 or $checkParameterizedMethods = 'true']                [starts-with(@Image, 'get')]andResultType/Type/PrimitiveType[@Image = 'boolean']]                </value>            </property>            <property name="checkParameterizedMethods" type="Boolean" description="Check parameterized methods" value="false"/>        </properties>        <example>            public boolean getFoo(); 	// badpublic boolean isFoo(); 	// okpublic boolean getFoo(boolean bar); // ok, unless checkParameterizedMethods=true     </example>    </rule>    <rule name="ShortClassName" language="java" since="5.0" message="Avoid short class names like {0}" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#ShortClassName">        <description>            Short Classnames with fewer than e.g. five characters are not recommended.                    </description>        <priority>4</priority>          <properties>              <property name="minimum" type="Integer" value="5" min="1" max="100" description="Number of characters that are required as a minimum for a class name."/>              <property name="xpath">                  <value>                      //ClassOrInterfaceDeclaration[string-length(@Image) &lt; $minimum]                                        </value>              </property>          </properties>        <example>    public class Foo {}            </example>      </rule>   <rule name="GenericsNaming" language="java" since="4.2.6" message="Generics names should be a one letter long and upper case." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/naming.html#GenericsNaming">        <description>Names for references to generic values should be limited to a single uppercase letter.        </description>        <priority>4</priority>        <properties>            <property name="xpath">                <value>                    //TypeDeclaration/ClassOrInterfaceDeclaration/TypeParameters/TypeParameter[  string-length(@Image) &gt; 1   or  string:upper-case(@Image) != @Image]                </value>            </property>        </properties>        <example>            public interface GenericDao&lt;E extends BaseModel, K extends Serializable&gt; extends BaseDao {   // This is ok...}public interface GenericDao&lt;E extends BaseModel, K extends Serializable&gt; {   // Also this}public interface GenericDao&lt;e extends BaseModel, K extends Serializable&gt; {   // 'e' should be an 'E'}public interface GenericDao&lt;EF extends BaseModel, K extends Serializable&gt; {   // 'EF' is not ok.}     </example>    </rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Optimization" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>These rules deal with different optimizations that generally apply to best practices.  </description>    <rule name="LocalVariableCouldBeFinal" since="2.2" message="Local variable ''{0}'' could be declared final" class="net.sourceforge.pmd.lang.java.rule.optimizations.LocalVariableCouldBeFinalRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/optimizations.html#LocalVariableCouldBeFinal">      <description>A local variable assigned only once can be declared final.      </description>        <priority>3</priority>      <example>  public class Bar {	public void foo () {		String txtA = "a"; 		// if txtA will not be assigned again it is better to do this:		final String txtB = "b";	}}        </example>      </rule>    <rule name="MethodArgumentCouldBeFinal" since="2.2" message="Parameter ''{0}'' is not assigned and could be declared final" class="net.sourceforge.pmd.lang.java.rule.optimizations.MethodArgumentCouldBeFinalRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/optimizations.html#MethodArgumentCouldBeFinal">      <description>A method argument that is never re-assigned within the method can be declared final.      </description>        <priority>3</priority>      <example>  public void foo1 (String param) {	// do stuff with param never assigning it  }public void foo2 (final String param) {	// better, do stuff with param never assigning it  }        </example>      </rule>  <rule name="AvoidInstantiatingObjectsInLoops" since="2.2" message="Avoid instantiating new objects inside loops" class="net.sourceforge.pmd.lang.java.rule.optimizations.AvoidInstantiatingObjectsInLoopsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/optimizations.html#AvoidInstantiatingObjectsInLoops">    <description>New objects created within loops should be checked to see if they can created outside them and reused.    </description>      <priority>3</priority>    <example>public class Something {	public static void main( String as[] ) {  		for (int i = 0; i &lt; 10; i++) {		    Foo f = new Foo(); // Avoid this whenever you can it's really expensive		}	}}    </example>  </rule>      <rule name="UseArrayListInsteadOfVector" language="java" since="3.0" message="Use ArrayList instead of Vector" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/optimizations.html#UseArrayListInsteadOfVector">      <description>ArrayList is a much better Collection implementation than Vector if thread-safe operation is not required.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>//CompilationUnit[count(ImportDeclaration) = 0 or count(ImportDeclaration/Name[@Image='java.util.Vector']) &gt; 0]  //AllocationExpression/ClassOrInterfaceType    [@Image='Vector' or @Image='java.util.Vector']              </value>          </property>      </properties>      <example>public class SimpleTest extends TestCase {	public void testX() {		Collection c1 = new Vector();				Collection c2 = new ArrayList();	// achieves the same with much better performance	}}          </example>    </rule>    <rule name="SimplifyStartsWith" language="java" since="3.1" message="This call to String.startsWith can be rewritten using String.charAt(0)" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/optimizations.html#SimplifyStartsWith">      <description>Since it passes in a literal of length 1, calls to (string).startsWith can be rewritten using (string).charAt(0)at the expense of some readability.      </description>      <priority>3</priority>    <properties>        <property name="xpath">            <value>//PrimaryExpression [PrimaryPrefix/Name  [ends-with(@Image, '.startsWith')]] [PrimarySuffix/Arguments/ArgumentList  /Expression/PrimaryExpression/PrimaryPrefix  /Literal   [string-length(@Image)=3]   [starts-with(@Image, '"')]   [ends-with(@Image, '"')] ]             </value>        </property>    </properties>      <example>  public class Foo {	boolean checkIt(String x) {		return x.startsWith("a");	// suboptimal	}  	boolean fasterCheckIt(String x) {		return x.charAt(0) == 'a';	//	faster approach	}}      </example>    </rule>    <rule name="UseStringBufferForStringAppends" since="3.1" message="Prefer StringBuffer over += for concatenating strings" class="net.sourceforge.pmd.lang.java.rule.optimizations.UseStringBufferForStringAppendsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/optimizations.html#UseStringBufferForStringAppends">           <description>The use of the '+=' operator for appending strings causes the JVM to create and use an internal StringBuffer.If a non-trivial number of these concatenations are being used then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.           </description>            <priority>3</priority>           <example>      public class Foo {  void bar() {    String a;    a = "foo";    a += " bar";   // better would be:   // StringBuilder a = new StringBuilder("foo");   // a.append(" bar);  }}                 </example>        </rule>  <rule name="UseArraysAsList" language="java" since="3.5" message="Use asList instead of tight loops" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/optimizations.html#UseArraysAsList">     <description>The java.util.Arrays class has a "asList" method that should be used when you want to create a new List froman array of objects. It is faster than executing a loop to copy all the elements of the array one by one.     </description>     <priority>3</priority>     <properties>       <property name="xpath">       <value>   //Statement[    (ForStatement) and (ForStatement//VariableInitializer//Literal[@IntLiteral='true' and @Image='0']) and (count(.//IfStatement)=0)   ]   //StatementExpression[    PrimaryExpression/PrimaryPrefix/Name[     substring-before(@Image,'.add') = ancestor::MethodDeclaration//LocalVariableDeclaration[      ./Type//ClassOrInterfaceType[       @Image = 'Collection' or        @Image = 'List' or @Image='ArrayList'      ]     ]     /VariableDeclarator/VariableDeclaratorId[      count(..//AllocationExpression/ClassOrInterfaceType[       @Image="ArrayList"      ]      )=1     ]/@Image    ]   and   PrimaryExpression/PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name   [     @Image = ancestor::MethodDeclaration//LocalVariableDeclaration[@Array="true"]/VariableDeclarator/VariableDeclaratorId/@Image     or     @Image = ancestor::MethodDeclaration//FormalParameter/VariableDeclaratorId/@Image   ]   /../..[count(.//PrimarySuffix)   =1]/PrimarySuffix/Expression/PrimaryExpression/PrimaryPrefix   /Name   ]          </value>       </property>     </properties>     <example>   public class Test {  public void foo(Integer[] ints) {    // could just use Arrays.asList(ints)     List l= new ArrayList(10);     for (int i=0; i&lt; 100; i++) {       l.add(ints[i]);     }     for (int i=0; i&lt; 100; i++) {       l.add(a[i].toString()); // won't trigger the rule     }  }}        </example>   </rule>    <rule name="AvoidArrayLoops" language="java" since="3.5" message="System.arraycopy is more efficient" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/optimizations.html#AvoidArrayLoops">      <description>Instead of manually copying data between two arrays, use the efficient System.arraycopy method instead.      </description>      <priority>3</priority>      <properties>        <property name="xpath">        <value>    //Statement[(ForStatement or WhileStatement) andcount(*//AssignmentOperator[@Image = '='])=1and*/Statement[./Block/BlockStatement/Statement/StatementExpression/PrimaryExpression/PrimaryPrefix/Name/../../PrimarySuffix/Expression[(PrimaryExpression or AdditiveExpression) and count(.//PrimaryPrefix/Name)=1]//PrimaryPrefix/Name/@Imageand./Block/BlockStatement/Statement/StatementExpression/Expression/PrimaryExpression/PrimaryPrefix/Name/../../PrimarySuffix[count(..//PrimarySuffix)=1]/Expression[(PrimaryExpressionor AdditiveExpression) and count(.//PrimaryPrefix/Name)=1]//PrimaryPrefix/Name/@Image]]            </value>        </property>      </properties>      <example>    public class Test {  public void bar() {    int[] a = new int[10];    int[] b = new int[10];    for (int i=0;i&lt;10;i++) {      b[i]=a[i];    }  }}     // this will trigger the rule     for (int i=0;i&lt;10;i++) {       b[i]=a[c[i]];     }  }}          </example>    </rule>    <rule name="UnnecessaryWrapperObjectCreation" since="3.8" message="Unnecessary wrapper object creation" class="net.sourceforge.pmd.lang.java.rule.optimizations.UnnecessaryWrapperObjectCreationRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/optimizations.html#UnnecessaryWrapperObjectCreation">      <description>Most wrapper classes provide static conversion methods that avoid the need to create intermediate objectsjust to create the primitive forms. Using these avoids the cost of creating objects that also need to be garbage-collected later.      </description>      <priority>3</priority>      <example>public int convert(String s) {  int i, i2;  i = Integer.valueOf(s).intValue(); // this wastes an object  i = Integer.parseInt(s); 			 // this is better  i2 = Integer.valueOf(i).intValue(); // this wastes an object  i2 = i; // this is better  String s3 = Integer.valueOf(i2).toString(); // this wastes an object  s3 = Integer.toString(i2); 		// this is better  return i2;}          </example>    </rule>    <rule name="AddEmptyString" language="java" since="4.0" message="Do not add empty strings" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/optimizations.html#AddEmptyString">        <description>The conversion of literals to strings by concatenating them with empty strings is inefficient.It is much better to use one of the type-specific toString() methods instead.        </description>        <priority>3</priority>        <properties>            <property name="xpath">                <value>                     //AdditiveExpression/PrimaryExpression/PrimaryPrefix/Literal[@Image='""']                                </value>            </property>        </properties>        <example>             String s = "" + 123; 				// inefficient String t = Integer.toString(456); 	// preferred approach                    </example>    </rule>	<rule name="RedundantFieldInitializer" language="java" since="5.0" message="Avoid using redundant field initializer for ''${variableName}''" class="net.sourceforge.pmd.lang.java.rule.optimizations.RedundantFieldInitializerRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/optimizations.html#RedundantFieldInitializer">		<description>Java will initialize fields with known default values so any explicit initialization of those same defaultsis redundant and results in a larger class file (approximately three additional bytecode instructions per field).		</description>              <priority>3</priority>              <example>              public class C {	boolean b	= false;	// examples of redundant initializers	byte by		= 0;	short s		= 0;	char c		= 0;	int i		= 0;	long l		= 0;		float f		= .0f;    // all possible float literals	doable d	= 0d;     // all possible double literals	Object o	= null;		MyClass mca[] = null;	int i1 = 0, ia1[] = null;		class Nested {		boolean b = false;	}}                            </example>            </rule>	<rule name="PrematureDeclaration" language="java" since="5.0" message="Avoid declaring a variable if it is unreferenced before a possible exit point." class="net.sourceforge.pmd.lang.java.rule.optimizations.PrematureDeclarationRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/optimizations.html#PrematureDeclaration">		<description>Checks for variables that are defined before they might be used. A reference is deemed to be premature if it is created right before a block of code that doesn't use it that also has the ability to return or throw an exception.		</description>              <priority>3</priority>              <example>              public int getLength(String[] strings) {    int length = 0;	// declared prematurely  if (strings == null || strings.length == 0) return 0;    for (String str : strings) {    length += str.length();    }  return length;}                            </example>            </rule>    <!--    other optimization should be like avoiding    "" + int    or "" + (int) i    and String.valueOf(int)        and using Integer.toString(int)    IntegerToStringShouldBeUsed    LongToStringShouldBeUsed    BooleanToStringShouldBeUsed        --></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Strict Exceptions" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>These rules provide some strict guidelines about throwing and catching exceptions.  </description>   <rule name="AvoidCatchingThrowable" since="1.2" message="A catch statement should never catch throwable since it includes errors." class="net.sourceforge.pmd.lang.java.rule.strictexception.AvoidCatchingThrowableRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strictexception.html#AvoidCatchingThrowable">      <description>Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as OutOfMemoryError that should be exposed and managed separately.      </description>      <priority>3</priority>      <example>	public void bar() {	try {     // do something    } catch (Throwable th) {  // should not catch Throwable		th.printStackTrace();    }  }	      </example>    </rule>   <rule name="SignatureDeclareThrowsException" since="1.2" message="A method/constructor shouldn't explicitly throw java.lang.Exception" class="net.sourceforge.pmd.lang.java.rule.strictexception.SignatureDeclareThrowsExceptionRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strictexception.html#SignatureDeclareThrowsException">      <description>Methods that declare the generic Exception as a possible throwable are not very helpful since theirfailure modes are unclear. Use a class derived from RuntimeException or a more specific checked exception.      </description>      <priority>3</priority>      <example>                public void foo() throws Exception {}                      </example>    </rule>    <rule name="ExceptionAsFlowControl" since="1.8" message="Avoid using exceptions as flow control." class="net.sourceforge.pmd.lang.java.rule.strictexception.ExceptionAsFlowControlRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strictexception.html#ExceptionAsFlowControl">      <description>Using Exceptions as form of flow control is not recommended as they obscure true exceptions when debugging.Either add the necessary validation or use an alternate control structure.      </description>        <priority>3</priority>      <example>  public void bar() {    try {      try {      } catch (Exception e) {        throw new WrapperException(e);       // this is essentially a GOTO to the WrapperException catch block       }     } catch (WrapperException e) {     // do some more stuff    }  }        </example>    </rule><rule name="AvoidCatchingNPE" language="java" since="1.8" message="Avoid catching NullPointerException; consider removing the cause of the NPE." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strictexception.html#AvoidCatchingNPE">    <description>Code should never throw NullPointerExceptions under normal circumstances.  A catch block may hide the original error, causing other, more subtle problems later on.    </description>    <priority>3</priority>    <properties>      <property name="xpath">        <value>            //CatchStatement/FormalParameter/Type /ReferenceType/ClassOrInterfaceType[@Image='NullPointerException']         </value>      </property>    </properties>    <example>  public class Foo {  void bar() {    try {      // do something      }  catch (NullPointerException npe) {    }  }}    </example>  </rule>  <rule name="AvoidThrowingRawExceptionTypes" language="java" since="1.8" message="Avoid throwing raw exception types." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strictexception.html#AvoidThrowingRawExceptionTypes">    <description>Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable,Exception, or Error, use a subclassed exception or error instead.    </description>    <priority>1</priority>    <properties>      <property name="xpath">        <value>            //AllocationExpression /ClassOrInterfaceType[ (@Image='Throwable' and count(//ImportDeclaration/Name[ends-with(@Image,'Throwable')]) = 0)or (@Image='Exception' and count(//ImportDeclaration/Name[ends-with(@Image,'Exception')]) = 0)or (@Image='Error'  and count(//ImportDeclaration/Name[ends-with(@Image,'Error')]) = 0)or( @Image='RuntimeException'  and count(//ImportDeclaration/Name[ends-with(@Image,'RuntimeException')]) = 0)]         </value>      </property>    </properties>    <example>      public class Foo {  public void bar() throws Exception {    throw new Exception();   }}    </example>  </rule>    <rule name="AvoidThrowingNullPointerException" language="java" since="1.8" message="Avoid throwing null pointer exceptions." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strictexception.html#AvoidThrowingNullPointerException">      <description>Avoid throwing NullPointerExceptions. These are confusing because most people will assume that thevirtual machine threw it. Consider using an IllegalArgumentException instead; this will beclearly seen as a programmer-initiated exception.      </description>      <priority>1</priority>      <properties>        <property name="xpath">          <value>              //AllocationExpression/ClassOrInterfaceType[@Image='NullPointerException']             </value>        </property>      </properties>      <example>        public class Foo {  void bar() {    throw new NullPointerException();  }}        </example>    </rule>  <rule name="AvoidRethrowingException" language="java" since="3.8" message="A catch statement that catches an exception only to rethrow it should be avoided." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strictexception.html#AvoidRethrowingException">    <description>Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.    </description>    <priority>3</priority>    <properties>        <property name="xpath">            <value>                //CatchStatement[FormalParameter /VariableDeclaratorId/@Image = Block/BlockStatement/Statement /ThrowStatement/Expression/PrimaryExpression[count(PrimarySuffix)=0]/PrimaryPrefix/Name/@Image and count(Block/BlockStatement/Statement) =1]             </value>        </property>    </properties>    <example>  public void bar() {    try {    // do something    }  catch (SomeException se) {       throw se;    }}      </example>  </rule>  <rule name="DoNotExtendJavaLangError" language="java" since="4.0" message="Exceptions should not extend java.lang.Error" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strictexception.html#DoNotExtendJavaLangError">    <description>      Errors are system exceptions. Do not extend them.          </description>    <priority>3</priority>    <properties>      <property name="xpath">        <value>          //ClassOrInterfaceDeclaration/ExtendsList/ClassOrInterfaceType  [@Image="Error" or @Image="java.lang.Error"]                  </value>      </property>    </properties>    <example>public class Foo extends Error { }    </example>  </rule>	<rule name="DoNotThrowExceptionInFinally" language="java" since="4.2" message="A throw statement in a finally block makes the control flow hard to understand." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strictexception.html#DoNotThrowExceptionInFinally">    	<description>			Throwing exceptions within a 'finally' block is confusing since they may mask other exceptions or code defects.Note: This is a PMD implementation of the Lint4j rule "A throw in a finally block"					</description>    	<priority>4</priority>    	<properties>			<property name="xpath">			  <value>			    //FinallyStatement[descendant::ThrowStatement]			          			  </value>			</property>		</properties>    	<example>    		public class Foo {	public void bar() {		try {			// Here do some stuff		} catch( Exception e) {			// Handling the issue		} finally {			// is this really a good idea ?			throw new Exception();		}	}}	    	    	</example>    </rule>  <rule name="AvoidThrowingNewInstanceOfSameException" since="4.2.5" language="java" message="A catch statement that catches an exception only to wrap it in a new instance of the same type of exception and throw it should be avoided" externalInfoUrl="${pmd.website.baseurl}/rules/java/strictexception.html#AvoidThrowingNewInstanceOfSameException" class="net.sourceforge.pmd.lang.rule.XPathRule">    <description>Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add tocode size and runtime complexity.    </description>    <priority>3</priority>    <properties>    <property name="xpath">      <value>        //CatchStatement[  count(Block/BlockStatement/Statement) = 1  and  FormalParameter/Type/ReferenceType/ClassOrInterfaceType/@Image = Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/ClassOrInterfaceType/@Image  and  count(Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/Arguments/ArgumentList/Expression) = 1  and  FormalParameter/VariableDeclaratorId = Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name  ]       </value>    </property>    </properties>        <example>  public void bar() {      try {       // do something      }  catch (SomeException se) {         // harmless comment                 throw new SomeException(se);      }}      </example>  </rule>  <rule name="AvoidCatchingGenericException" since="4.2.6" language="java" message="Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block" externalInfoUrl="${pmd.website.baseurl}/rules/java/strictexception.html#AvoidCatchingGenericException" class="net.sourceforge.pmd.lang.rule.XPathRule">    <description>Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block    </description>    <priority>3</priority>    <properties>      <property name="xpath">      <value>              //CatchStatement/FormalParameter/Type/ReferenceType/ClassOrInterfaceType[          @Image='NullPointerException' or          @Image='Exception' or          @Image='RuntimeException']            </value>      </property>    </properties>    <example>    package com.igate.primitive;    public class PrimitiveType {      public void downCastPrimitiveType() {    try {      System.out.println(" i [" + i + "]");    } catch(Exception e) {      e.printStackTrace();    } catch(RuntimeException e) {      e.printStackTrace();    } catch(NullPointerException e) {      e.printStackTrace();    }  } }        </example>  </rule>	<rule name="AvoidLosingExceptionInformation" since="4.2.6" language="java" message="Avoid statements in a catch block that invoke accessors on the exception without using the information" externalInfoUrl="${pmd.website.baseurl}/rules/java/strictexception.html#AvoidLosingExceptionInformation" class="net.sourceforge.pmd.lang.rule.XPathRule">		<description>Statements in a catch block that invoke accessors on the exception without using the informationonly add to code size.  Either remove the invocation, or use the return result.		</description>		<priority>2</priority>		<properties>			<property name="xpath">				<value>//CatchStatement/Block/BlockStatement/Statement/StatementExpression/PrimaryExpression/PrimaryPrefix/Name[   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getMessage')   or   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getLocalizedMessage')   or   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getCause')   or   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getStackTrace')   or   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.toString')]				</value>			</property>		</properties>		<example>public void bar() {	try {		// do something	} catch (SomeException se) {		se.getMessage();	}}		</example>	</rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="String and StringBuffer" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>These rules deal with different issues that can arise with manipulation of the String, StringBuffer, or StringBuilder instances.  </description>    <rule name="AvoidDuplicateLiterals" since="1.0" message="The String literal {0} appears {1} times in this file; the first occurrence is on line {2}" class="net.sourceforge.pmd.lang.java.rule.strings.AvoidDuplicateLiteralsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#AvoidDuplicateLiterals">    <description>Code containing duplicate String literals can usually be improved by declaring the String as a constant field.    </description>        <priority>3</priority>    <example>private void bar() {     buz("Howdy");     buz("Howdy");     buz("Howdy");     buz("Howdy"); } private void buz(String x) {}    </example>  </rule>    <rule name="StringInstantiation" since="1.0" message="Avoid instantiating String objects; this is usually unnecessary." class="net.sourceforge.pmd.lang.java.rule.strings.StringInstantiationRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#StringInstantiation">    <description>Avoid instantiating String objects; this is usually unnecessary since they are immutable and can be safely shared.    </description>       <priority>2</priority>    <example>private String bar = new String("bar"); // just do a String bar = "bar";    </example>    </rule>   <rule name="StringToString" since="1.0" message="Avoid calling toString() on String objects; this is unnecessary." class="net.sourceforge.pmd.lang.java.rule.strings.StringToStringRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#StringToString">    <description>Avoid calling toString() on objects already known to be string instances; this is unnecessary.    </description>       <priority>3</priority>    <example>private String baz() {    String bar = "howdy";    return bar.toString();}    </example>    </rule>    <rule name="InefficientStringBuffering" since="3.4" message="Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append()." class="net.sourceforge.pmd.lang.java.rule.strings.InefficientStringBufferingRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#InefficientStringBuffering">    <description>Avoid concatenating non-literals in a StringBuffer constructor or append() since intermediate buffers willneed to be be created and destroyed by the JVM.    </description>       <priority>3</priority>    <example>    // Avoid this, two buffers are actually being created hereStringBuffer sb = new StringBuffer("tmp = "+System.getProperty("java.io.tmpdir"));        // do this insteadStringBuffer sb = new StringBuffer("tmp = ");sb.append(System.getProperty("java.io.tmpdir"));    </example>    </rule>    <rule name="UnnecessaryCaseChange" since="3.3" message="Using equalsIgnoreCase() is cleaner than using toUpperCase/toLowerCase().equals()." class="net.sourceforge.pmd.lang.java.rule.strings.UnnecessaryCaseChangeRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#UnnecessaryCaseChange">       <description>Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()       </description>       <priority>3</priority>       <example>       boolean answer1 = buz.toUpperCase().equals("baz");	 		// should be buz.equalsIgnoreCase("baz")    boolean answer2 = buz.toUpperCase().equalsIgnoreCase("baz");	 // another unnecessary toUpperCase()        </example>     </rule>    <rule name="UseStringBufferLength" since="3.4" message="This is an inefficient use of StringBuffer.toString; call StringBuffer.length instead." class="net.sourceforge.pmd.lang.java.rule.strings.UseStringBufferLengthRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#UseStringBufferLength">      <description>Use StringBuffer.length() to determine StringBuffer length rather than using StringBuffer.toString().equals("")or StringBuffer.toString().length() == ...      </description>      <priority>3</priority>      <example>  StringBuffer sb = new StringBuffer();    if (sb.toString().equals("")) {}	    // inefficient     if (sb.length() == 0) {}	    		// preferred        </example>    </rule>    <rule name="AppendCharacterWithChar" since="3.5" message="Avoid appending characters as strings in StringBuffer.append." class="net.sourceforge.pmd.lang.java.rule.strings.AppendCharacterWithCharRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#AppendCharacterWithChar">    <description>Avoid concatenating characters as strings in StringBuffer/StringBuilder.append methods.    </description>       <priority>3</priority>    <example>StringBuffer sb = new StringBuffer();sb.append("a");		 // avoid thisStringBuffer sb = new StringBuffer();sb.append('a');		// use this instead    </example>    </rule><rule name="ConsecutiveAppendsShouldReuse" language="java" since="5.1" message="StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable." class="net.sourceforge.pmd.lang.java.rule.strings.ConsecutiveAppendsShouldReuseRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#ConsecutiveAppendsShouldReuse">    <description>Consecutively calls to StringBuffer/StringBuilder .append should reuse the target object. This can improve the performance.    </description>    <priority>3</priority>    <example>String foo = " ";StringBuffer buf = new StringBuffer();buf.append("Hello"); // poorbuf.append(foo);buf.append("World");StringBuffer buf = new StringBuffer();buf.append("Hello").append(foo).append("World"); // good    </example>  </rule>        <rule name="ConsecutiveLiteralAppends" since="3.5" message="StringBuffer (or StringBuilder).append is called {0} consecutive times with literal Strings. Use a single append with a single combined String." class="net.sourceforge.pmd.lang.java.rule.strings.ConsecutiveLiteralAppendsRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#ConsecutiveLiteralAppends">    <description>Consecutively calling StringBuffer/StringBuilder.append with String literals    </description>        <priority>3</priority>    <example>StringBuffer buf = new StringBuffer();buf.append("Hello").append(" ").append("World"); // poorbuf.append("Hello World");        				 // good    </example>  </rule>    <rule name="UseIndexOfChar" since="3.5" message="String.indexOf(char) is faster than String.indexOf(String)." class="net.sourceforge.pmd.lang.java.rule.strings.UseIndexOfCharRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#UseIndexOfChar">    <description>Use String.indexOf(char) when checking for the index of a single character; it executes faster.    </description>       <priority>3</priority>    <example>String s = "hello world";  // avoid thisif (s.indexOf("d") {}  // instead do thisif (s.indexOf('d') {}    </example>    </rule>    <rule name="InefficientEmptyStringCheck" since="3.6" message="String.trim().length()==0 is an inefficient way to validate an empty String." class="net.sourceforge.pmd.lang.java.rule.strings.InefficientEmptyStringCheckRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#InefficientEmptyStringCheck">    <description>String.trim().length() is an inefficient way to check if a String is really empty, as itcreates a new String object just to check its size. Consider creating a static function thatloops through a string, checking Character.isWhitespace() on each character and returningfalse if a non-whitespace character is found.    </description>       <priority>3</priority>    <example>public void bar(String string) {	if (string != null &amp;&amp; string.trim().size() &gt; 0) {		doSomething();	}}    </example>    </rule>    <rule name="InsufficientStringBufferDeclaration" since="3.6" message="StringBuffer constructor is initialized with size {0}, but has at least {1} characters appended." class="net.sourceforge.pmd.lang.java.rule.strings.InsufficientStringBufferDeclarationRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#InsufficientStringBufferDeclaration">    <description>Failing to pre-size a StringBuffer or StringBuilder properly could cause it to re-size many timesduring runtime. This rule attempts to determine the total number the characters that are actually passed into StringBuffer.append(), but represents a best guess "worst case" scenario. An emptyStringBuffer/StringBuilder constructor initializes the object to 16 characters. This defaultis assumed if the length of the constructor can not be determined.    </description>       <priority>3</priority>    <example>StringBuffer bad = new StringBuffer();bad.append("This is a long string that will exceed the default 16 characters");        StringBuffer good = new StringBuffer(41);good.append("This is a long string, which is pre-sized");    </example>    </rule>    <rule name="UselessStringValueOf" since="3.8" message="No need to call String.valueOf to append to a string." class="net.sourceforge.pmd.lang.java.rule.strings.UselessStringValueOfRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#UselessStringValueOf">      <description>No need to call String.valueOf to append to a string; just use the valueOf() argument directly.      </description>        <priority>3</priority>      <example>public String convert(int i) {	String s;	s = "a" + String.valueOf(i);	// not required	s = "a" + i; 					// preferred approach	return s;}          </example>    </rule><rule name="StringBufferInstantiationWithChar" language="java" since="3.9" message="Do not instantiate a StringBuffer or StringBuilder with a char" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#StringBufferInstantiationWithChar">    <description>Individual character values provided as initialization arguments will be converted into integers.This can lead to internal buffer sizes that are larger than expected. Some examples:new StringBuffer() 		//  16new StringBuffer(6)		//  6new StringBuffer("hello world")  // 11 + 16 = 27new StringBuffer('A')	//  chr(A) = 65new StringBuffer("A")   //  1 + 16 = 17 new StringBuilder() 		//  16new StringBuilder(6)		//  6new StringBuilder("hello world")  // 11 + 16 = 27new StringBuilder('C')	 //  chr(C) = 67new StringBuilder("A")   //  1 + 16 = 17    </description>    <priority>4</priority>    <properties>        <property name="xpath">            <value>//AllocationExpression/ClassOrInterfaceType[@Image='StringBuffer' or @Image='StringBuilder']/../Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal  [starts-with(@Image, "'")]  [ends-with(@Image, "'")]            </value>        </property>    </properties>    <example>	// misleading instantiation, these buffers	// are actually sized to 99 characters longStringBuffer  sb1 = new StringBuffer('c');   StringBuilder sb2 = new StringBuilder('c');  // in these forms, just single characters are allocatedStringBuffer  sb3 = new StringBuffer("c");StringBuilder sb4 = new StringBuilder("c");    </example>    </rule><rule name="UseEqualsToCompareStrings" language="java" since="4.1" message="Use equals() to compare strings instead of ''=='' or ''!=''" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#UseEqualsToCompareStrings">    <description>Using '==' or '!=' to compare strings only works if intern version is used on both sides.Use the equals() method instead.    </description>    <priority>3</priority>    <properties>        <property name="xpath">            <value>//EqualityExpression/PrimaryExpression[(PrimaryPrefix/Literal   [starts-with(@Image, '"')]   [ends-with(@Image, '"')]and count(PrimarySuffix) = 0)]            </value>        </property>    </properties>    <example>public boolean test(String s) {    if (s == "one") return true; 		// unreliable    if ("two".equals(s)) return true; 	// better    return false;}    </example>    </rule>	<rule name="AvoidStringBufferField" language="java" since="4.2" message="StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time)." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/strings.html#AvoidStringBufferField">    <description>		StringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaksif held within objects with long lifetimes.		    </description>    <priority>3</priority>    <properties>        <property name="xpath">            <value>//FieldDeclaration/Type/ReferenceType/ClassOrInterfaceType[@Image = 'StringBuffer' or @Image = 'StringBuilder']			</value>		</property>		</properties>    	<example>public class Foo {	private StringBuffer buffer;	// potential memory leak as an instance variable;}		</example>	</rule></ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Security Code Guidelines" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>These rules check the security guidelines from Sun, published at http://java.sun.com/security/seccodeguide.html#gcg  </description>    <rule name="MethodReturnsInternalArray" since="2.2" message="Returning ''{0}'' may expose an internal array." class="net.sourceforge.pmd.lang.java.rule.sunsecure.MethodReturnsInternalArrayRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/sunsecure.html#MethodReturnsInternalArray">      <description>Exposing internal arrays to the caller violates object encapsulation since elements can be removed or replaced outside of the object that owns it. It is safer to return a copy of the array.      </description>        <priority>3</priority>      <example>  public class SecureSystem {  UserData [] ud;  public UserData [] getUserData() {      // Don't return directly the internal array, return a copy      return ud;  }}        </example>      </rule>    <rule name="ArrayIsStoredDirectly" since="2.2" message="The user-supplied array ''{0}'' is stored directly." class="net.sourceforge.pmd.lang.java.rule.sunsecure.ArrayIsStoredDirectlyRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/sunsecure.html#ArrayIsStoredDirectly">      <description>Constructors and methods receiving arrays should clone objects and store the copy.This prevents future changes from the user from affecting the original array.      </description>        <priority>3</priority>      <example>  public class Foo {  private String [] x;    public void foo (String [] param) {      // Don't do this, make a copy of the array at least      this.x=param;    }}        </example>      </rule>    </ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Type Resolution" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>These are rules which resolve java Class files for comparison, as opposed to a String  </description>    <rule name="LooseCoupling" since="3.9" message="Avoid using implementation types like ''{0}''; use the interface instead" class="net.sourceforge.pmd.lang.java.typeresolution.rules.LooseCoupling" typeResolution="true" externalInfoUrl="${pmd.website.baseurl}/rules/java/typeresolution.html#LooseCoupling">      <description>Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead      </description>        <priority>3</priority>      <example>import java.util.ArrayList;import java.util.HashSet;public class Bar {		// Use List instead	private ArrayList list = new ArrayList();		// Use Set instead	public HashSet getFoo() {    return new HashSet();  }}        </example>    </rule>    <rule name="CloneMethodMustImplementCloneable" since="3.9" message="clone() method should be implemented only if implementing Cloneable interface" class="net.sourceforge.pmd.lang.java.typeresolution.rules.CloneMethodMustImplementCloneable" typeResolution="true" externalInfoUrl="${pmd.website.baseurl}/rules/java/typeresolution.html#CloneMethodMustImplementCloneable">        <description>The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException. This version uses PMD's type resolution facilities, and can detect if the class implements or extends a Cloneable class.        </description>        <priority>3</priority>        <example>            public class MyClass {	public Object clone() throws CloneNotSupportedException {		return foo;	}}           </example>    </rule>  <rule name="UnusedImports" since="4.0" message="Avoid unused imports such as ''{0}''" class="net.sourceforge.pmd.lang.java.typeresolution.rules.imports.UnusedImports" typeResolution="true" externalInfoUrl="${pmd.website.baseurl}/rules/java/typeresolution.html#UnusedImports">    <description>Avoid unused import statements. This rule will find unused on demand imports, i.e. import com.foo.*.    </description>      <priority>4</priority>    <example>import java.io.*;	// not referenced or requiredpublic class Foo {}    </example>    </rule>        <rule name="SignatureDeclareThrowsException" since="4.0" message="A method/constructor shouldn't explicitly throw java.lang.Exception" class="net.sourceforge.pmd.lang.java.typeresolution.rules.SignatureDeclareThrowsException" externalInfoUrl="${pmd.website.baseurl}/rules/java/typeresolution.html#SignatureDeclareThrowsException" typeResolution="true">      <description>It is unclear which exceptions that can be thrown from the methods.It might be difficult to document and understand the vague interfaces.Use either a class derived from RuntimeException or a checked exception.JUnit classes are excluded.      </description>      <priority>3</priority>      <properties>          <property description="If true, all methods in a JUnit testcase may throw Exception" name="IgnoreJUnitCompletely" value="false"/>      </properties>      <example>      	public void methodThrowingException() throws Exception {}      	      </example>    </rule>      </ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Unnecessary" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The Unnecessary Ruleset contains a collection of rules for unnecessary code.  </description>   	    <rule name="UnnecessaryConversionTemporary" since="0.1" message="Avoid unnecessary temporaries when converting primitives to Strings" class="net.sourceforge.pmd.lang.java.rule.unnecessary.UnnecessaryConversionTemporaryRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/unnecessary.html#UnnecessaryConversionTemporary">      <description>Avoid the use temporary objects when converting primitives to Strings. Use the static conversion methodson the wrapper classes instead.      </description>        <priority>3</priority>      <example>  public String convert(int x) {	String foo = new Integer(x).toString();	// this wastes an object		return Integer.toString(x);				// preferred approach}       </example>    </rule>    <rule name="UnnecessaryReturn" since="1.3" message="Avoid unnecessary return statements" class="net.sourceforge.pmd.lang.java.rule.unnecessary.UnnecessaryReturnRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/unnecessary.html#UnnecessaryReturn">      <description>Avoid the use of unnecessary return statements.      </description>      <priority>3</priority>      <example>		public class Foo {  public void bar() {    int x = 42;    return;  }}		      </example>    </rule>    <rule name="UnnecessaryFinalModifier" language="java" since="3.0" message="Unnecessary final modifier in final class" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/unnecessary.html#UnnecessaryFinalModifier">      <description>When a class has the final modifier, all the methods are automatically final and do not need to betagged as such.      </description>      <priority>3</priority>      <properties>          <property name="xpath">              <value>    //ClassOrInterfaceDeclaration[@Final='true' and @Interface='false']/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/MethodDeclaration[@Final='true']                  </value>          </property>      </properties>      <example>public final class Foo {    // This final modifier is not necessary, since the class is final    // and thus, all methods are final    private final void foo() {    }}      </example>    </rule>    <rule name="UselessOverridingMethod" since="3.3" message="Overriding method merely calls super" class="net.sourceforge.pmd.lang.java.rule.unnecessary.UselessOverridingMethodRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/unnecessary.html#UselessOverridingMethod">        <description>The overriding method merely calls the same method defined in a superclass.        </description>        <priority>3</priority>        <example>public void foo(String bar) {  super.foo(bar);      // why bother overriding?}public String foo() {	return super.foo();  // why bother overriding?}@Idpublic Long getId() {  return super.getId();  // OK if 'ignoreAnnotations' is false, which is the default behavior}        </example>    </rule>    <rule name="UselessOperationOnImmutable" since="3.5" message="An operation on an Immutable object (String, BigDecimal or BigInteger) won't change the object itself" class="net.sourceforge.pmd.lang.java.rule.unnecessary.UselessOperationOnImmutableRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/unnecessary.html#UselessOperationOnImmutable">      <description>An operation on an Immutable object (String, BigDecimal or BigInteger) won't change the object itselfsince the result of the operation is a new object. Therefore, ignoring the operation result is an error.      </description>      <priority>3</priority>      <example>    import java.math.*;class Test {  void method1() {    BigDecimal bd=new BigDecimal(10);    bd.add(new BigDecimal(5)); 		// this will trigger the rule  }  void method2() {    BigDecimal bd=new BigDecimal(10);    bd = bd.add(new BigDecimal(5)); // this won't trigger the rule  }}          </example>    </rule>    <rule name="UnusedNullCheckInEquals" language="java" since="3.5" message="Invoke equals() on the object you''ve already ensured is not null" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/unnecessary.html#UnusedNullCheckInEquals">    <description>After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object's equals() method.    </description>	<priority>3</priority>    <properties>        <property name="xpath">        <value>        (//PrimaryPrefix[ends-with(Name/@Image, '.equals') and Name/@Image != 'Arrays.equals'] | //PrimarySuffix[@Image='equals' and not(../PrimaryPrefix/Literal)]) /following-sibling::PrimarySuffix/Arguments/ArgumentList/Expression /PrimaryExpression[count(PrimarySuffix)=0]/PrimaryPrefix /Name[@Image = ./../../../../../../../../../../Expression/ConditionalAndExpression /EqualityExpression[@Image="!=" and count(./preceding-sibling::*)=0 and ./PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]  /PrimaryExpression/PrimaryPrefix/Name/@Image]                </value>        </property>    </properties>		<example>		public class Test {  public String method1() { return "ok";}  public String method2() { return null;}  public void method(String a) {    String b;	// I don't know it method1() can be "null"	// but I know "a" is not null..	// I'd better write a.equals(method1())		if (a!=null &amp;&amp; method1().equals(a)) { // will trigger the rule	//whatever	}		if (method1().equals(a) &amp;&amp; a != null) { // won't trigger the rule	//whatever	}		if (a!=null &amp;&amp; method1().equals(b)) { // won't trigger the rule	//whatever	}		if (a!=null &amp;&amp; "LITERAL".equals(a)) { // won't trigger the rule	//whatever	}		if (a!=null &amp;&amp; !a.equals("go")) { // won't trigger the rule	a=method2();	if (method1().equals(a)) {	//whatever	}  }}}							</example>		</rule>  <rule name="UselessParentheses" language="java" since="5.0" message="Useless parentheses." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/unnecessary.html#UselessParentheses">    <description>Useless parentheses should be removed.</description>    <priority>4</priority>    <properties>       <property name="xpath">          <value>          //Expression/PrimaryExpression/PrimaryPrefix/Expression[count(*)=1][count(./CastExpression)=0][count(./ConditionalExpression[@Ternary='true'])=0][not(./AdditiveExpression[//Literal[@StringLiteral='true']])]|//Expression/ConditionalAndExpression/PrimaryExpression/PrimaryPrefix/Expression[    count(*)=1 and    count(./CastExpression)=0 and    count(./EqualityExpression/MultiplicativeExpression)=0 and    count(./ConditionalOrExpression)=0]|//Expression/ConditionalOrExpression/PrimaryExpression/PrimaryPrefix/Expression[    count(*)=1 and    count(./CastExpression)=0 and    count(./EqualityExpression/MultiplicativeExpression)=0]|//Expression/ConditionalExpression/PrimaryExpression/PrimaryPrefix/Expression[    count(*)=1 and    count(./CastExpression)=0 and    count(./EqualityExpression)=0]|//Expression/AdditiveExpression[not(./PrimaryExpression/PrimaryPrefix/Literal[@StringLiteral = 'true'])]/PrimaryExpression[1]/PrimaryPrefix/Expression[    count(*)=1 and    not(./CastExpression) and    not(./ConditionalExpression) and    not(./ShiftExpression)]|//Expression/EqualityExpression/PrimaryExpression/PrimaryPrefix/Expression[    count(*)=1 and    count(./CastExpression)=0 and    count(./AndExpression)=0 and    count(./InclusiveOrExpression)=0 and    count(./ExclusiveOrExpression)=0 and    count(./ConditionalAndExpression)=0 and    count(./ConditionalOrExpression)=0]                    </value>       </property>    </properties>    <example>    public class Foo {   private int _bar1;   private Integer _bar2;   public void setBar(int n) {      _bar1 = Integer.valueOf((n)); // here      _bar2 = (n); // and here   }}        </example>  </rule>  </ruleset></language><language name="java"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Unused Code" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The Unused Code ruleset contains rules that find unused or ineffective code.  </description>  <rule name="UnusedPrivateField" since="0.1" language="java" message="Avoid unused private fields such as ''{0}''." class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedPrivateFieldRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/unusedcode.html#UnusedPrivateField">    <description>Detects when a private field is declared and/or assigned a value, but not used.    </description>      <priority>3</priority>    <example>public class Something {  private static int FOO = 2; // Unused  private int i = 5; // Unused  private int j = 6;  public int addOne() {    return j++;  }}    </example>  </rule>  <rule name="UnusedLocalVariable" language="java" since="0.1" message="Avoid unused local variables such as ''{0}''." class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedLocalVariableRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/unusedcode.html#UnusedLocalVariable">    <description>Detects when a local variable is declared and/or assigned, but not used.    </description>    <priority>3</priority>    <example>public class Foo {	public void doSomething() {		int i = 5; // Unused	}}    </example>  </rule>  <rule name="UnusedPrivateMethod" language="java" since="0.7" message="Avoid unused private methods such as ''{0}''." class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedPrivateMethodRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/unusedcode.html#UnusedPrivateMethod">    <description>Unused Private Method detects when a private method is declared but is unused.    </description>        <priority>3</priority>    <example>public class Something {	private void foo() {} // unused}    </example>  </rule>  <rule name="UnusedFormalParameter" language="java" since="0.8" message="Avoid unused {0} parameters such as ''{1}''." class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedFormalParameterRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/unusedcode.html#UnusedFormalParameter">    <description>Avoid passing parameters to methods or constructors without actually referencing them in the method body.    </description>      <priority>3</priority>    <example>public class Foo {	private void bar(String howdy) {	// howdy is not used	}}    </example>  </rule>    <rule name="UnusedModifier" language="java" since="1.02" message="Avoid modifiers which are implied by the context" class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedModifierRule" externalInfoUrl="${pmd.website.baseurl}/rules/java/unusedcode.html#UnusedModifier">     <description>Fields in interfaces are automatically public static final, and methods are public abstract.Classes or interfaces nested in an interface are automatically public and static (all nested interfaces are automatically static).For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.     </description>        <priority>3</priority>     <example> public interface Foo {  public abstract void bar(); 		// both abstract and public are ignored by the compiler  public static final int X = 0; 	// public, static, and final all ignored  public static class Bar {} 		// public, static ignored  public static interface Baz {} 	// ditto}public class Bar {  public static interface Baz {} // static ignored}      </example>     </rule> </ruleset></language></rulesets>