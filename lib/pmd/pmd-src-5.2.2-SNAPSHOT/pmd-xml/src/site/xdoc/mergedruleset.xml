<?xml version="1.0" encoding="UTF-8"?><!--        THIS FILE HAS BEEN AUTOMATICLY GENERATED.        --><rulesets><language name="xml"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Basic XML" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>The Basic XML Ruleset contains a collection of good practices which everyone should follow.  </description>	<rule name="MistypedCDATASection" language="xml" since="5.0" message="Potentialy mistyped CDATA section with extra [ at beginning or ] at the end." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/xml/basic.html#MistypedCDATASection">     <description>An XML CDATA section begins with a &lt;!CDATA[ marker, which has only one [, and ends with a ]]&gt; marker, which has only two ].      </description>     <priority>3</priority>     <properties>         <property name="xpath">             <value> //cdata-section[starts-with(@Image,'[') or ends-with(@Image,']')]             </value>         </property>     </properties>     <example> An extra [ looks like &amp;lt;!CDATA[[]]&amp;gt;, and an extra ] looks like &amp;lt;!CDATA[]]]&amp;gt;.      </example>     </rule></ruleset></language><language name="xsl"><ruleset  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="XPath in XSL" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">  <description>This ruleset regroups a collection of good practices regarding XPath querying and functions inside an XSL.  </description>	<rule name="UseConcatOnce" language="xsl" since="5.0" message="The xpath concat() function accepts as many arguments as required, you may be able to factorize this expression" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/xsl/xpath.html#UseConcatOnce">     <description>The XPath concat() functions accepts as many arguments as required so you can have "concat($a,'b',$c)" rather than "concat($a,concat('b',$c)".     </description>     <priority>3</priority>     <properties>         <property name="xpath">             <value> //node()[contains(substring-after(@select,'concat'),'concat')]<!-- the use of node() allow to target any node with an select attribute     but also workaround the ambiguity of having the xsl namespace in the     node name.-->             </value>         </property>     </properties>     <example>  &lt;xsl:variable name="var" select="concat("Welcome",concat("to you ",$name))"/&gt; &lt;xsl:variable name="var" select="concat("Welcome","to you ",$name))"&gt;      </example>     </rule>     <rule name="AvoidAxisNavigation" language="xsl" since="5.0" message="Axis navigation has the largest impact when writing an XPath query." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="${pmd.website.baseurl}/rules/xsl/xpath.html#AvoidAxisNavigation">     <description>Avoid using the 'following' or 'preceeding' axes whenever possible, as these can cut through 100% of the document in the worst case.  Also, try to avoid using 'descendant' or 'descendant-self' axes, as if you're at the top of the Document, it necessarily means cutting through 100% of the document.      </description>     <priority>3</priority>     <properties>         <property name="xpath">             <value> //node()[  contains(@select,'preceeding::')  or  contains(@select,'following::')  or  contains(@select,'descendant::')  or   contains(@select,'descendant-self::')  or (    ($checkSelfDescendantAbreviation = 'true' )    and    contains(@select,'//')    )]<!-- the use of node() allow to target any node with an select attribute     but also workaround the ambiguity of having the xsl namespace in the     node name.-->             </value>         </property>	 <property name="checkSelfDescendantAbreviation" type="Boolean" description="descendant::self abreviation, '//', will also trigger this rule." value="false"/>     </properties>     <example>  &lt;xsl:variable name="var" select="//item/descendant::child"/&gt;      </example>   </rule></ruleset></language></rulesets>